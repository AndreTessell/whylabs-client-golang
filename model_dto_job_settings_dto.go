/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DTOJobSettingsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DTOJobSettingsDTO{}

// DTOJobSettingsDTO struct for DTOJobSettingsDTO
type DTOJobSettingsDTO struct {
	Name *string `json:"name,omitempty"`
	NewCluster *DTONewClusterDTO `json:"newCluster,omitempty"`
	ExistingClusterId *string `json:"existingClusterId,omitempty"`
	EmailNotifications *DTOJobEmailNotificationsDTO `json:"emailNotifications,omitempty"`
	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty"`
	Schedule *DTOCronScheduleDTO `json:"schedule,omitempty"`
	NotebookTask *DTONotebookTaskDTO `json:"notebookTask,omitempty"`
	SparkJarTask *DTOSparkJarTaskDTO `json:"sparkJarTask,omitempty"`
	SparkPythonTask *DTOSparkPythonTaskDTO `json:"sparkPythonTask,omitempty"`
	SparkSubmitTask *DTOSparkSubmitTaskDTO `json:"sparkSubmitTask,omitempty"`
	RetryOnTimeout *bool `json:"retryOnTimeout,omitempty"`
	MaxRetries *int32 `json:"maxRetries,omitempty"`
	MinRetryIntervalMillis *int64 `json:"minRetryIntervalMillis,omitempty"`
	Libraries []map[string]interface{} `json:"libraries,omitempty"`
	MaxConcurrentRuns *int32 `json:"maxConcurrentRuns,omitempty"`
}

// NewDTOJobSettingsDTO instantiates a new DTOJobSettingsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDTOJobSettingsDTO() *DTOJobSettingsDTO {
	this := DTOJobSettingsDTO{}
	return &this
}

// NewDTOJobSettingsDTOWithDefaults instantiates a new DTOJobSettingsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDTOJobSettingsDTOWithDefaults() *DTOJobSettingsDTO {
	this := DTOJobSettingsDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DTOJobSettingsDTO) SetName(v string) {
	o.Name = &v
}

// GetNewCluster returns the NewCluster field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetNewCluster() DTONewClusterDTO {
	if o == nil || isNil(o.NewCluster) {
		var ret DTONewClusterDTO
		return ret
	}
	return *o.NewCluster
}

// GetNewClusterOk returns a tuple with the NewCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetNewClusterOk() (*DTONewClusterDTO, bool) {
	if o == nil || isNil(o.NewCluster) {
		return nil, false
	}
	return o.NewCluster, true
}

// HasNewCluster returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasNewCluster() bool {
	if o != nil && !isNil(o.NewCluster) {
		return true
	}

	return false
}

// SetNewCluster gets a reference to the given DTONewClusterDTO and assigns it to the NewCluster field.
func (o *DTOJobSettingsDTO) SetNewCluster(v DTONewClusterDTO) {
	o.NewCluster = &v
}

// GetExistingClusterId returns the ExistingClusterId field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetExistingClusterId() string {
	if o == nil || isNil(o.ExistingClusterId) {
		var ret string
		return ret
	}
	return *o.ExistingClusterId
}

// GetExistingClusterIdOk returns a tuple with the ExistingClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetExistingClusterIdOk() (*string, bool) {
	if o == nil || isNil(o.ExistingClusterId) {
		return nil, false
	}
	return o.ExistingClusterId, true
}

// HasExistingClusterId returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasExistingClusterId() bool {
	if o != nil && !isNil(o.ExistingClusterId) {
		return true
	}

	return false
}

// SetExistingClusterId gets a reference to the given string and assigns it to the ExistingClusterId field.
func (o *DTOJobSettingsDTO) SetExistingClusterId(v string) {
	o.ExistingClusterId = &v
}

// GetEmailNotifications returns the EmailNotifications field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetEmailNotifications() DTOJobEmailNotificationsDTO {
	if o == nil || isNil(o.EmailNotifications) {
		var ret DTOJobEmailNotificationsDTO
		return ret
	}
	return *o.EmailNotifications
}

// GetEmailNotificationsOk returns a tuple with the EmailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetEmailNotificationsOk() (*DTOJobEmailNotificationsDTO, bool) {
	if o == nil || isNil(o.EmailNotifications) {
		return nil, false
	}
	return o.EmailNotifications, true
}

// HasEmailNotifications returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasEmailNotifications() bool {
	if o != nil && !isNil(o.EmailNotifications) {
		return true
	}

	return false
}

// SetEmailNotifications gets a reference to the given DTOJobEmailNotificationsDTO and assigns it to the EmailNotifications field.
func (o *DTOJobSettingsDTO) SetEmailNotifications(v DTOJobEmailNotificationsDTO) {
	o.EmailNotifications = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetTimeoutSeconds() int64 {
	if o == nil || isNil(o.TimeoutSeconds) {
		var ret int64
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetTimeoutSecondsOk() (*int64, bool) {
	if o == nil || isNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasTimeoutSeconds() bool {
	if o != nil && !isNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int64 and assigns it to the TimeoutSeconds field.
func (o *DTOJobSettingsDTO) SetTimeoutSeconds(v int64) {
	o.TimeoutSeconds = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetSchedule() DTOCronScheduleDTO {
	if o == nil || isNil(o.Schedule) {
		var ret DTOCronScheduleDTO
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetScheduleOk() (*DTOCronScheduleDTO, bool) {
	if o == nil || isNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasSchedule() bool {
	if o != nil && !isNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given DTOCronScheduleDTO and assigns it to the Schedule field.
func (o *DTOJobSettingsDTO) SetSchedule(v DTOCronScheduleDTO) {
	o.Schedule = &v
}

// GetNotebookTask returns the NotebookTask field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetNotebookTask() DTONotebookTaskDTO {
	if o == nil || isNil(o.NotebookTask) {
		var ret DTONotebookTaskDTO
		return ret
	}
	return *o.NotebookTask
}

// GetNotebookTaskOk returns a tuple with the NotebookTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetNotebookTaskOk() (*DTONotebookTaskDTO, bool) {
	if o == nil || isNil(o.NotebookTask) {
		return nil, false
	}
	return o.NotebookTask, true
}

// HasNotebookTask returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasNotebookTask() bool {
	if o != nil && !isNil(o.NotebookTask) {
		return true
	}

	return false
}

// SetNotebookTask gets a reference to the given DTONotebookTaskDTO and assigns it to the NotebookTask field.
func (o *DTOJobSettingsDTO) SetNotebookTask(v DTONotebookTaskDTO) {
	o.NotebookTask = &v
}

// GetSparkJarTask returns the SparkJarTask field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetSparkJarTask() DTOSparkJarTaskDTO {
	if o == nil || isNil(o.SparkJarTask) {
		var ret DTOSparkJarTaskDTO
		return ret
	}
	return *o.SparkJarTask
}

// GetSparkJarTaskOk returns a tuple with the SparkJarTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetSparkJarTaskOk() (*DTOSparkJarTaskDTO, bool) {
	if o == nil || isNil(o.SparkJarTask) {
		return nil, false
	}
	return o.SparkJarTask, true
}

// HasSparkJarTask returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasSparkJarTask() bool {
	if o != nil && !isNil(o.SparkJarTask) {
		return true
	}

	return false
}

// SetSparkJarTask gets a reference to the given DTOSparkJarTaskDTO and assigns it to the SparkJarTask field.
func (o *DTOJobSettingsDTO) SetSparkJarTask(v DTOSparkJarTaskDTO) {
	o.SparkJarTask = &v
}

// GetSparkPythonTask returns the SparkPythonTask field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetSparkPythonTask() DTOSparkPythonTaskDTO {
	if o == nil || isNil(o.SparkPythonTask) {
		var ret DTOSparkPythonTaskDTO
		return ret
	}
	return *o.SparkPythonTask
}

// GetSparkPythonTaskOk returns a tuple with the SparkPythonTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetSparkPythonTaskOk() (*DTOSparkPythonTaskDTO, bool) {
	if o == nil || isNil(o.SparkPythonTask) {
		return nil, false
	}
	return o.SparkPythonTask, true
}

// HasSparkPythonTask returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasSparkPythonTask() bool {
	if o != nil && !isNil(o.SparkPythonTask) {
		return true
	}

	return false
}

// SetSparkPythonTask gets a reference to the given DTOSparkPythonTaskDTO and assigns it to the SparkPythonTask field.
func (o *DTOJobSettingsDTO) SetSparkPythonTask(v DTOSparkPythonTaskDTO) {
	o.SparkPythonTask = &v
}

// GetSparkSubmitTask returns the SparkSubmitTask field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetSparkSubmitTask() DTOSparkSubmitTaskDTO {
	if o == nil || isNil(o.SparkSubmitTask) {
		var ret DTOSparkSubmitTaskDTO
		return ret
	}
	return *o.SparkSubmitTask
}

// GetSparkSubmitTaskOk returns a tuple with the SparkSubmitTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetSparkSubmitTaskOk() (*DTOSparkSubmitTaskDTO, bool) {
	if o == nil || isNil(o.SparkSubmitTask) {
		return nil, false
	}
	return o.SparkSubmitTask, true
}

// HasSparkSubmitTask returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasSparkSubmitTask() bool {
	if o != nil && !isNil(o.SparkSubmitTask) {
		return true
	}

	return false
}

// SetSparkSubmitTask gets a reference to the given DTOSparkSubmitTaskDTO and assigns it to the SparkSubmitTask field.
func (o *DTOJobSettingsDTO) SetSparkSubmitTask(v DTOSparkSubmitTaskDTO) {
	o.SparkSubmitTask = &v
}

// GetRetryOnTimeout returns the RetryOnTimeout field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetRetryOnTimeout() bool {
	if o == nil || isNil(o.RetryOnTimeout) {
		var ret bool
		return ret
	}
	return *o.RetryOnTimeout
}

// GetRetryOnTimeoutOk returns a tuple with the RetryOnTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetRetryOnTimeoutOk() (*bool, bool) {
	if o == nil || isNil(o.RetryOnTimeout) {
		return nil, false
	}
	return o.RetryOnTimeout, true
}

// HasRetryOnTimeout returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasRetryOnTimeout() bool {
	if o != nil && !isNil(o.RetryOnTimeout) {
		return true
	}

	return false
}

// SetRetryOnTimeout gets a reference to the given bool and assigns it to the RetryOnTimeout field.
func (o *DTOJobSettingsDTO) SetRetryOnTimeout(v bool) {
	o.RetryOnTimeout = &v
}

// GetMaxRetries returns the MaxRetries field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetMaxRetries() int32 {
	if o == nil || isNil(o.MaxRetries) {
		var ret int32
		return ret
	}
	return *o.MaxRetries
}

// GetMaxRetriesOk returns a tuple with the MaxRetries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetMaxRetriesOk() (*int32, bool) {
	if o == nil || isNil(o.MaxRetries) {
		return nil, false
	}
	return o.MaxRetries, true
}

// HasMaxRetries returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasMaxRetries() bool {
	if o != nil && !isNil(o.MaxRetries) {
		return true
	}

	return false
}

// SetMaxRetries gets a reference to the given int32 and assigns it to the MaxRetries field.
func (o *DTOJobSettingsDTO) SetMaxRetries(v int32) {
	o.MaxRetries = &v
}

// GetMinRetryIntervalMillis returns the MinRetryIntervalMillis field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetMinRetryIntervalMillis() int64 {
	if o == nil || isNil(o.MinRetryIntervalMillis) {
		var ret int64
		return ret
	}
	return *o.MinRetryIntervalMillis
}

// GetMinRetryIntervalMillisOk returns a tuple with the MinRetryIntervalMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetMinRetryIntervalMillisOk() (*int64, bool) {
	if o == nil || isNil(o.MinRetryIntervalMillis) {
		return nil, false
	}
	return o.MinRetryIntervalMillis, true
}

// HasMinRetryIntervalMillis returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasMinRetryIntervalMillis() bool {
	if o != nil && !isNil(o.MinRetryIntervalMillis) {
		return true
	}

	return false
}

// SetMinRetryIntervalMillis gets a reference to the given int64 and assigns it to the MinRetryIntervalMillis field.
func (o *DTOJobSettingsDTO) SetMinRetryIntervalMillis(v int64) {
	o.MinRetryIntervalMillis = &v
}

// GetLibraries returns the Libraries field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetLibraries() []map[string]interface{} {
	if o == nil || isNil(o.Libraries) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Libraries
}

// GetLibrariesOk returns a tuple with the Libraries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetLibrariesOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Libraries) {
		return nil, false
	}
	return o.Libraries, true
}

// HasLibraries returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasLibraries() bool {
	if o != nil && !isNil(o.Libraries) {
		return true
	}

	return false
}

// SetLibraries gets a reference to the given []map[string]interface{} and assigns it to the Libraries field.
func (o *DTOJobSettingsDTO) SetLibraries(v []map[string]interface{}) {
	o.Libraries = v
}

// GetMaxConcurrentRuns returns the MaxConcurrentRuns field value if set, zero value otherwise.
func (o *DTOJobSettingsDTO) GetMaxConcurrentRuns() int32 {
	if o == nil || isNil(o.MaxConcurrentRuns) {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentRuns
}

// GetMaxConcurrentRunsOk returns a tuple with the MaxConcurrentRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobSettingsDTO) GetMaxConcurrentRunsOk() (*int32, bool) {
	if o == nil || isNil(o.MaxConcurrentRuns) {
		return nil, false
	}
	return o.MaxConcurrentRuns, true
}

// HasMaxConcurrentRuns returns a boolean if a field has been set.
func (o *DTOJobSettingsDTO) HasMaxConcurrentRuns() bool {
	if o != nil && !isNil(o.MaxConcurrentRuns) {
		return true
	}

	return false
}

// SetMaxConcurrentRuns gets a reference to the given int32 and assigns it to the MaxConcurrentRuns field.
func (o *DTOJobSettingsDTO) SetMaxConcurrentRuns(v int32) {
	o.MaxConcurrentRuns = &v
}

func (o DTOJobSettingsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DTOJobSettingsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.NewCluster) {
		toSerialize["newCluster"] = o.NewCluster
	}
	if !isNil(o.ExistingClusterId) {
		toSerialize["existingClusterId"] = o.ExistingClusterId
	}
	if !isNil(o.EmailNotifications) {
		toSerialize["emailNotifications"] = o.EmailNotifications
	}
	if !isNil(o.TimeoutSeconds) {
		toSerialize["timeoutSeconds"] = o.TimeoutSeconds
	}
	if !isNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !isNil(o.NotebookTask) {
		toSerialize["notebookTask"] = o.NotebookTask
	}
	if !isNil(o.SparkJarTask) {
		toSerialize["sparkJarTask"] = o.SparkJarTask
	}
	if !isNil(o.SparkPythonTask) {
		toSerialize["sparkPythonTask"] = o.SparkPythonTask
	}
	if !isNil(o.SparkSubmitTask) {
		toSerialize["sparkSubmitTask"] = o.SparkSubmitTask
	}
	if !isNil(o.RetryOnTimeout) {
		toSerialize["retryOnTimeout"] = o.RetryOnTimeout
	}
	if !isNil(o.MaxRetries) {
		toSerialize["maxRetries"] = o.MaxRetries
	}
	if !isNil(o.MinRetryIntervalMillis) {
		toSerialize["minRetryIntervalMillis"] = o.MinRetryIntervalMillis
	}
	if !isNil(o.Libraries) {
		toSerialize["libraries"] = o.Libraries
	}
	if !isNil(o.MaxConcurrentRuns) {
		toSerialize["maxConcurrentRuns"] = o.MaxConcurrentRuns
	}
	return toSerialize, nil
}

type NullableDTOJobSettingsDTO struct {
	value *DTOJobSettingsDTO
	isSet bool
}

func (v NullableDTOJobSettingsDTO) Get() *DTOJobSettingsDTO {
	return v.value
}

func (v *NullableDTOJobSettingsDTO) Set(val *DTOJobSettingsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDTOJobSettingsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDTOJobSettingsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDTOJobSettingsDTO(val *DTOJobSettingsDTO) *NullableDTOJobSettingsDTO {
	return &NullableDTOJobSettingsDTO{value: val, isSet: true}
}

func (v NullableDTOJobSettingsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDTOJobSettingsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


