/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotificationAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationAction{}

// NotificationAction struct for NotificationAction
type NotificationAction struct {
	Id *string `json:"id,omitempty"`
	Type *ActionType `json:"type,omitempty"`
	Payload map[string]interface{} `json:"payload,omitempty"`
}

// NewNotificationAction instantiates a new NotificationAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationAction() *NotificationAction {
	this := NotificationAction{}
	return &this
}

// NewNotificationActionWithDefaults instantiates a new NotificationAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationActionWithDefaults() *NotificationAction {
	this := NotificationAction{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationAction) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationAction) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationAction) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationAction) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NotificationAction) GetType() ActionType {
	if o == nil || isNil(o.Type) {
		var ret ActionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationAction) GetTypeOk() (*ActionType, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NotificationAction) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ActionType and assigns it to the Type field.
func (o *NotificationAction) SetType(v ActionType) {
	o.Type = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NotificationAction) GetPayload() map[string]interface{} {
	if o == nil || isNil(o.Payload) {
		var ret map[string]interface{}
		return ret
	}
	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationAction) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Payload) {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NotificationAction) HasPayload() bool {
	if o != nil && !isNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given map[string]interface{} and assigns it to the Payload field.
func (o *NotificationAction) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

func (o NotificationAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	return toSerialize, nil
}

type NullableNotificationAction struct {
	value *NotificationAction
	isSet bool
}

func (v NullableNotificationAction) Get() *NotificationAction {
	return v.value
}

func (v *NullableNotificationAction) Set(val *NotificationAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationAction(val *NotificationAction) *NullableNotificationAction {
	return &NullableNotificationAction{value: val, isSet: true}
}

func (v NullableNotificationAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


