/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMetadata{}

// ModelMetadata Detailed metadata about a model
type ModelMetadata struct {
	Id string `json:"id"`
	OrgId *string `json:"orgId,omitempty"`
	Name string `json:"name"`
	CreationTime *int64 `json:"creationTime,omitempty"`
	TimePeriod *TimePeriod `json:"timePeriod,omitempty"`
	ModelType *ModelType `json:"modelType,omitempty"`
	Active NullableBool `json:"active,omitempty"`
}

// NewModelMetadata instantiates a new ModelMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMetadata(id string, name string) *ModelMetadata {
	this := ModelMetadata{}
	this.Id = id
	this.Name = name
	return &this
}

// NewModelMetadataWithDefaults instantiates a new ModelMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMetadataWithDefaults() *ModelMetadata {
	this := ModelMetadata{}
	return &this
}

// GetId returns the Id field value
func (o *ModelMetadata) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelMetadata) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelMetadata) SetId(v string) {
	o.Id = v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *ModelMetadata) GetOrgId() string {
	if o == nil || isNil(o.OrgId) {
		var ret string
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMetadata) GetOrgIdOk() (*string, bool) {
	if o == nil || isNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *ModelMetadata) HasOrgId() bool {
	if o != nil && !isNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given string and assigns it to the OrgId field.
func (o *ModelMetadata) SetOrgId(v string) {
	o.OrgId = &v
}

// GetName returns the Name field value
func (o *ModelMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelMetadata) SetName(v string) {
	o.Name = v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *ModelMetadata) GetCreationTime() int64 {
	if o == nil || isNil(o.CreationTime) {
		var ret int64
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMetadata) GetCreationTimeOk() (*int64, bool) {
	if o == nil || isNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *ModelMetadata) HasCreationTime() bool {
	if o != nil && !isNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given int64 and assigns it to the CreationTime field.
func (o *ModelMetadata) SetCreationTime(v int64) {
	o.CreationTime = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *ModelMetadata) GetTimePeriod() TimePeriod {
	if o == nil || isNil(o.TimePeriod) {
		var ret TimePeriod
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMetadata) GetTimePeriodOk() (*TimePeriod, bool) {
	if o == nil || isNil(o.TimePeriod) {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *ModelMetadata) HasTimePeriod() bool {
	if o != nil && !isNil(o.TimePeriod) {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given TimePeriod and assigns it to the TimePeriod field.
func (o *ModelMetadata) SetTimePeriod(v TimePeriod) {
	o.TimePeriod = &v
}

// GetModelType returns the ModelType field value if set, zero value otherwise.
func (o *ModelMetadata) GetModelType() ModelType {
	if o == nil || isNil(o.ModelType) {
		var ret ModelType
		return ret
	}
	return *o.ModelType
}

// GetModelTypeOk returns a tuple with the ModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMetadata) GetModelTypeOk() (*ModelType, bool) {
	if o == nil || isNil(o.ModelType) {
		return nil, false
	}
	return o.ModelType, true
}

// HasModelType returns a boolean if a field has been set.
func (o *ModelMetadata) HasModelType() bool {
	if o != nil && !isNil(o.ModelType) {
		return true
	}

	return false
}

// SetModelType gets a reference to the given ModelType and assigns it to the ModelType field.
func (o *ModelMetadata) SetModelType(v ModelType) {
	o.ModelType = &v
}

// GetActive returns the Active field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelMetadata) GetActive() bool {
	if o == nil || isNil(o.Active.Get()) {
		var ret bool
		return ret
	}
	return *o.Active.Get()
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelMetadata) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Active.Get(), o.Active.IsSet()
}

// HasActive returns a boolean if a field has been set.
func (o *ModelMetadata) HasActive() bool {
	if o != nil && o.Active.IsSet() {
		return true
	}

	return false
}

// SetActive gets a reference to the given NullableBool and assigns it to the Active field.
func (o *ModelMetadata) SetActive(v bool) {
	o.Active.Set(&v)
}
// SetActiveNil sets the value for Active to be an explicit nil
func (o *ModelMetadata) SetActiveNil() {
	o.Active.Set(nil)
}

// UnsetActive ensures that no value is present for Active, not even an explicit nil
func (o *ModelMetadata) UnsetActive() {
	o.Active.Unset()
}

func (o ModelMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !isNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	toSerialize["name"] = o.Name
	if !isNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !isNil(o.TimePeriod) {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	if !isNil(o.ModelType) {
		toSerialize["modelType"] = o.ModelType
	}
	if o.Active.IsSet() {
		toSerialize["active"] = o.Active.Get()
	}
	return toSerialize, nil
}

type NullableModelMetadata struct {
	value *ModelMetadata
	isSet bool
}

func (v NullableModelMetadata) Get() *ModelMetadata {
	return v.value
}

func (v *NullableModelMetadata) Set(val *ModelMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMetadata(val *ModelMetadata) *NullableModelMetadata {
	return &NullableModelMetadata{value: val, isSet: true}
}

func (v NullableModelMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


