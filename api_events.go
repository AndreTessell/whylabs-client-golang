/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


// EventsApiService EventsApi service
type EventsApiService service

type ApiGetEventsDataRequest struct {
	ctx context.Context
	ApiService *EventsApiService
	orgId string
	modelId string
	startTimestamp *int64
	endTimestamp *int64
	segmentTags *[]SegmentTag
	version *string
}

// Start time exclusive
func (r ApiGetEventsDataRequest) StartTimestamp(startTimestamp int64) ApiGetEventsDataRequest {
	r.startTimestamp = &startTimestamp
	return r
}

func (r ApiGetEventsDataRequest) EndTimestamp(endTimestamp int64) ApiGetEventsDataRequest {
	r.endTimestamp = &endTimestamp
	return r
}

// List of (key, value) pair tags for a segment. Must not contain duplicate values
func (r ApiGetEventsDataRequest) SegmentTags(segmentTags []SegmentTag) ApiGetEventsDataRequest {
	r.segmentTags = &segmentTags
	return r
}

// the version of the event
func (r ApiGetEventsDataRequest) Version(version string) ApiGetEventsDataRequest {
	r.version = &version
	return r
}

func (r ApiGetEventsDataRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetEventsDataExecute(r)
}

/*
GetEventsData Get the event data as multi-line JSON for a given time period.

Get the events from a given time period.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param modelId The unique model ID in your company. The model is created if it doesn't exist already.
 @return ApiGetEventsDataRequest
*/
func (a *EventsApiService) GetEventsData(ctx context.Context, orgId string, modelId string) ApiGetEventsDataRequest {
	return ApiGetEventsDataRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *EventsApiService) GetEventsDataExecute(r ApiGetEventsDataRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.GetEventsData")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/events/models/{model_id}/data"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTimestamp == nil {
		return localVarReturnValue, nil, reportError("startTimestamp is required and must be specified")
	}
	if r.endTimestamp == nil {
		return localVarReturnValue, nil, reportError("endTimestamp is required and must be specified")
	}

	if r.segmentTags != nil {
		t := *r.segmentTags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToQuery(localVarQueryParams, "segment_tags", s.Index(i), "multi")
			}
		} else {
			parameterAddToQuery(localVarQueryParams, "segment_tags", t, "multi")
		}
	}
	parameterAddToQuery(localVarQueryParams, "start_timestamp", r.startTimestamp, "")
	parameterAddToQuery(localVarQueryParams, "end_timestamp", r.endTimestamp, "")
	if r.version != nil {
		parameterAddToQuery(localVarQueryParams, "version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/x-json-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEventsPathsRequest struct {
	ctx context.Context
	ApiService *EventsApiService
	orgId string
	modelId string
	startTimestamp *int64
	endTimestamp *int64
	segmentTags *[]SegmentTag
	version *string
}

// Start time exclusive
func (r ApiGetEventsPathsRequest) StartTimestamp(startTimestamp int64) ApiGetEventsPathsRequest {
	r.startTimestamp = &startTimestamp
	return r
}

func (r ApiGetEventsPathsRequest) EndTimestamp(endTimestamp int64) ApiGetEventsPathsRequest {
	r.endTimestamp = &endTimestamp
	return r
}

// List of (key, value) pair tags for a segment. Must not contain duplicate values
func (r ApiGetEventsPathsRequest) SegmentTags(segmentTags []SegmentTag) ApiGetEventsPathsRequest {
	r.segmentTags = &segmentTags
	return r
}

// the version of the
func (r ApiGetEventsPathsRequest) Version(version string) ApiGetEventsPathsRequest {
	r.version = &version
	return r
}

func (r ApiGetEventsPathsRequest) Execute() (*GetEventsPathResponse, *http.Response, error) {
	return r.ApiService.GetEventsPathsExecute(r)
}

/*
GetEventsPaths Get the events for a given time period.

Get the events from a given time period.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param modelId The unique model ID in your company.
 @return ApiGetEventsPathsRequest
*/
func (a *EventsApiService) GetEventsPaths(ctx context.Context, orgId string, modelId string) ApiGetEventsPathsRequest {
	return ApiGetEventsPathsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return GetEventsPathResponse
func (a *EventsApiService) GetEventsPathsExecute(r ApiGetEventsPathsRequest) (*GetEventsPathResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetEventsPathResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsApiService.GetEventsPaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/events/models/{model_id}/paths"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTimestamp == nil {
		return localVarReturnValue, nil, reportError("startTimestamp is required and must be specified")
	}
	if r.endTimestamp == nil {
		return localVarReturnValue, nil, reportError("endTimestamp is required and must be specified")
	}

	if r.segmentTags != nil {
		t := *r.segmentTags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToQuery(localVarQueryParams, "segment_tags", s.Index(i), "multi")
			}
		} else {
			parameterAddToQuery(localVarQueryParams, "segment_tags", t, "multi")
		}
	}
	parameterAddToQuery(localVarQueryParams, "start_timestamp", r.startTimestamp, "")
	parameterAddToQuery(localVarQueryParams, "end_timestamp", r.endTimestamp, "")
	if r.version != nil {
		parameterAddToQuery(localVarQueryParams, "version", r.version, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetEventsPathResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
