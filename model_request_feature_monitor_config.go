/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RequestFeatureMonitorConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestFeatureMonitorConfig{}

// RequestFeatureMonitorConfig A configuration for the whylabs monitor for a single feature
type RequestFeatureMonitorConfig struct {
	Distribution *DistributionMonitorRequestConfig `json:"distribution,omitempty"`
	MissingValues *MissingValuesMonitorRequestConfig `json:"missingValues,omitempty"`
	UniqueValues *UniqueValuesMonitorRequestConfig `json:"uniqueValues,omitempty"`
	Datatype *DatatypeMonitorRequestConfig `json:"datatype,omitempty"`
	SeasonalARIMA *SeasonalARIMARequestConfig `json:"seasonalARIMA,omitempty"`
}

// NewRequestFeatureMonitorConfig instantiates a new RequestFeatureMonitorConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestFeatureMonitorConfig() *RequestFeatureMonitorConfig {
	this := RequestFeatureMonitorConfig{}
	return &this
}

// NewRequestFeatureMonitorConfigWithDefaults instantiates a new RequestFeatureMonitorConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestFeatureMonitorConfigWithDefaults() *RequestFeatureMonitorConfig {
	this := RequestFeatureMonitorConfig{}
	return &this
}

// GetDistribution returns the Distribution field value if set, zero value otherwise.
func (o *RequestFeatureMonitorConfig) GetDistribution() DistributionMonitorRequestConfig {
	if o == nil || isNil(o.Distribution) {
		var ret DistributionMonitorRequestConfig
		return ret
	}
	return *o.Distribution
}

// GetDistributionOk returns a tuple with the Distribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestFeatureMonitorConfig) GetDistributionOk() (*DistributionMonitorRequestConfig, bool) {
	if o == nil || isNil(o.Distribution) {
		return nil, false
	}
	return o.Distribution, true
}

// HasDistribution returns a boolean if a field has been set.
func (o *RequestFeatureMonitorConfig) HasDistribution() bool {
	if o != nil && !isNil(o.Distribution) {
		return true
	}

	return false
}

// SetDistribution gets a reference to the given DistributionMonitorRequestConfig and assigns it to the Distribution field.
func (o *RequestFeatureMonitorConfig) SetDistribution(v DistributionMonitorRequestConfig) {
	o.Distribution = &v
}

// GetMissingValues returns the MissingValues field value if set, zero value otherwise.
func (o *RequestFeatureMonitorConfig) GetMissingValues() MissingValuesMonitorRequestConfig {
	if o == nil || isNil(o.MissingValues) {
		var ret MissingValuesMonitorRequestConfig
		return ret
	}
	return *o.MissingValues
}

// GetMissingValuesOk returns a tuple with the MissingValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestFeatureMonitorConfig) GetMissingValuesOk() (*MissingValuesMonitorRequestConfig, bool) {
	if o == nil || isNil(o.MissingValues) {
		return nil, false
	}
	return o.MissingValues, true
}

// HasMissingValues returns a boolean if a field has been set.
func (o *RequestFeatureMonitorConfig) HasMissingValues() bool {
	if o != nil && !isNil(o.MissingValues) {
		return true
	}

	return false
}

// SetMissingValues gets a reference to the given MissingValuesMonitorRequestConfig and assigns it to the MissingValues field.
func (o *RequestFeatureMonitorConfig) SetMissingValues(v MissingValuesMonitorRequestConfig) {
	o.MissingValues = &v
}

// GetUniqueValues returns the UniqueValues field value if set, zero value otherwise.
func (o *RequestFeatureMonitorConfig) GetUniqueValues() UniqueValuesMonitorRequestConfig {
	if o == nil || isNil(o.UniqueValues) {
		var ret UniqueValuesMonitorRequestConfig
		return ret
	}
	return *o.UniqueValues
}

// GetUniqueValuesOk returns a tuple with the UniqueValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestFeatureMonitorConfig) GetUniqueValuesOk() (*UniqueValuesMonitorRequestConfig, bool) {
	if o == nil || isNil(o.UniqueValues) {
		return nil, false
	}
	return o.UniqueValues, true
}

// HasUniqueValues returns a boolean if a field has been set.
func (o *RequestFeatureMonitorConfig) HasUniqueValues() bool {
	if o != nil && !isNil(o.UniqueValues) {
		return true
	}

	return false
}

// SetUniqueValues gets a reference to the given UniqueValuesMonitorRequestConfig and assigns it to the UniqueValues field.
func (o *RequestFeatureMonitorConfig) SetUniqueValues(v UniqueValuesMonitorRequestConfig) {
	o.UniqueValues = &v
}

// GetDatatype returns the Datatype field value if set, zero value otherwise.
func (o *RequestFeatureMonitorConfig) GetDatatype() DatatypeMonitorRequestConfig {
	if o == nil || isNil(o.Datatype) {
		var ret DatatypeMonitorRequestConfig
		return ret
	}
	return *o.Datatype
}

// GetDatatypeOk returns a tuple with the Datatype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestFeatureMonitorConfig) GetDatatypeOk() (*DatatypeMonitorRequestConfig, bool) {
	if o == nil || isNil(o.Datatype) {
		return nil, false
	}
	return o.Datatype, true
}

// HasDatatype returns a boolean if a field has been set.
func (o *RequestFeatureMonitorConfig) HasDatatype() bool {
	if o != nil && !isNil(o.Datatype) {
		return true
	}

	return false
}

// SetDatatype gets a reference to the given DatatypeMonitorRequestConfig and assigns it to the Datatype field.
func (o *RequestFeatureMonitorConfig) SetDatatype(v DatatypeMonitorRequestConfig) {
	o.Datatype = &v
}

// GetSeasonalARIMA returns the SeasonalARIMA field value if set, zero value otherwise.
func (o *RequestFeatureMonitorConfig) GetSeasonalARIMA() SeasonalARIMARequestConfig {
	if o == nil || isNil(o.SeasonalARIMA) {
		var ret SeasonalARIMARequestConfig
		return ret
	}
	return *o.SeasonalARIMA
}

// GetSeasonalARIMAOk returns a tuple with the SeasonalARIMA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestFeatureMonitorConfig) GetSeasonalARIMAOk() (*SeasonalARIMARequestConfig, bool) {
	if o == nil || isNil(o.SeasonalARIMA) {
		return nil, false
	}
	return o.SeasonalARIMA, true
}

// HasSeasonalARIMA returns a boolean if a field has been set.
func (o *RequestFeatureMonitorConfig) HasSeasonalARIMA() bool {
	if o != nil && !isNil(o.SeasonalARIMA) {
		return true
	}

	return false
}

// SetSeasonalARIMA gets a reference to the given SeasonalARIMARequestConfig and assigns it to the SeasonalARIMA field.
func (o *RequestFeatureMonitorConfig) SetSeasonalARIMA(v SeasonalARIMARequestConfig) {
	o.SeasonalARIMA = &v
}

func (o RequestFeatureMonitorConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestFeatureMonitorConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Distribution) {
		toSerialize["distribution"] = o.Distribution
	}
	if !isNil(o.MissingValues) {
		toSerialize["missingValues"] = o.MissingValues
	}
	if !isNil(o.UniqueValues) {
		toSerialize["uniqueValues"] = o.UniqueValues
	}
	if !isNil(o.Datatype) {
		toSerialize["datatype"] = o.Datatype
	}
	if !isNil(o.SeasonalARIMA) {
		toSerialize["seasonalARIMA"] = o.SeasonalARIMA
	}
	return toSerialize, nil
}

type NullableRequestFeatureMonitorConfig struct {
	value *RequestFeatureMonitorConfig
	isSet bool
}

func (v NullableRequestFeatureMonitorConfig) Get() *RequestFeatureMonitorConfig {
	return v.value
}

func (v *NullableRequestFeatureMonitorConfig) Set(val *RequestFeatureMonitorConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestFeatureMonitorConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestFeatureMonitorConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestFeatureMonitorConfig(val *RequestFeatureMonitorConfig) *NullableRequestFeatureMonitorConfig {
	return &NullableRequestFeatureMonitorConfig{value: val, isSet: true}
}

func (v NullableRequestFeatureMonitorConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestFeatureMonitorConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


