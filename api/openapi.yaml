openapi: 3.0.1
info:
  contact:
    email: support@whylabs.ai
    name: WhyLabs
    url: https://whylabs.ai
  description: WhyLabs API that enables end-to-end AI observability
  license:
    name: Apache License 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  termsOfService: https://whylabs.ai/terms-of-use
  title: WhyLabs Songbird
  version: "0.1"
servers:
- url: /
paths:
  /v0/provision/connect/databricks/staged:
    post:
      description: "Register databricks metadata, temporarily storing it against a\
        \ UUID so that it can be used to provision a databricks connection after email\
        \ authentication"
      operationId: RegisterDatabricksConnection
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDatabricksConnectionRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterDatabricksConnectionResponse'
          description: RegisterDatabricksConnection default response
      security:
      - ApiKeyAuth: []
      summary: "Register databricks metadata, temporarily storing it against a UUID\
        \ so that it can be used to provision a databricks connection after email\
        \ authentication"
      tags:
      - Provision
      - Internal
  /v0/provision/connect/databricks:
    post:
      description: Create resources for a new user coming from Databricks
      operationId: ProvisionDatabricksConnection
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionDatabricksConnectionRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionDatabricksConnectionResponse'
          description: ProvisionDatabricksConnection default response
      security:
      - ApiKeyAuth: []
      summary: Create resources for a new user coming from Databricks
      tags:
      - Provision
      - Internal
  /v0/provision/new-user:
    post:
      description: Create the resources that a new user needs to use WhyLabs via the
        website.
      operationId: ProvisionNewUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionNewUserRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionNewUserResponse'
          description: ProvisionNewUser default response
      security:
      - ApiKeyAuth: []
      summary: Create the resources that a new user needs to use WhyLabs via the website.
      tags:
      - Provision
      - Internal
  /v0/provision/marketplace/aws/new-user:
    post:
      description: Create resources for a new user coming from AWS Marketplace
      operationId: ProvisionAWSMarketplaceNewUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionNewMarketplaceUserRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvisionNewAWSMarketplaceUserResponse'
          description: ProvisionAWSMarketplaceNewUser default response
      security:
      - ApiKeyAuth: []
      summary: Create resources for a new user coming from AWS Marketplace
      tags:
      - Provision
      - Internal
  /v0/organizations/{org_id}/membership:
    delete:
      description: "Removes membership in a given org from a user, using the user's\
        \ email address."
      operationId: RemoveOrganizationMembership
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: true
        in: query
        name: email
        required: true
        schema:
          example: user@whylabs.ai
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: RemoveOrganizationMembership default response
      security:
      - ApiKeyAuth: []
      summary: "Removes membership in a given org from a user, using the user's email\
        \ address."
      tags:
      - Membership
    get:
      description: list memberships for an organization
      operationId: ListOrganizationMemberships
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationMembershipsResponse'
          description: ListOrganizationMemberships default response
      security:
      - ApiKeyAuth: []
      summary: List organization memberships
      tags:
      - Membership
    post:
      description: "Create a membership for a user, making them apart of an organization.\
        \ Uses the user's current email address."
      operationId: CreateOrganizationMembership
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: true
        in: query
        name: email
        required: true
        schema:
          example: user@whylabs.ai
          type: string
        style: form
      - explode: true
        in: query
        name: role
        required: true
        schema:
          $ref: '#/components/schemas/Role'
        style: form
      - explode: true
        in: query
        name: set_default
        required: false
        schema:
          default: false
          nullable: true
          type: boolean
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipMetadata'
          description: CreateOrganizationMembership default response
      security:
      - ApiKeyAuth: []
      summary: "Create a membership for a user, making them apart of an organization.\
        \ Uses the user's current email address."
      tags:
      - Membership
    put:
      description: "Updates the role in an membership, given the organization and\
        \ the user's email address."
      operationId: UpdateOrganizationMembership
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: true
        in: query
        name: email
        required: true
        schema:
          example: user@whylabs.ai
          type: string
        style: form
      - explode: true
        in: query
        name: role
        required: true
        schema:
          $ref: '#/components/schemas/Role'
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipMetadata'
          description: UpdateOrganizationMembership default response
      security:
      - ApiKeyAuth: []
      summary: Updates the role in an membership
      tags:
      - Membership
  /v0/organizations/{org_id}/dataset/{dataset_id}/weights:
    get:
      description: Get column weights for the specified dataset
      operationId: GetColumnWeights
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityWeightRecord'
          description: GetColumnWeights default response
      security:
      - ApiKeyAuth: []
      summary: Get column weights for the specified dataset
      tags:
      - Feature Weights
    put:
      description: Put column weights for the specified dataset
      operationId: PutColumnWeights
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityWeightRecord'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutColumnWeights default response
      security:
      - ApiKeyAuth: []
      summary: Put column weights for the specified dataset
      tags:
      - Feature Weights
  /v0/user/{user_id}:
    get:
      description: Get a user by their id.
      operationId: GetUser
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: GetUser default response
      security:
      - ApiKeyAuth: []
      summary: Get a user by their id.
      tags:
      - User
      - Internal
  /v0/user:
    get:
      description: Get a user by their email.
      operationId: GetUserByEmail
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: GetUserByEmail default response
      security:
      - ApiKeyAuth: []
      summary: Get a user by their email.
      tags:
      - User
      - Internal
    post:
      description: Create a user.
      operationId: CreateUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: CreateUser default response
      security:
      - ApiKeyAuth: []
      summary: Create a user.
      tags:
      - User
      - Internal
    put:
      description: Update a user.
      operationId: UpdateUser
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: UpdateUser default response
      security:
      - ApiKeyAuth: []
      summary: Update a user.
      tags:
      - User
      - Internal
  /v0/databricks/get-connection:
    post:
      description: Get the connection metadata for a given org
      operationId: GetConnection
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetConnectionRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectionResponse'
          description: GetConnection default response
      security:
      - ApiKeyAuth: []
      summary: Get the connection metadata for a given org
      tags:
      - Databricks
      - Internal
  /v0/databricks/update-connection:
    post:
      description: Update the connection metadata for a given org
      operationId: UpdateConnection
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnectionRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: UpdateConnection default response
      security:
      - ApiKeyAuth: []
      summary: Update the connection metadata for a given org
      tags:
      - Databricks
      - Internal
  /v0/databricks/refresh-connection:
    post:
      description: Refresh metadata for a workspace connection.
      operationId: RefreshConnection
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshConnectionRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshConnectionByOrgIdResponse'
          description: RefreshConnection default response
      security:
      - ApiKeyAuth: []
      summary: Refresh metadata for a workspace connection.
      tags:
      - Databricks
      - Internal
  /v0/databricks/run-job:
    post:
      description: Run an existing job in a given databricks workspace.
      operationId: RunJob
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunJobRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunJobResponse'
          description: RunJob default response
      security:
      - ApiKeyAuth: []
      summary: Run an existing job in a given databricks workspace.
      tags:
      - Databricks
      - Internal
  /v0/databricks/list-jobs:
    post:
      description: List all of the jobs in a workspace.
      operationId: ListJobs
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListJobsRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
          description: ListJobs default response
      security:
      - ApiKeyAuth: []
      summary: List all of the jobs in a workspace.
      tags:
      - Databricks
      - Internal
  /v0/organizations/{org_id}/schema/monitor-config:
    get:
      description: Get the current supported schema of the  monitor configuration
      operationId: GetMonitorConfigSchema
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: GetMonitorConfigSchema default response
      security:
      - ApiKeyAuth: []
      summary: Get the current supported schema of the monitor configuration
      tags:
      - Internal
      - Schema
  /v0/notification-settings/{org_id}:
    get:
      description: Get notification settings for an org
      operationId: GetNotificationSettings
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationSettingsResponse'
          description: GetNotificationSettings default response
      security:
      - ApiKeyAuth: []
      summary: Get notification settings for an org
      tags:
      - Notification Settings
    post:
      description: Update notification settings for an org
      operationId: UpdateNotificationSettings
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationSettings'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSettings'
          description: UpdateNotificationSettings default response
      security:
      - ApiKeyAuth: []
      summary: Update notification settings for an org
      tags:
      - Notification Settings
  /v0/notification-settings/{org_id}/actions:
    get:
      description: Get notification actions for an org
      operationId: ListNotificationActions
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NotificationAction'
                type: array
          description: ListNotificationActions default response
      security:
      - ApiKeyAuth: []
      summary: List notification actions for an org
      tags:
      - Notification Settings
  /v0/notification-settings/{org_id}/actions/{action_id}:
    delete:
      description: Delete notification action
      operationId: DeleteNotificationAction
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: action_id
        required: true
        schema:
          example: users-email-action
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/void'
          description: DeleteNotificationAction default response
      security:
      - ApiKeyAuth: []
      summary: Delete notification action
      tags:
      - Notification Settings
    get:
      description: Get notification action for id
      operationId: GetNotificationAction
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: action_id
        required: true
        schema:
          example: users-email-action
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationAction'
          description: GetNotificationAction default response
      security:
      - ApiKeyAuth: []
      summary: Get notification action for id
      tags:
      - Notification Settings
  /v0/notification-settings/{org_id}/actions/{type}/{action_id}:
    patch:
      description: Update notification action
      operationId: UpdateNotificationAction
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: type
        required: true
        schema:
          $ref: '#/components/schemas/ActionType'
        style: simple
      - explode: false
        in: path
        name: action_id
        required: true
        schema:
          example: users-email-action
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/void'
          description: UpdateNotificationAction default response
      security:
      - ApiKeyAuth: []
      summary: Update notification action
      tags:
      - Notification Settings
    put:
      description: Add new notification action
      operationId: PutNotificationAction
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: type
        required: true
        schema:
          $ref: '#/components/schemas/ActionType'
        style: simple
      - explode: false
        in: path
        name: action_id
        required: true
        schema:
          example: users-email-action
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/void'
          description: PutNotificationAction default response
      security:
      - ApiKeyAuth: []
      summary: Add new notification action
      tags:
      - Notification Settings
  /v0/notification-settings/actions/email/payload:
    get:
      description: Get dummy notification action payload
      operationId: getEmailNotificationActionPayload
      parameters: []
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailNotificationAction'
          description: getEmailNotificationActionPayload default response
      security:
      - ApiKeyAuth: []
      summary: Get dummy notification action payload
      tags:
      - Notification Settings
  /v0/notification-settings/actions/slack/payload:
    get:
      description: Get dummy notification action payload
      operationId: getSlackNotificationActionPayload
      parameters: []
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlackNotificationAction'
          description: getSlackNotificationActionPayload default response
      security:
      - ApiKeyAuth: []
      summary: Get dummy notification action payload
      tags:
      - Notification Settings
  /v0/notification-settings/actions/pagerduty/payload:
    get:
      description: Get dummy notification action payload
      operationId: getPagerDutyNotificationActionPayload
      parameters: []
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagerDutyNotificationAction'
          description: getPagerDutyNotificationActionPayload default response
      security:
      - ApiKeyAuth: []
      summary: Get dummy notification action payload
      tags:
      - Notification Settings
  /v0/organizations/{org_id}/models:
    get:
      description: Get a list of all of the model ids for an organization.
      operationId: ListModels
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
          description: A list of model summary items
      security:
      - ApiKeyAuth: []
      summary: Get a list of all of the model ids for an organization.
      tags:
      - Models
    post:
      description: Create a model
      operationId: CreateModel
      parameters:
      - description: The organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          maxLength: 128
          type: string
        style: simple
      - description: The name of a model
        explode: true
        in: query
        name: model_name
        required: true
        schema:
          example: Credit-Score-1
          maxLength: 512
          minLength: 4
          type: string
        style: form
      - description: "The [TimePeriod] for data aggregation/alerting for a model"
        explode: true
        in: query
        name: time_period
        required: true
        schema:
          $ref: '#/components/schemas/TimePeriod'
        style: form
      - description: "The [ModelType] of the dataset"
        explode: true
        in: query
        name: model_type
        required: false
        schema:
          $ref: '#/components/schemas/ModelType'
        style: form
      - explode: true
        in: query
        name: model_id
        required: false
        schema:
          example: model-123
          maxLength: 128
          minLength: 4
          nullable: true
          pattern: "^[0-9a-zA-Z_-]+$"
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMetadata'
          description: "The [ModelMetadata] if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Create a model with a given name and a time period
      tags:
      - Models
  /v0/organizations/{org_id}/models/{model_id}:
    delete:
      description: Mark a model as inactive
      operationId: DeactivateModel
      parameters:
      - description: The organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The model ID
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMetadata'
          description: "The [ModelMetadata] if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Mark a model as inactive
      tags:
      - Models
    get:
      description: Returns various metadata about a model
      operationId: GetModel
      parameters:
      - description: The name of an organization
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The ID of a model
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMetadata'
          description: "A [ModelMetadata] object if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Get a model metadata
      tags:
      - Models
    put:
      description: Update a model's metadata
      operationId: UpdateModel
      parameters:
      - description: The organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The model ID
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: The name of a model
        explode: true
        in: query
        name: model_name
        required: true
        schema:
          example: Credit-Score-1
          type: string
        style: form
      - description: "The [TimePeriod] for data aggregation/alerting for a model"
        explode: true
        in: query
        name: time_period
        required: true
        schema:
          $ref: '#/components/schemas/TimePeriod'
        style: form
      - description: "The [ModelType] of the dataset"
        explode: true
        in: query
        name: model_type
        required: false
        schema:
          $ref: '#/components/schemas/ModelType'
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelMetadata'
          description: "The [ModelMetadata] if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Update a model's metadata
      tags:
      - Models
  /v0/organizations/{org_id}/models/{model_id}/segments:
    get:
      description: Returns the list of Segments for a given model
      operationId: ListSegments
      parameters:
      - description: The name of an organization
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The ID of a model
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSegmentsResponse'
          description: "A [ListSegmentsResponse] object if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Get a model metadata
      tags:
      - Models
    put:
      description: Return 200 if succeeds
      operationId: PutSegments
      parameters:
      - description: The name of an organization
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The ID of a model
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/SegmentTag'
              type: array
        description: List of segment tags to create the segment for
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentMetadata'
          description: "A [SegmentMetadata] object if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Add a segment to the dataset
      tags:
      - Models
  /v0/organizations/{org_id}/models/{model_id}/monitor-config/:
    delete:
      description: "Delete the monitor config for a given model + segment by setting\
        \ it to \"null\". This method will throw exception if the version is\ninvalid\
        \ (i.e. somebody has modified the config since it was last read). This value\
        \ should be passed by whoever generated\nthe action (i.e. the frontend).\n\
        \        "
      operationId: DeleteMonitorConfig
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - description: |-
          Optional. Instead of passing segment_tags, passing in a serialized JSON array. If [segment_tags]
           is specified, then this field is ignored
        explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: The existing version for the config that you've read. null if
          this is a new config (unset)
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: 1
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: nothing
      security:
      - ApiKeyAuth: []
      summary: Delete a monitor config from a model
      tags:
      - Internal
      - Models
    get:
      description: "Get the current monitor config (could be null) for a given model/segment.\n\
        \        "
      operationId: GetMonitorConfig
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorConfig'
          description: "a [MonitorConfig] object"
      security:
      - ApiKeyAuth: []
      summary: Get the monitor config for a given model + segment
      tags:
      - Internal
      - Models
    put:
      description: "Save get the monitor config for a given model + segment. This\
        \ method will throw exception if the version is\ninvalid (i.e. somebody has\
        \ modified the config since it was last read). This value should be passed\
        \ by whoever generated\nthe action (i.e. the frontend).\n        "
      operationId: PutMonitorConfig
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: The existing version for the config that you've read. null if
          this is a new config (unset)
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            text/plain:
              schema:
                type: string
          description: nothing
      security:
      - ApiKeyAuth: []
      summary: Save get the monitor config for a given model + segment
      tags:
      - Internal
      - Models
  /v0/organizations/{org_id}/models/{model_id}/monitor-config/v2:
    get:
      deprecated: true
      description: Get the monitor config for a given model or segment. The return
        of this api will include default values that we apply over any config that
        omits portions of the monitor config schema.
      operationId: GetMonitorConfigV2
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMonitorConfigV2Response'
          description: GetMonitorConfigV2 default response
      security:
      - ApiKeyAuth: []
      summary: Get the monitor config for a given model or segment. The return of
        this api will include default values that we apply over any config that omits
        portions of the monitor config schema.
      tags:
      - Models
    put:
      deprecated: true
      description: Save the monitor config for a given model or segment
      operationId: PutMonitorConfigV2
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetRequestMonitorConfig'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutMonitorConfigV2 default response
      security:
      - ApiKeyAuth: []
      summary: Save the monitor config for a given model or segment
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/request-monitor-run:
    put:
      description: Put the RequestMonitorRun config into S3.
      operationId: PutRequestMonitorRunConfig
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutRequestMonitorRunConfig_request'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: PutRequestMonitorRunConfig default response
      security:
      - ApiKeyAuth: []
      summary: Put the RequestMonitorRun config into S3.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/monitor-config/v3/validate:
    put:
      description: Validate the monitor config document for a given dataset.
      operationId: ValidateMonitorConfigV3
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: ValidateMonitorConfigV3 default response
      security:
      - ApiKeyAuth: []
      summary: Validate the monitor config document for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/monitor-config/v3/versions:
    get:
      description: List the monitor config document versions for a given dataset.
      operationId: ListMonitorConfigV3Versions
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MonitorConfigVersion'
                type: array
          description: ListMonitorConfigV3Versions default response
      security:
      - ApiKeyAuth: []
      summary: List the monitor config document versions for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/monitor-config/v3/versions/{version_id}:
    get:
      description: Get the monitor config document version for a given dataset.
      operationId: GetMonitorConfigV3Version
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: version_id
        required: true
        schema:
          example: 4920545486e2a4cdf0f770c09748e663
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: GetMonitorConfigV3Version default response
      security:
      - ApiKeyAuth: []
      summary: Get the monitor config document version for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/monitor-config/v3:
    get:
      description: Get the monitor config document for a given dataset.
      operationId: GetMonitorConfigV3
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: true
        in: query
        name: include_entity_schema
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      - explode: true
        in: query
        name: include_entity_weights
        required: false
        schema:
          nullable: true
          type: boolean
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: GetMonitorConfigV3 default response
      security:
      - ApiKeyAuth: []
      summary: Get the monitor config document for a given dataset.
      tags:
      - Models
    put:
      description: Save the monitor config document for a given dataset.
      operationId: PutMonitorConfigV3
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutMonitorConfigV3 default response
      security:
      - ApiKeyAuth: []
      summary: Save the monitor config document for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/monitor-config/analyzer/{analyzer_id}:
    delete:
      description: Delete the analyzer config for a given dataset.
      operationId: DeleteAnalyzer
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: analyzer_id
        required: true
        schema:
          example: drift-analyzer
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: DeleteAnalyzer default response
      security:
      - ApiKeyAuth: []
      summary: Delete the analyzer config for a given dataset.
      tags:
      - Models
    get:
      description: Get the analyzer config for a given dataset.
      operationId: GetAnalyzer
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: analyzer_id
        required: true
        schema:
          example: drift-analyzer
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: GetAnalyzer default response
      security:
      - ApiKeyAuth: []
      summary: Get the analyzer config for a given dataset.
      tags:
      - Models
    put:
      description: Save the analyzer config for a given dataset.
      operationId: PutAnalyzer
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: analyzer_id
        required: true
        schema:
          example: drift-analyzer
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutAnalyzer default response
      security:
      - ApiKeyAuth: []
      summary: Save the analyzer config for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/monitor-config/monitor/{monitor_id}:
    delete:
      description: Delete the monitor for a given dataset.
      operationId: DeleteMonitor
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          example: drift-monitor-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: DeleteMonitor default response
      security:
      - ApiKeyAuth: []
      summary: Delete the monitor for a given dataset.
      tags:
      - Models
    get:
      description: Get the monitor config for a given dataset.
      operationId: GetMonitor
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          example: drift-monitor-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: GetMonitor default response
      security:
      - ApiKeyAuth: []
      summary: Get the monitor config for a given dataset.
      tags:
      - Models
    put:
      description: Save the monitor for a given dataset.
      operationId: PutMonitor
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: monitor_id
        required: true
        schema:
          example: drift-monitor-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutMonitor default response
      security:
      - ApiKeyAuth: []
      summary: Save the monitor for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/schema:
    get:
      description: Get the entity schema config for a given dataset.
      operationId: GetEntitySchema
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitySchema'
          description: GetEntitySchema default response
      security:
      - ApiKeyAuth: []
      summary: Get the entity schema config for a given dataset.
      tags:
      - Models
    put:
      description: Save the entity schema config for a given dataset.
      operationId: PutEntitySchema
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitySchema'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutEntitySchema default response
      security:
      - ApiKeyAuth: []
      summary: Save the entity schema config for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/{dataset_id}/schema/column/{column_id}:
    delete:
      description: Delete the entity schema of a single column for a given dataset.
      operationId: DeleteEntitySchemaColumn
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: column_id
        required: true
        schema:
          example: feature-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: DeleteEntitySchemaColumn default response
      security:
      - ApiKeyAuth: []
      summary: Delete the entity schema of a single column for a given dataset.
      tags:
      - Models
    get:
      description: Get the entity schema of a single column for a given dataset.
      operationId: GetEntitySchemaColumn
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: column_id
        required: true
        schema:
          example: feature-123
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColumnSchema'
          description: GetEntitySchemaColumn default response
      security:
      - ApiKeyAuth: []
      summary: Get the entity schema of a single column for a given dataset.
      tags:
      - Models
    put:
      description: Save the entity schema of a single column for a given dataset.
      operationId: PutEntitySchemaColumn
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - explode: false
        in: path
        name: column_id
        required: true
        schema:
          example: feature-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnSchema'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: PutEntitySchemaColumn default response
      security:
      - ApiKeyAuth: []
      summary: Save the entity schema of a single column for a given dataset.
      tags:
      - Models
  /v0/organizations/{org_id}/models/provided-config/:
    get:
      description: "Get the Provided Config (by WhyLabs) for a given organization/model/segment.\n\
        \        "
      operationId: GetProvidedConfig
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: Optional. The unique model ID in your company.
        explode: true
        in: query
        name: model_id
        required: false
        schema:
          example: model-123
          nullable: true
          type: string
        style: form
      - description: "Optional. List of (key, value) pair tags for a segment. Must\
          \ not contain duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - description: |-
          Optional. Instead of passing segment_tags, passing in a serialized JSON array. If [segment_tags]
           is specified, then this field is ignored
        explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProvidedConfig'
          description: "a [ProvidedConfig] object"
      security:
      - ApiKeyAuth: []
      summary: Get the monitor's provided config for a given organization/model/segment
      tags:
      - Models
    put:
      description: "Save get WhyLabs' Provided Config for a given model/segment.\n\
        \        "
      operationId: PutProvidedConfig
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: true
        in: query
        name: model_id
        required: false
        schema:
          example: model-123
          nullable: true
          type: string
        style: form
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - description: |-
          Optional. Instead of passing segment_tags, passing in a serialized JSON array. If [segment_tags]
           is specified, then this field is ignored
        explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: The existing version for the config that you've read. null if
          this is a new config (unset)
        explode: true
        in: query
        name: version
        required: false
        schema:
          format: int64
          nullable: true
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: nothing
      security:
      - ApiKeyAuth: []
      summary: Save a Provided Config for an organization/model/segment
      tags:
      - Internal
      - Models
  /v0/organizations/{org_id}/log/async/{dataset_id}:
    post:
      description: "Like /log, except this api doesn't take the actual profile content.\
        \ It returns an upload link that can be used to upload the profile to."
      operationId: LogAsync
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogAsyncRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncLogResponse'
          description: LogAsync default response
      security:
      - ApiKeyAuth: []
      summary: "Like /log, except this api doesn't take the actual profile content.\
        \ It returns an upload link that can be used to upload the profile to."
      tags:
      - Log
  /v0/organizations/{org_id}/log/reference/{model_id}:
    post:
      description: Reference profiles can be used for.
      operationId: LogReference
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogReferenceRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogReferenceResponse'
          description: LogReference default response
      security:
      - ApiKeyAuth: []
      summary: Returns a presigned URL for uploading the reference profile to.
      tags:
      - Log
  /v0/organizations/{org_id}/log:
    post:
      description: "This method returns a [LogResponse] object if it succeeds"
      operationId: Log
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: true
        in: query
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: form
      - description: |-
          The dataset timestamp associated with the entry. Not required. However, this will
           override the whylogs dataset timestamp if specified
        explode: true
        in: query
        name: dataset_timestamp
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      - description: The segment associated with the log entry. Not required if segment
          tags are specified in whylogs
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - explode: true
        in: query
        name: segment_tags_json
        required: false
        schema:
          example: "[{\"key\": \"string\", \"value\": \"string\" }]"
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Log_request'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
          description: a LogResponse object if succeeds
      security:
      - ApiKeyAuth: []
      summary: Log a dataset profile entry to the backend
      tags:
      - Log
  /v0/admin/monitor-config/create-validation-job:
    post:
      description: Create a monitor config validation job for all configs
      operationId: PostMonitorConfigValidationJob
      parameters: []
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/void'
          description: PostMonitorConfigValidationJob default response
      security:
      - ApiKeyAuth: []
      summary: Create a monitor config validation job for all configs
      tags:
      - Admin
      - Internal
  /v0/organizations/{org_id}/alerts/models/{model_id}/paths:
    get:
      description: Get the alerts from a given time period.
      operationId: GetAlertsPaths
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company. The model is created if
          it doesn't exist already.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - description: Start time exclusive
        explode: true
        in: query
        name: start_timestamp
        required: true
        schema:
          example: 1577836800000
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: end_timestamp
        required: true
        schema:
          example: 1893456000000
          format: int64
          type: integer
        style: form
      - description: the version of the alert in case we have multiple schemas
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: ""
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAlertsPathsResponse'
          description: "a list of AlertsPath in the given time period, de-duped with\
            \ the latest updated entries"
      security:
      - ApiKeyAuth: []
      summary: Get the alerts for a given time period.
      tags:
      - Alerts
  /v0/organizations/{org_id}/events/models/{model_id}/paths:
    get:
      description: Get the events from a given time period.
      operationId: GetEventsPaths
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - description: Start time exclusive
        explode: true
        in: query
        name: start_timestamp
        required: true
        schema:
          example: 1577836800000
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: end_timestamp
        required: true
        schema:
          example: 1893456000000
          format: int64
          type: integer
        style: form
      - description: the version of the
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: ""
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventsPathResponse'
          description: "A list of [EventsPath] object for accessing the event data\
            \ from S3"
      security:
      - ApiKeyAuth: []
      summary: Get the events for a given time period.
      tags:
      - Internal
      - Events
  /v0/organizations/{org_id}/events/models/{model_id}/data:
    get:
      description: Get the events from a given time period.
      operationId: GetEventsData
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company. The model is created if
          it doesn't exist already.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "List of (key, value) pair tags for a segment. Must not contain\
          \ duplicate values"
        explode: true
        in: query
        name: segment_tags
        required: false
        schema:
          items:
            $ref: '#/components/schemas/SegmentTag'
          nullable: true
          type: array
        style: form
      - description: Start time exclusive
        explode: true
        in: query
        name: start_timestamp
        required: true
        schema:
          example: 1577836800000
          format: int64
          type: integer
        style: form
      - explode: true
        in: query
        name: end_timestamp
        required: true
        schema:
          example: 1893456000000
          format: int64
          type: integer
        style: form
      - description: the version of the event
        explode: true
        in: query
        name: version
        required: false
        schema:
          example: ""
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/x-json-stream:
              schema:
                format: binary
                type: string
          description: A streaming JSON output in multiline JSON format
      security:
      - ApiKeyAuth: []
      summary: Get the event data as multi-line JSON for a given time period.
      tags:
      - Events
  /v0/organizations/{org_id}/api-key:
    delete:
      description: Revokes the given API Key
      operationId: RevokeApiKey
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: true
        in: query
        name: user_id
        required: true
        schema:
          example: user-123
          type: string
        style: form
      - description: |-
          ID of the key to revoke
           Metadata for the revoked API Key
        explode: true
        in: query
        name: key_id
        required: true
        schema:
          example: HMiFAgQeNb
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiKey'
          description: Revoked API Key's metadata
      security:
      - ApiKeyAuth: []
      summary: "Revoke the given API Key, removing its ability to access WhyLabs systems"
      tags:
      - ApiKey
    get:
      description: Returns the API key metadata for a given organization and user
      operationId: ListApiKeys
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: |-
          The unique user ID in an organization.
           A list of objects with key ID and other metadata about the keys, but no secret values
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          example: user-123
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserApiKeys'
          description: "A list of objects with key ID and other metadata about the\
            \ keys, but no secret values"
      security:
      - ApiKeyAuth: []
      summary: List API key metadata for a given organization and user
      tags:
      - ApiKey
    post:
      description: Generates an API key for a given user. Must be called either by
        system administrator or by the user themselves
      operationId: CreateApiKey
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique user ID in an organization.
        explode: true
        in: query
        name: user_id
        required: true
        schema:
          example: user-123
          type: string
        style: form
      - description: Expiration time in epoch milliseconds
        explode: true
        in: query
        name: expiration_time
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      - description: Scopes of the token
        explode: true
        in: query
        name: scopes
        required: false
        schema:
          items:
            default: :user
            example: :user
            type: string
          nullable: true
          type: array
        style: form
      - description: |-
          A human-friendly name for the API Key
           An object with key ID and other metadata about the key
        explode: true
        in: query
        name: alias
        required: false
        schema:
          example: MLApplicationName
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiKey'
          description: A object with key ID and other metadata about the key
      security:
      - ApiKeyAuth: []
      summary: Generate an API key for a user.
      tags:
      - ApiKey
  /v0/organizations/{org_id}/api-key/{key_id}:
    get:
      description: Get an api key by its id
      operationId: GetApiKey
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - explode: false
        in: path
        name: key_id
        required: true
        schema:
          example: fh4dUNV3WQ
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserApiKeyResponse'
          description: "A list of objects with key ID and other metadata about the\
            \ keys, but no secret values"
      security:
      - ApiKeyAuth: []
      summary: Get an api key by its id
      tags:
      - ApiKey
  /v0/membership/user:
    get:
      description: Get memberships for a user given that user's email address.
      operationId: GetMembershipsByEmail
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
          description: GetMembershipsByEmail default response
      security:
      - ApiKeyAuth: []
      summary: Get memberships for a user given that user's email address.
      tags:
      - Membership
  /v0/membership/default:
    get:
      description: Get the default membership for a user.
      operationId: GetDefaultMembershipForEmail
      parameters:
      - explode: true
        in: query
        name: email
        required: true
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDefaultMembershipResponse'
          description: GetDefaultMembershipForEmail default response
      security:
      - ApiKeyAuth: []
      summary: Get the default membership for a user.
      tags:
      - Membership
    post:
      description: Sets the organization that should be used when logging a user in
      operationId: SetDefaultMembership
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetDefaultMembershipRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: SetDefaultMembership default response
      security:
      - ApiKeyAuth: []
      summary: Sets the organization that should be used when logging a user in
      tags:
      - Membership
  /v0/membership/org/{org_id}:
    get:
      description: Get memberships for an org.
      operationId: GetMembershipsByOrg
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
          description: GetMembershipsByOrg default response
      security:
      - ApiKeyAuth: []
      summary: Get memberships for an org.
      tags:
      - Membership
  /v0/membership/user/{user_id}:
    get:
      description: Get memberships for a user.
      operationId: GetMemberships
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMembershipsResponse'
          description: GetMemberships default response
      security:
      - ApiKeyAuth: []
      summary: Get memberships for a user.
      tags:
      - Membership
  /v0/membership:
    delete:
      description: "Removes membership in a given org from a user, using the user's\
        \ email address."
      operationId: RemoveMembershipByEmail
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveMembershipRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: RemoveMembershipByEmail default response
      security:
      - ApiKeyAuth: []
      summary: "Removes membership in a given org from a user, using the user's email\
        \ address."
      tags:
      - Membership
    post:
      description: "Create a membership for a user, making them apart of an organization.\
        \ Uses the user's current email address."
      operationId: CreateMembership
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMembershipRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipMetadata'
          description: CreateMembership default response
      security:
      - ApiKeyAuth: []
      summary: "Create a membership for a user, making them apart of an organization.\
        \ Uses the user's current email address."
      tags:
      - Membership
    put:
      description: "Updates the role in an membership, given the organization and\
        \ the user's email address."
      operationId: UpdateMembershipByEmail
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMembershipRequest'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipMetadata'
          description: UpdateMembershipByEmail default response
      security:
      - ApiKeyAuth: []
      summary: Updates the role in an membership
      tags:
      - Membership
  /v0/organizations:
    get:
      description: Get a list of all of the organization ids.
      operationId: ListOrganizations
      parameters: []
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOrganizationsResponse'
          description: a list of organization summary items
      security:
      - ApiKeyAuth: []
      summary: Get a list of all of the organization ids.
      tags:
      - Internal
      - Organizations
    post:
      description: Create an organization
      operationId: CreateOrganization
      parameters:
      - description: The name of the organization
        explode: true
        in: query
        name: name
        required: true
        schema:
          example: "ACME, Inc"
          type: string
        style: form
      - description: Organization's subscription tier. Should be PAID for real customers
        explode: true
        in: query
        name: subscription_tier
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionTier'
        style: form
      - description: Domain associated with this organization
        explode: true
        in: query
        name: domain
        required: false
        schema:
          deprecated: true
          example: acme.ai
          nullable: true
          type: string
        style: form
      - description: "Email domains associated with this organization, as a comma\
          \ separated list"
        explode: true
        in: query
        name: email_domains
        required: false
        schema:
          example: "acme.ai,acme.com"
          nullable: true
          type: string
        style: form
      - description: Custom ID. If this ID is invalid this method will throw an exception
        explode: true
        in: query
        name: override_id
        required: false
        schema:
          example: org-123
          nullable: true
          type: string
        style: form
      - description: "Url that users of this organization will be redirected to in\
          \ some cases (such as via Siren notifications). NOTE: should NOT be followed\
          \ by a trailing slash!"
        explode: true
        in: query
        name: observatory_url
        required: false
        schema:
          example: https://hub.whylabsapp.com
          nullable: true
          type: string
        style: form
      - description: Email address that should be used for notifications for this
          organization
        explode: true
        in: query
        name: notification_email_address
        required: false
        schema:
          example: notifications@acme.ai
          format: email
          nullable: true
          type: string
        style: form
      - description: Slack Webhook that should be used for notifications for this
          organization
        explode: true
        in: query
        name: slack_webhook
        required: false
        schema:
          example: https://hooks.slack.com/services/foo/bar
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: pager_duty_key
        required: false
        schema:
          example: abc-def-ghi-jkl
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSummary'
          description: A summary of the organization object if succeeds
      security:
      - ApiKeyAuth: []
      summary: Create an organization
      tags:
      - Internal
      - Organizations
    put:
      deprecated: true
      description: Update all fields of an existing organization
      operationId: UpdateOrg
      parameters:
      - description: The name of the organization
        explode: true
        in: query
        name: name
        required: true
        schema:
          example: "ACME, Inc"
          type: string
        style: form
      - description: Organization's subscription tier. Should be PAID for real customers
        explode: true
        in: query
        name: subscription_tier
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionTier'
        style: form
      - description: Domain associated with this organization
        explode: true
        in: query
        name: domain
        required: false
        schema:
          deprecated: true
          example: acme.ai
          nullable: true
          type: string
        style: form
      - description: "Email domains associated with this organization, as a comma\
          \ separated list"
        explode: true
        in: query
        name: email_domains
        required: false
        schema:
          example: "acme.ai,acme.com"
          nullable: true
          type: string
        style: form
      - description: "Url that users of this organization will be redirected to in\
          \ some cases (such as via Siren notifications). NOTE: should NOT be followed\
          \ by a trailing slash!"
        explode: true
        in: query
        name: observatory_url
        required: false
        schema:
          example: https://hub.whylabsapp.com
          nullable: true
          type: string
        style: form
      - description: Email address that should be used for notifications for this
          organization
        explode: true
        in: query
        name: notification_email_address
        required: false
        schema:
          example: notifications@acme.ai
          format: email
          nullable: true
          type: string
        style: form
      - description: Slack Webhook that should be used for notifications for this
          organization
        explode: true
        in: query
        name: slack_webhook
        required: false
        schema:
          example: https://hooks.slack.com/services/foo/bar
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: pager_duty_key
        required: false
        schema:
          example: abc-def-ghi-jkl
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrg_request'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSummary'
          description: A summary of the organization object if succeeds
      security:
      - ApiKeyAuth: []
      summary: Update an existing organization
      tags:
      - Internal
      - Organizations
  /v0/organizations/{org_id}:
    delete:
      description: Delete an org
      operationId: DeleteOrganization
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: DeleteOrganization default response
      security:
      - ApiKeyAuth: []
      summary: Delete an org
      tags:
      - Internal
      - Organizations
    get:
      description: Returns various metadata about an organization
      operationId: GetOrganization
      parameters:
      - description: The unique ID of an organization
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMetadata'
          description: The organization metadata
      security:
      - ApiKeyAuth: []
      summary: Get the metadata about an organization.
      tags:
      - Internal
      - Organizations
    put:
      description: Update all fields of an existing organization
      operationId: UpdateOrganization
      parameters:
      - description: "The unique ID of an organization. If an organization with this\
          \ ID does not exist, this method will throw an exception."
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the organization
        explode: true
        in: query
        name: name
        required: true
        schema:
          example: "ACME, Inc"
          type: string
        style: form
      - description: Organization's subscription tier. Should be PAID for real customers
        explode: true
        in: query
        name: subscription_tier
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionTier'
        style: form
      - description: Domain associated with this organization
        explode: true
        in: query
        name: domain
        required: false
        schema:
          deprecated: true
          example: acme.ai
          nullable: true
          type: string
        style: form
      - description: "Email domains associated with this organization, as a comma\
          \ separated list"
        explode: true
        in: query
        name: email_domains
        required: false
        schema:
          example: "acme.ai,acme.com"
          nullable: true
          type: string
        style: form
      - description: "Url that users of this organization will be redirected to in\
          \ some cases (such as via Siren notifications). NOTE: should NOT be followed\
          \ by a trailing slash!"
        explode: true
        in: query
        name: observatory_url
        required: false
        schema:
          example: https://hub.whylabsapp.com
          nullable: true
          type: string
        style: form
      - description: Email address that should be used for notifications for this
          organization
        explode: true
        in: query
        name: notification_email_address
        required: false
        schema:
          example: notifications@acme.ai
          format: email
          nullable: true
          type: string
        style: form
      - description: Slack Webhook that should be used for notifications for this
          organization
        explode: true
        in: query
        name: slack_webhook
        required: false
        schema:
          example: https://hooks.slack.com/services/foo/bar
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: pager_duty_key
        required: false
        schema:
          example: abc-def-ghi-jkl
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSummary'
          description: A summary of the organization object if succeeds
      security:
      - ApiKeyAuth: []
      summary: Update an existing organization
      tags:
      - Internal
      - Organizations
  /v0/organizations/partial/:
    put:
      deprecated: true
      description: "Update some fields of an organization to non-null values, leaving\
        \ all other existing values the same"
      operationId: PartiallyUpdateOrg
      parameters:
      - description: The name of the organization
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: "ACME, Inc"
          nullable: true
          type: string
        style: form
      - description: Organization's subscription tier. Should be PAID for real customers
        explode: true
        in: query
        name: subscription_tier
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionTier'
        style: form
      - description: Domain associated with this organization
        explode: true
        in: query
        name: domain
        required: false
        schema:
          example: acme.ai
          nullable: true
          type: string
        style: form
      - description: "Url that users of this organization will be redirected to in\
          \ some cases (such as via Siren notifications). NOTE: should NOT be followed\
          \ by a trailing slash!"
        explode: true
        in: query
        name: observatory_url
        required: false
        schema:
          example: https://hub.whylabsapp.com
          nullable: true
          type: string
        style: form
      - description: Email address that should be used for notifications for this
          organization
        explode: true
        in: query
        name: notification_email_address
        required: false
        schema:
          example: notifications@acme.ai
          nullable: true
          type: string
        style: form
      - description: Slack Webhook that should be used for notifications for this
          organization
        explode: true
        in: query
        name: slack_webhook
        required: false
        schema:
          example: https://hooks.slack.com/services/foo/bar
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrg_request'
        required: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSummary'
          description: A summary of the organization object if succeeds
      security:
      - ApiKeyAuth: []
      summary: Update some fields of an organization to non-null values
      tags:
      - Internal
      - Organizations
  /v0/organizations/partial/{org_id}:
    put:
      description: "Update some fields of an organization to non-null values, leaving\
        \ all other existing values the same"
      operationId: PartiallyUpdateOrganization
      parameters:
      - description: "The unique ID of an organization. If an organization with this\
          \ ID does not exist, this method will throw an exception."
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      - description: The name of the organization
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: "ACME, Inc"
          nullable: true
          type: string
        style: form
      - description: Organization's subscription tier. Should be PAID for real customers
        explode: true
        in: query
        name: subscription_tier
        required: false
        schema:
          $ref: '#/components/schemas/SubscriptionTier'
        style: form
      - description: Domain associated with this organization
        explode: true
        in: query
        name: domain
        required: false
        schema:
          deprecated: true
          example: acme.ai
          nullable: true
          type: string
        style: form
      - description: "Email domains associated with this organization, as a comma\
          \ separated list"
        explode: true
        in: query
        name: email_domains
        required: false
        schema:
          example: "acme.ai,acme.com"
          nullable: true
          type: string
        style: form
      - description: "Url that users of this organization will be redirected to in\
          \ some cases (such as via Siren notifications). NOTE: should NOT be followed\
          \ by a trailing slash!"
        explode: true
        in: query
        name: observatory_url
        required: false
        schema:
          example: https://hub.whylabsapp.com
          nullable: true
          type: string
        style: form
      - description: Email address that should be used for notifications for this
          organization
        explode: true
        in: query
        name: notification_email_address
        required: false
        schema:
          example: notifications@acme.ai
          format: email
          nullable: true
          type: string
        style: form
      - description: Slack Webhook that should be used for notifications for this
          organization
        explode: true
        in: query
        name: slack_webhook
        required: false
        schema:
          example: https://hooks.slack.com/services/foo/bar
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: pager_duty_key
        required: false
        schema:
          example: abc-def-ghi-jkl
          nullable: true
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSummary'
          description: A summary of the organization object if succeeds
      security:
      - ApiKeyAuth: []
      summary: Update some fields of an organization to non-null values
      tags:
      - Internal
      - Organizations
  /v0/organizations/{org_id}/marketplace-metadata/:
    get:
      description: Get marketplace metadata for an org if any exists.
      operationId: GetAWSMarketplaceMetadata
      parameters:
      - explode: false
        in: path
        name: org_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMarketplaceMetadataResponse'
          description: GetAWSMarketplaceMetadata default response
      security:
      - ApiKeyAuth: []
      summary: Get marketplace metadata for an org if any exists.
      tags:
      - Internal
      - Organizations
  /v0/sessions:
    post:
      description: Create a new session that can be used to upload dataset profiles
        from whylogs for display in whylabs.
      operationId: CreateSession
      parameters: []
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionResponse'
          description: A new session id that can be used to upload dataset profiles.
      summary: Create a new session that can be used to upload dataset profiles from
        whylogs for display in whylabs.
      tags:
      - Sessions
  /v0/sessions/{session_token}/upload:
    post:
      description: Create an upload for a given session.
      operationId: CreateDatasetProfileUpload
      parameters:
      - explode: false
        in: path
        name: session_token
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: dataset_timestamp
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionUploadResponse'
          description: A url that a dataset profile can be uploaded to.
      summary: Create an upload for a given session.
      tags:
      - Sessions
  /v0/sessions/{session_token}/close:
    post:
      description: "naddeo Close a session, triggering its display in whylabs and\
        \ making it no longer accept any additional data."
      operationId: CloseSession
      parameters:
      - explode: false
        in: path
        name: session_token
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloseSessionResponse'
          description: CloseSession default response
      summary: "naddeo Close a session, triggering its display in whylabs and making\
        \ it no longer accept any additional data."
      tags:
      - Sessions
  /v0/sessions/{session_token}:
    get:
      description: Get information about a session.
      operationId: GetSession
      parameters:
      - explode: false
        in: path
        name: session_token
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
          description: GetSession default response
      security:
      - ApiKeyAuth: []
      summary: Get information about a session.
      tags:
      - Sessions
  /v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles:
    get:
      description: "Internal API. Returns a list of Reference Profiles.\n\n      \
        \  "
      operationId: ListReferenceProfiles
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: Milli epoch time that represents the end of the time range to
          query.
        explode: true
        in: query
        name: from_epoch
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      - description: Milli epoch time that represents the end of the time range to
          query.
        explode: true
        in: query
        name: to_epoch
        required: false
        schema:
          example: 1893456000000
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReferenceProfileItemResponse'
                type: array
          description: The metadata for the summarized dataset profile including paths
            to JSON and protobuf data
      security:
      - ApiKeyAuth: []
      summary: Returns a list for reference profiles
      tags:
      - Internal
      - DatasetProfile
  /v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}:
    delete:
      description: "Internal API. Delete a a Reference Profile. Returns false if the\
        \ deletion encountered some error.\n\n        "
      operationId: DeleteReferenceProfile
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: Unique reference Id.
        explode: false
        in: path
        name: reference_id
        required: true
        schema:
          example: ref-xxy
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                type: boolean
          description: "true if successful, false if we encounter failures"
      security:
      - ApiKeyAuth: []
      summary: Delete a single reference profile
      tags:
      - Internal
      - DatasetProfile
    get:
      description: "Internal API. Returns a Reference Profile.\n\n        "
      operationId: GetReferenceProfile
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique model ID in your company.
        explode: false
        in: path
        name: model_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: Unique reference Id.
        explode: false
        in: path
        name: reference_id
        required: true
        schema:
          example: ref-xxy
          type: string
        style: simple
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceProfileItemResponse'
          description: The metadata for the summarized dataset profile including paths
            to JSON and protobuf data
      security:
      - ApiKeyAuth: []
      summary: Returns a single reference profile
      tags:
      - Internal
      - DatasetProfile
  /v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}:
    delete:
      description: "Deletes a set of dataset profiles. Returns false if scheduling\
        \ deletion encountered some error.\n\n        "
      operationId: DeleteDatasetProfiles
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique dataset ID in your company.
        explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "Optional, scope deleting profiles more recently than the timestamp"
        explode: true
        in: query
        name: profile_start_timestamp
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "Optional, scope deleting profiles older than the timestamp"
        explode: true
        in: query
        name: profile_end_timestamp
        required: false
        schema:
          example: 1893456000000
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "Optional, scope deleting profiles uploaded prior to the timestamp"
        explode: true
        in: query
        name: before_upload_timestamp
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteDatasetProfilesResponse'
          description: "The [DeleteDatasetProfilesResponse] if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Deletes a set of dataset profiles
      tags:
      - DatasetProfile
  /v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/analyzer-results:
    delete:
      description: "Deletes a set of analyzer results. Returns false if scheduling\
        \ deletion encountered some error.\n\n        "
      operationId: DeleteAnalyzerResults
      parameters:
      - description: Your company's unique organization ID
        explode: false
        in: path
        name: org_id
        required: true
        schema:
          example: org-123
          type: string
        style: simple
      - description: The unique dataset ID in your company.
        explode: false
        in: path
        name: dataset_id
        required: true
        schema:
          example: model-123
          type: string
        style: simple
      - description: "Optional, scope deleting analyzer results more recent than the\
          \ timestamp"
        explode: true
        in: query
        name: start_timestamp
        required: false
        schema:
          example: 1577836800000
          format: int64
          nullable: true
          type: integer
        style: form
      - description: "Optional, scope deleting analyzer results older than the timestamp"
        explode: true
        in: query
        name: end_timestamp
        required: false
        schema:
          example: 1893456000000
          format: int64
          nullable: true
          type: integer
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAnalyzerResultsResponse'
          description: "The [DeleteAnalyzerResultsResponse] if operation succeeds"
      security:
      - ApiKeyAuth: []
      summary: Deletes a set of analyzer results
      tags:
      - DatasetProfile
  /v0/feature-flags:
    get:
      description: Get feature flags for the specified user/org
      operationId: GetFeatureFlags
      parameters:
      - explode: true
        in: query
        name: user_id
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: org_id
        required: true
        schema:
          type: string
        style: form
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureFlags'
          description: GetFeatureFlags default response
      security:
      - ApiKeyAuth: []
      summary: Get feature flags for the specified user/org
      tags:
      - FeatureFlags
      - Internal
components:
  schemas:
    RegisterDatabricksConnectionResponse:
      example:
        id: id
      properties:
        id:
          type: string
      required:
      - id
      type: object
    RegisterDatabricksConnectionRequest:
      example:
        hostname: hostname
        freeTrial: true
        port: 0
        cloudProvider: cloudProvider
        connectionId: connectionId
        connectionEstablished: true
        accessToken: accessToken
        demo: true
        email: email
        workspaceUrl: workspaceUrl
        workspaceId: workspaceId
      properties:
        email:
          type: string
        connectionEstablished:
          type: boolean
        accessToken:
          type: string
        hostname:
          type: string
        port:
          format: int32
          type: integer
        workspaceUrl:
          type: string
        connectionId:
          type: string
        workspaceId:
          type: string
        demo:
          type: boolean
        cloudProvider:
          type: string
        freeTrial:
          type: boolean
      required:
      - accessToken
      - cloudProvider
      - connectionId
      - demo
      - email
      - hostname
      - isConnectionEstablished
      - isFreeTrial
      - port
      - workspaceId
      - workspaceUrl
      type: object
    ProvisionDatabricksConnectionResponse:
      example:
        userId: userId
        orgId: orgId
        workspaceId: workspaceId
      properties:
        workspaceId:
          type: string
        userId:
          type: string
        orgId:
          type: string
      required:
      - modelId
      - orgId
      - userId
      - workspaceId
      type: object
    ProvisionDatabricksConnectionRequest:
      example:
        expectExistingUser: true
        id: id
        email: email
      properties:
        id:
          type: string
        email:
          type: string
        expectExistingUser:
          type: boolean
      required:
      - email
      - expectExistingUser
      - id
      type: object
    ProvisionNewUserResponse:
      example:
        modelId: modelId
        userId: userId
        orgId: orgId
      properties:
        userId:
          type: string
        orgId:
          type: string
        modelId:
          type: string
      required:
      - modelId
      - orgId
      - userId
      type: object
    SubscriptionTier:
      enum:
      - FREE
      - PAID
      - AWS_MARKETPLACE
      type: string
    ProvisionNewUserRequest:
      example:
        modelName: modelName
        orgName: orgName
        expectExisting: true
        subscriptionTier: null
        email: email
      properties:
        email:
          type: string
        orgName:
          type: string
        modelName:
          type: string
        subscriptionTier:
          $ref: '#/components/schemas/SubscriptionTier'
        expectExisting:
          nullable: true
          type: boolean
      required:
      - email
      - modelName
      - orgName
      - subscriptionTier
      type: object
    ProvisionNewAWSMarketplaceUserResponse:
      example:
        modelId: modelId
        customerId: customerId
        userId: userId
        orgId: orgId
      properties:
        userId:
          type: string
        orgId:
          type: string
        modelId:
          type: string
        customerId:
          type: string
      required:
      - customerId
      - modelId
      - orgId
      - userId
      type: object
    ProvisionNewMarketplaceUserRequest:
      example:
        modelName: modelName
        orgName: orgName
        customerIdToken: customerIdToken
        expectExisting: true
        email: email
      properties:
        email:
          type: string
        orgName:
          type: string
        modelName:
          type: string
        customerIdToken:
          type: string
        expectExisting:
          nullable: true
          type: boolean
      required:
      - customerIdToken
      - email
      - modelName
      - orgName
      type: object
    Role:
      enum:
      - ADMIN
      - MEMBER
      - VIEWER
      type: string
    Membership:
      description: Response for the get memberships
      example:
        default: true
        role: null
        userId: userId
        orgId: orgId
        email: email
      properties:
        orgId:
          type: string
        default:
          type: boolean
        role:
          $ref: '#/components/schemas/Role'
        userId:
          type: string
        email:
          type: string
      required:
      - email
      - orgId
      - role
      - userId
      type: object
    ListOrganizationMembershipsResponse:
      description: Response for the ListOrganizationMemberships API
      example:
        memberships:
        - default: true
          role: null
          userId: userId
          orgId: orgId
          email: email
        - default: true
          role: null
          userId: userId
          orgId: orgId
          email: email
      properties:
        memberships:
          description: A list of all memberships in an organization.
          items:
            $ref: '#/components/schemas/Membership'
          type: array
          uniqueItems: true
      required:
      - memberships
      type: object
    MembershipMetadata:
      example:
        default: true
        role: null
        userId: userId
        orgId: orgId
      properties:
        orgId:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        userId:
          type: string
        default:
          type: boolean
      type: object
    Empty:
      type: object
    EntityWeightRecord:
      example:
        metadata:
          author: author
          version: 6
          updatedTimestamp: 1
        segmentWeights:
        - segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          weights:
            key: 0.8008281904610115
        - segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          weights:
            key: 0.8008281904610115
      properties:
        segmentWeights:
          description: A list of entity weights for a segment
          items:
            $ref: '#/components/schemas/SegmentWeight'
          type: array
          uniqueItems: true
        metadata:
          $ref: '#/components/schemas/EntityWeightRecordMetadata'
      type: object
    SegmentWeight:
      example:
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        weights:
          key: 0.8008281904610115
      properties:
        segment:
          $ref: '#/components/schemas/Segment'
        weights:
          additionalProperties:
            format: double
            type: number
          description: Entity weight value for each entity
          type: object
      type: object
    Segment:
      example:
        tags:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        tags:
          items:
            $ref: '#/components/schemas/SegmentTag'
          type: array
      type: object
    SegmentTag:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    EntityWeightRecordMetadata:
      example:
        author: author
        version: 6
        updatedTimestamp: 1
      properties:
        version:
          format: int64
          type: integer
        updatedTimestamp:
          format: int64
          type: integer
        author:
          type: string
      type: object
    User:
      description: User metadata
      example:
        preferences: preferences
        userId: userId
        email: email
      properties:
        userId:
          description: The id of the user.
          type: string
        email:
          description: The user's email address.
          type: string
        preferences:
          description: The user's JSON serialized preferences. Schema defined in Dashbird.
          nullable: true
          type: string
      required:
      - email
      - userId
      type: object
    CreateUserRequest:
      description: Request for creating a new user
      example:
        email: email
      properties:
        email:
          description: The users email address
          type: string
      required:
      - email
      type: object
    DatabricksConnection:
      example:
        connected: true
        jobId: jobId
        hostname: hostname
        createdBy: createdBy
        accessToken: accessToken
        demo: true
        orgId: orgId
        workspaceId: workspaceId
        workspaceUrl: workspaceUrl
      properties:
        orgId:
          type: string
        createdBy:
          type: string
        connected:
          type: boolean
        workspaceId:
          type: string
        accessToken:
          type: string
        workspaceUrl:
          type: string
        hostname:
          type: string
        jobId:
          nullable: true
          type: string
        demo:
          type: boolean
      required:
      - accessToken
      - connected
      - createdBy
      - demo
      - hostname
      - orgId
      - workspaceId
      - workspaceUrl
      type: object
    GetConnectionResponse:
      example:
        connection:
          connected: true
          jobId: jobId
          hostname: hostname
          createdBy: createdBy
          accessToken: accessToken
          demo: true
          orgId: orgId
          workspaceId: workspaceId
          workspaceUrl: workspaceUrl
      properties:
        connection:
          $ref: '#/components/schemas/DatabricksConnection'
      required:
      - connection
      type: object
    GetConnectionRequest:
      example:
        orgId: orgId
        workspaceId: workspaceId
      properties:
        orgId:
          description: Look up a connection by the org that is connected to.
          nullable: true
          type: string
        workspaceId:
          description: Look up a connection by the workspace that it originates from.
          nullable: true
          type: string
      type: object
    UpdateConnectionChanges:
      example:
        connected: true
        demo: true
        orgId: orgId
      properties:
        orgId:
          nullable: true
          type: string
        connected:
          nullable: true
          type: boolean
        demo:
          nullable: true
          type: boolean
      type: object
    UpdateConnectionRequest:
      example:
        changes:
          connected: true
          demo: true
          orgId: orgId
        orgId: orgId
        workspaceId: workspaceId
      properties:
        workspaceId:
          nullable: true
          type: string
        orgId:
          nullable: true
          type: string
        changes:
          $ref: '#/components/schemas/UpdateConnectionChanges'
      required:
      - connection
      type: object
    RefreshConnectionByOrgIdResponse:
      example:
        connection:
          connected: true
          jobId: jobId
          hostname: hostname
          createdBy: createdBy
          accessToken: accessToken
          demo: true
          orgId: orgId
          workspaceId: workspaceId
          workspaceUrl: workspaceUrl
      properties:
        connection:
          $ref: '#/components/schemas/DatabricksConnection'
      required:
      - connection
      type: object
    RefreshConnectionRequest:
      example:
        orgId: orgId
        workspaceId: workspaceId
      properties:
        orgId:
          description: Look up a connection by the org that is connected to.
          nullable: true
          type: string
        workspaceId:
          description: Look up a connection by the workspace that it originates from.
          nullable: true
          type: string
      type: object
    RefreshAccessTokenRequest:
      properties:
        workspaceId:
          type: string
      required:
      - workspaceId
      type: object
    RunJobResponse:
      example:
        runId: 0
      properties:
        runId:
          format: int64
          type: integer
      required:
      - runId
      type: object
    RunJobRequest:
      example:
        jobId: 0
        orgId: orgId
        workspaceId: workspaceId
      properties:
        orgId:
          description: Look up a connection by the org that is connected to.
          nullable: true
          type: string
        workspaceId:
          description: Look up a connection by the workspace that it originates from.
          nullable: true
          type: string
        jobId:
          description: The id of the job to run in the connected Databricks workspace.
          format: int64
          type: integer
      required:
      - jobId
      type: object
    DTO.JobDTO:
      example:
        jobId: 0
        settings:
          emailNotifications:
            onStart:
            - "{}"
            - "{}"
            noAlertForSkippedRuns: true
            onFailure:
            - "{}"
            - "{}"
            onSuccess:
            - "{}"
            - "{}"
          notebookTask:
            notebookPath: notebookPath
            revisionTimestamp: 4
            baseParameters:
              key: baseParameters
          sparkSubmitTask:
            parameters:
            - "{}"
            - "{}"
          sparkJarTask:
            mainClassName: mainClassName
            runAsRepl: true
            jarUri: jarUri
            parameters:
            - "{}"
            - "{}"
          existingClusterId: existingClusterId
          libraries:
          - "{}"
          - "{}"
          schedule:
            quartzCronExpression: quartzCronExpression
            timezoneId: timezoneId
          sparkPythonTask:
            pythonFile: pythonFile
            parameters:
            - "{}"
            - "{}"
          maxRetries: 7
          retryOnTimeout: true
          minRetryIntervalMillis: 1
          newCluster:
            awsAttributes:
              ebsVolumeCount: 5
              firstOnDemand: 6
              ebsVolumeSize: 5
              zoneId: zoneId
              spotBidPricePercent: 1
              availability: null
              instanceProfileArn: instanceProfileArn
              ebsVolumeType: null
            sshPublicKeys:
            - "{}"
            - "{}"
            autoTerminationMinutes: 3
            sparkConf:
              key: sparkConf
            sparkEnvVars:
              key: sparkEnvVars
            nodeTypeId: nodeTypeId
            enableElasticDisk: true
            sparkVersion: sparkVersion
            autoScale:
              maxWorkers: 9
              minWorkers: 7
            customTags:
              key: customTags
            clusterName: clusterName
            numWorkers: 2
            driverNodeTypeId: driverNodeTypeId
            clusterLogConf:
              s3:
                endpoint: endpoint
                cannedAcl: cannedAcl
                kmsKey: kmsKey
                destination: destination
                encryptionType: encryptionType
                region: region
                enableEncryption: true
              dbfs:
                destination: destination
          name: name
          timeoutSeconds: 2
          maxConcurrentRuns: 1
        creatorUserName: creatorUserName
        createdTime: 2000-01-23T04:56:07.000+00:00
      properties:
        jobId:
          format: int64
          type: integer
        settings:
          $ref: '#/components/schemas/DTO.JobSettingsDTO'
        createdTime:
          format: date-time
          type: string
        creatorUserName:
          type: string
      type: object
    DTO.JobSettingsDTO:
      example:
        emailNotifications:
          onStart:
          - "{}"
          - "{}"
          noAlertForSkippedRuns: true
          onFailure:
          - "{}"
          - "{}"
          onSuccess:
          - "{}"
          - "{}"
        notebookTask:
          notebookPath: notebookPath
          revisionTimestamp: 4
          baseParameters:
            key: baseParameters
        sparkSubmitTask:
          parameters:
          - "{}"
          - "{}"
        sparkJarTask:
          mainClassName: mainClassName
          runAsRepl: true
          jarUri: jarUri
          parameters:
          - "{}"
          - "{}"
        existingClusterId: existingClusterId
        libraries:
        - "{}"
        - "{}"
        schedule:
          quartzCronExpression: quartzCronExpression
          timezoneId: timezoneId
        sparkPythonTask:
          pythonFile: pythonFile
          parameters:
          - "{}"
          - "{}"
        maxRetries: 7
        retryOnTimeout: true
        minRetryIntervalMillis: 1
        newCluster:
          awsAttributes:
            ebsVolumeCount: 5
            firstOnDemand: 6
            ebsVolumeSize: 5
            zoneId: zoneId
            spotBidPricePercent: 1
            availability: null
            instanceProfileArn: instanceProfileArn
            ebsVolumeType: null
          sshPublicKeys:
          - "{}"
          - "{}"
          autoTerminationMinutes: 3
          sparkConf:
            key: sparkConf
          sparkEnvVars:
            key: sparkEnvVars
          nodeTypeId: nodeTypeId
          enableElasticDisk: true
          sparkVersion: sparkVersion
          autoScale:
            maxWorkers: 9
            minWorkers: 7
          customTags:
            key: customTags
          clusterName: clusterName
          numWorkers: 2
          driverNodeTypeId: driverNodeTypeId
          clusterLogConf:
            s3:
              endpoint: endpoint
              cannedAcl: cannedAcl
              kmsKey: kmsKey
              destination: destination
              encryptionType: encryptionType
              region: region
              enableEncryption: true
            dbfs:
              destination: destination
        name: name
        timeoutSeconds: 2
        maxConcurrentRuns: 1
      properties:
        name:
          type: string
        newCluster:
          $ref: '#/components/schemas/DTO.NewClusterDTO'
        existingClusterId:
          type: string
        emailNotifications:
          $ref: '#/components/schemas/DTO.JobEmailNotificationsDTO'
        timeoutSeconds:
          format: int64
          type: integer
        schedule:
          $ref: '#/components/schemas/DTO.CronScheduleDTO'
        notebookTask:
          $ref: '#/components/schemas/DTO.NotebookTaskDTO'
        sparkJarTask:
          $ref: '#/components/schemas/DTO.SparkJarTaskDTO'
        sparkPythonTask:
          $ref: '#/components/schemas/DTO.SparkPythonTaskDTO'
        sparkSubmitTask:
          $ref: '#/components/schemas/DTO.SparkSubmitTaskDTO'
        retryOnTimeout:
          type: boolean
        maxRetries:
          format: int32
          type: integer
        minRetryIntervalMillis:
          format: int64
          type: integer
        libraries:
          items:
            type: object
          type: array
        maxConcurrentRuns:
          format: int32
          type: integer
      type: object
    DTO.NewClusterDTO:
      example:
        awsAttributes:
          ebsVolumeCount: 5
          firstOnDemand: 6
          ebsVolumeSize: 5
          zoneId: zoneId
          spotBidPricePercent: 1
          availability: null
          instanceProfileArn: instanceProfileArn
          ebsVolumeType: null
        sshPublicKeys:
        - "{}"
        - "{}"
        autoTerminationMinutes: 3
        sparkConf:
          key: sparkConf
        sparkEnvVars:
          key: sparkEnvVars
        nodeTypeId: nodeTypeId
        enableElasticDisk: true
        sparkVersion: sparkVersion
        autoScale:
          maxWorkers: 9
          minWorkers: 7
        customTags:
          key: customTags
        clusterName: clusterName
        numWorkers: 2
        driverNodeTypeId: driverNodeTypeId
        clusterLogConf:
          s3:
            endpoint: endpoint
            cannedAcl: cannedAcl
            kmsKey: kmsKey
            destination: destination
            encryptionType: encryptionType
            region: region
            enableEncryption: true
          dbfs:
            destination: destination
      properties:
        sparkVersion:
          type: string
        awsAttributes:
          $ref: '#/components/schemas/DTO.AwsAttributesDTO'
        nodeTypeId:
          type: string
        numWorkers:
          format: int32
          type: integer
        autoScale:
          $ref: '#/components/schemas/DTO.AutoScaleDTO'
        clusterName:
          type: string
        sparkConf:
          additionalProperties:
            type: string
          type: object
        driverNodeTypeId:
          type: string
        sshPublicKeys:
          items:
            type: object
          type: array
        customTags:
          additionalProperties:
            type: string
          type: object
        clusterLogConf:
          $ref: '#/components/schemas/DTO.ClusterLogConfDTO'
        sparkEnvVars:
          additionalProperties:
            type: string
          type: object
        autoTerminationMinutes:
          format: int32
          type: integer
        enableElasticDisk:
          type: boolean
      type: object
    DTO.AwsAttributesDTO:
      example:
        ebsVolumeCount: 5
        firstOnDemand: 6
        ebsVolumeSize: 5
        zoneId: zoneId
        spotBidPricePercent: 1
        availability: null
        instanceProfileArn: instanceProfileArn
        ebsVolumeType: null
      properties:
        firstOnDemand:
          format: int32
          type: integer
        availability:
          $ref: '#/components/schemas/DTO.AwsAvailabilityDTO'
        zoneId:
          type: string
        instanceProfileArn:
          type: string
        spotBidPricePercent:
          format: int32
          type: integer
        ebsVolumeType:
          $ref: '#/components/schemas/DTO.EbsVolumeTypeDTO'
        ebsVolumeCount:
          format: int32
          type: integer
        ebsVolumeSize:
          format: int32
          type: integer
      type: object
    DTO.AwsAvailabilityDTO:
      enum:
      - SPOT
      - ON_DEMAND
      - SPOT_WITH_FALLBACK
      type: string
    DTO.EbsVolumeTypeDTO:
      enum:
      - GENERAL_PURPOSE_SSD
      - THROUGHPUT_OPTIMIZED_HDD
      type: string
    DTO.AutoScaleDTO:
      example:
        maxWorkers: 9
        minWorkers: 7
      properties:
        minWorkers:
          format: int32
          type: integer
        maxWorkers:
          format: int32
          type: integer
      type: object
    DTO.ClusterLogConfDTO:
      example:
        s3:
          endpoint: endpoint
          cannedAcl: cannedAcl
          kmsKey: kmsKey
          destination: destination
          encryptionType: encryptionType
          region: region
          enableEncryption: true
        dbfs:
          destination: destination
      properties:
        dbfs:
          $ref: '#/components/schemas/DTO.DbfsStorageInfoDTO'
        s3:
          $ref: '#/components/schemas/DTO.S3StorageInfoDTO'
      type: object
    DTO.DbfsStorageInfoDTO:
      example:
        destination: destination
      properties:
        destination:
          type: string
      type: object
    DTO.S3StorageInfoDTO:
      example:
        endpoint: endpoint
        cannedAcl: cannedAcl
        kmsKey: kmsKey
        destination: destination
        encryptionType: encryptionType
        region: region
        enableEncryption: true
      properties:
        destination:
          type: string
        region:
          type: string
        endpoint:
          type: string
        enableEncryption:
          type: boolean
        encryptionType:
          type: string
        kmsKey:
          type: string
        cannedAcl:
          type: string
      type: object
    DTO.JobEmailNotificationsDTO:
      example:
        onStart:
        - "{}"
        - "{}"
        noAlertForSkippedRuns: true
        onFailure:
        - "{}"
        - "{}"
        onSuccess:
        - "{}"
        - "{}"
      properties:
        onFailure:
          items:
            type: object
          type: array
        onStart:
          items:
            type: object
          type: array
        onSuccess:
          items:
            type: object
          type: array
        noAlertForSkippedRuns:
          type: boolean
      type: object
    DTO.CronScheduleDTO:
      example:
        quartzCronExpression: quartzCronExpression
        timezoneId: timezoneId
      properties:
        quartzCronExpression:
          type: string
        timezoneId:
          type: string
      type: object
    DTO.NotebookTaskDTO:
      example:
        notebookPath: notebookPath
        revisionTimestamp: 4
        baseParameters:
          key: baseParameters
      properties:
        notebookPath:
          type: string
        baseParameters:
          additionalProperties:
            type: string
          type: object
        revisionTimestamp:
          format: int64
          type: integer
      type: object
    DTO.SparkJarTaskDTO:
      example:
        mainClassName: mainClassName
        runAsRepl: true
        jarUri: jarUri
        parameters:
        - "{}"
        - "{}"
      properties:
        jarUri:
          type: string
        mainClassName:
          type: string
        parameters:
          items:
            type: object
          type: array
        runAsRepl:
          type: boolean
      type: object
    DTO.SparkPythonTaskDTO:
      example:
        pythonFile: pythonFile
        parameters:
        - "{}"
        - "{}"
      properties:
        pythonFile:
          type: string
        parameters:
          items:
            type: object
          type: array
      type: object
    DTO.SparkSubmitTaskDTO:
      example:
        parameters:
        - "{}"
        - "{}"
      properties:
        parameters:
          items:
            type: object
          type: array
      type: object
    ListJobsResponse:
      example:
        jobs:
        - jobId: 0
          settings:
            emailNotifications:
              onStart:
              - "{}"
              - "{}"
              noAlertForSkippedRuns: true
              onFailure:
              - "{}"
              - "{}"
              onSuccess:
              - "{}"
              - "{}"
            notebookTask:
              notebookPath: notebookPath
              revisionTimestamp: 4
              baseParameters:
                key: baseParameters
            sparkSubmitTask:
              parameters:
              - "{}"
              - "{}"
            sparkJarTask:
              mainClassName: mainClassName
              runAsRepl: true
              jarUri: jarUri
              parameters:
              - "{}"
              - "{}"
            existingClusterId: existingClusterId
            libraries:
            - "{}"
            - "{}"
            schedule:
              quartzCronExpression: quartzCronExpression
              timezoneId: timezoneId
            sparkPythonTask:
              pythonFile: pythonFile
              parameters:
              - "{}"
              - "{}"
            maxRetries: 7
            retryOnTimeout: true
            minRetryIntervalMillis: 1
            newCluster:
              awsAttributes:
                ebsVolumeCount: 5
                firstOnDemand: 6
                ebsVolumeSize: 5
                zoneId: zoneId
                spotBidPricePercent: 1
                availability: null
                instanceProfileArn: instanceProfileArn
                ebsVolumeType: null
              sshPublicKeys:
              - "{}"
              - "{}"
              autoTerminationMinutes: 3
              sparkConf:
                key: sparkConf
              sparkEnvVars:
                key: sparkEnvVars
              nodeTypeId: nodeTypeId
              enableElasticDisk: true
              sparkVersion: sparkVersion
              autoScale:
                maxWorkers: 9
                minWorkers: 7
              customTags:
                key: customTags
              clusterName: clusterName
              numWorkers: 2
              driverNodeTypeId: driverNodeTypeId
              clusterLogConf:
                s3:
                  endpoint: endpoint
                  cannedAcl: cannedAcl
                  kmsKey: kmsKey
                  destination: destination
                  encryptionType: encryptionType
                  region: region
                  enableEncryption: true
                dbfs:
                  destination: destination
            name: name
            timeoutSeconds: 2
            maxConcurrentRuns: 1
          creatorUserName: creatorUserName
          createdTime: 2000-01-23T04:56:07.000+00:00
        - jobId: 0
          settings:
            emailNotifications:
              onStart:
              - "{}"
              - "{}"
              noAlertForSkippedRuns: true
              onFailure:
              - "{}"
              - "{}"
              onSuccess:
              - "{}"
              - "{}"
            notebookTask:
              notebookPath: notebookPath
              revisionTimestamp: 4
              baseParameters:
                key: baseParameters
            sparkSubmitTask:
              parameters:
              - "{}"
              - "{}"
            sparkJarTask:
              mainClassName: mainClassName
              runAsRepl: true
              jarUri: jarUri
              parameters:
              - "{}"
              - "{}"
            existingClusterId: existingClusterId
            libraries:
            - "{}"
            - "{}"
            schedule:
              quartzCronExpression: quartzCronExpression
              timezoneId: timezoneId
            sparkPythonTask:
              pythonFile: pythonFile
              parameters:
              - "{}"
              - "{}"
            maxRetries: 7
            retryOnTimeout: true
            minRetryIntervalMillis: 1
            newCluster:
              awsAttributes:
                ebsVolumeCount: 5
                firstOnDemand: 6
                ebsVolumeSize: 5
                zoneId: zoneId
                spotBidPricePercent: 1
                availability: null
                instanceProfileArn: instanceProfileArn
                ebsVolumeType: null
              sshPublicKeys:
              - "{}"
              - "{}"
              autoTerminationMinutes: 3
              sparkConf:
                key: sparkConf
              sparkEnvVars:
                key: sparkEnvVars
              nodeTypeId: nodeTypeId
              enableElasticDisk: true
              sparkVersion: sparkVersion
              autoScale:
                maxWorkers: 9
                minWorkers: 7
              customTags:
                key: customTags
              clusterName: clusterName
              numWorkers: 2
              driverNodeTypeId: driverNodeTypeId
              clusterLogConf:
                s3:
                  endpoint: endpoint
                  cannedAcl: cannedAcl
                  kmsKey: kmsKey
                  destination: destination
                  encryptionType: encryptionType
                  region: region
                  enableEncryption: true
                dbfs:
                  destination: destination
            name: name
            timeoutSeconds: 2
            maxConcurrentRuns: 1
          creatorUserName: creatorUserName
          createdTime: 2000-01-23T04:56:07.000+00:00
      properties:
        jobs:
          items:
            $ref: '#/components/schemas/DTO.JobDTO'
          type: array
      required:
      - jobs
      type: object
    ListJobsRequest:
      example:
        orgId: orgId
        workspaceId: workspaceId
      properties:
        orgId:
          description: Look up a connection by the org that is connected to.
          nullable: true
          type: string
        workspaceId:
          description: Look up a connection by the workspace that it originates from.
          nullable: true
          type: string
      type: object
    NotificationSqsMessageCadence:
      enum:
      - HOURLY
      - DAILY
      - WEEKLY
      - INDIVIDUAL
      type: string
    NotificationSettingsDay:
      enum:
      - SUNDAY
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
      type: string
    UberNotificationSchedule:
      description: "\nCombination of all possible schedule types, a hacky workaround\
        \ for bugs in generated clients that use polymorphic types.\nThere are three\
        \ types of schedules. Weekly, Daily, and Individual. You need to set the right\
        \ fields for each one.\n\nWeekly:\n    enabled, cadence=WEEKLY, dayOfWeek,\
        \ local24HourOfDay, localMinuteOfHour, localTimezone\n    \nDaily:\n    enabled,\
        \ cadence=DAILY, local24HourOfDay, localMinuteOfHour, localTimezone\n    \n\
        Individual:\n    enabled, cadence=INDIVIDUAL\n"
      example:
        dayOfWeek: null
        localMinuteOfHour: 6
        enabled: true
        cadence: null
        local24HourOfDay: 0
        localTimezone: localTimezone
      properties:
        enabled:
          type: boolean
        cadence:
          $ref: '#/components/schemas/NotificationSqsMessageCadence'
        dayOfWeek:
          $ref: '#/components/schemas/NotificationSettingsDay'
        local24HourOfDay:
          format: int32
          nullable: true
          type: integer
        localMinuteOfHour:
          format: int32
          nullable: true
          type: integer
        localTimezone:
          nullable: true
          type: string
      required:
      - cadence
      - enabled
      type: object
    NotificationSettings:
      description: Settings that control how and when notifications are delivered.
      example:
        slackSettings:
          dayOfWeek: null
          localMinuteOfHour: 6
          enabled: true
          cadence: null
          local24HourOfDay: 0
          localTimezone: localTimezone
        pagerDutySettings:
          dayOfWeek: null
          localMinuteOfHour: 6
          enabled: true
          cadence: null
          local24HourOfDay: 0
          localTimezone: localTimezone
        emailSettings:
          dayOfWeek: null
          localMinuteOfHour: 6
          enabled: true
          cadence: null
          local24HourOfDay: 0
          localTimezone: localTimezone
      properties:
        emailSettings:
          $ref: '#/components/schemas/UberNotificationSchedule'
        slackSettings:
          $ref: '#/components/schemas/UberNotificationSchedule'
        pagerDutySettings:
          $ref: '#/components/schemas/UberNotificationSchedule'
      type: object
    GetNotificationSettingsResponse:
      description: Response for getting notification settings
      example:
        notificationSettings:
          slackSettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
          pagerDutySettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
          emailSettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
      properties:
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettings'
      required:
      - items
      type: object
    NotificationAction:
      example:
        payload: "{}"
        id: id
        type: null
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ActionType'
        payload:
          type: object
      type: object
    ActionType:
      enum:
      - EMAIL
      - SLACK
      - PAGER_DUTY
      - NA
      type: string
    NotificationActionPayload:
      type: object
    void:
      type: object
    EmailNotificationAction:
      description: Email payload for Notification Actions
      example:
        email: email
      properties:
        email:
          type: string
      required:
      - email
      type: object
    SlackNotificationAction:
      description: Slack payload for Notification Actions
      example:
        slackWebhook: slackWebhook
      properties:
        slackWebhook:
          type: string
      required:
      - slackWebhook
      type: object
    PagerDutyNotificationAction:
      description: Pager Duty payload for Notification Actions
      example:
        pagerDutyKey: pagerDutyKey
      properties:
        pagerDutyKey:
          type: string
      required:
      - pagerDutyKey
      type: object
    TimePeriod:
      description: A TimePeriod represents the bucketing that a dataset has undergone.
      enum:
      - P1M
      - P1W
      - P1D
      - PT1H
      - PT5M
      type: string
    ModelType:
      description: The type of model associated with the dataset
      enum:
      - CLASSIFICATION
      - REGRESSION
      - EMBEDDINGS
      type: string
    ModelMetadata:
      description: Detailed metadata about a model
      example:
        creationTime: 0
        name: name
        timePeriod: null
        active: true
        id: id
        modelType: null
        orgId: orgId
      properties:
        id:
          type: string
        orgId:
          type: string
        name:
          type: string
        creationTime:
          format: int64
          type: integer
        timePeriod:
          $ref: '#/components/schemas/TimePeriod'
        modelType:
          $ref: '#/components/schemas/ModelType'
        active:
          nullable: true
          type: boolean
      required:
      - id
      - name
      type: object
    ListModelsResponse:
      description: Response for the ListModels API
      example:
        items:
        - creationTime: 0
          name: name
          timePeriod: null
          active: true
          id: id
          modelType: null
          orgId: orgId
        - creationTime: 0
          name: name
          timePeriod: null
          active: true
          id: id
          modelType: null
          orgId: orgId
      properties:
        items:
          description: A list of all known model ids for an organization.
          items:
            $ref: '#/components/schemas/ModelMetadata'
          type: array
          uniqueItems: true
      required:
      - items
      type: object
    SegmentMetadata:
      description: Metadata about a segment
      example:
        updatedTime: 0
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        model:
          creationTime: 0
          name: name
          timePeriod: null
          active: true
          id: id
          modelType: null
          orgId: orgId
        orgId: orgId
      properties:
        orgId:
          type: string
        model:
          $ref: '#/components/schemas/ModelMetadata'
        segment:
          $ref: '#/components/schemas/Segment'
        updatedTime:
          format: int64
          type: integer
      type: object
    SegmentSummary:
      description: Summary about a segment
      example:
        updatedTime: 0
        modelId: modelId
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        orgId: orgId
      properties:
        orgId:
          type: string
        modelId:
          type: string
        segment:
          $ref: '#/components/schemas/Segment'
        updatedTime:
          format: int64
          type: integer
      type: object
    ListSegmentsResponse:
      description: Response for the ListSegments API
      example:
        items:
        - updatedTime: 0
          modelId: modelId
          segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          orgId: orgId
        - updatedTime: 0
          modelId: modelId
          segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          orgId: orgId
      properties:
        items:
          description: A list of segments.
          items:
            $ref: '#/components/schemas/SegmentSummary'
          type: array
          uniqueItems: true
      required:
      - items
      type: object
    MonitorConfig:
      description: Object contains serialized monitor config
      example:
        updatedTime: 6
        configBase: configBase
        modelId: modelId
        configAnalyzers: configAnalyzers
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        configMonitors: configMonitors
        config: config
        version: 0
        orgId: orgId
      properties:
        orgId:
          type: string
        modelId:
          type: string
        segment:
          $ref: '#/components/schemas/Segment'
        config:
          nullable: true
          type: string
        configBase:
          nullable: true
          type: string
        configAnalyzers:
          nullable: true
          type: string
        configMonitors:
          nullable: true
          type: string
        version:
          format: int64
          nullable: true
          type: integer
        updatedTime:
          format: int64
          nullable: true
          type: integer
      type: object
    GetMonitorConfigV2Response:
      example:
        config:
          config:
            reference:
              profileId: profileId
              numBatches: 1
              type: null
              profileTimestamp: 6
            uniqueValues:
              enable: true
              minRecordCount: 9
              minThreshold: 3.616076749251911
              maxThreshold: 2.027123023002322
            schemaVersion: schemaVersion
            numStdDev: 0.8008281904610115
            missingRecentData:
              enable: true
            datatype:
              enable: true
            missingRecentProfiles:
              enable: true
            missingValues:
              thresholdUpperBound: 7.061401241503109
              enable: true
              threshold: 5.637376656633329
              thresholdLowerBound: 2.3021358869347655
            seasonalARIMA:
              enable: true
              metrics:
              - null
              - null
              seasonalityBatches: 4
            distribution:
              enable: true
              threshold: 5.962133916683182
          perFeatureConfig:
            key:
              uniqueValues:
                enable: true
                minRecordCount: 9
                minThreshold: 3.616076749251911
                maxThreshold: 2.027123023002322
              datatype:
                enable: true
              missingValues:
                thresholdUpperBound: 7.061401241503109
                enable: true
                threshold: 5.637376656633329
                thresholdLowerBound: 2.3021358869347655
              seasonalARIMA:
                enable: true
                metrics:
                - null
                - null
                seasonalityBatches: 4
              distribution:
                enable: true
                threshold: 5.962133916683182
      properties:
        config:
          $ref: '#/components/schemas/DatasetRequestMonitorConfig'
      type: object
    MonitorRequestReference:
      example:
        profileId: profileId
        numBatches: 1
        type: null
        profileTimestamp: 6
      properties:
        type:
          $ref: '#/components/schemas/MonitorRequestReferenceType'
        profileTimestamp:
          format: int64
          nullable: true
          type: integer
        profileId:
          nullable: true
          type: string
        numBatches:
          format: int32
          nullable: true
          type: integer
      type: object
    MonitorRequestReferenceType:
      enum:
      - reference_profile
      - reference_window
      type: string
    MissingRecentDataRequestConfig:
      example:
        enable: true
      properties:
        enable:
          nullable: true
          type: boolean
      type: object
    MissingRecentProfilesRequestConfig:
      example:
        enable: true
      properties:
        enable:
          nullable: true
          type: boolean
      type: object
    DistributionMonitorRequestConfig:
      example:
        enable: true
        threshold: 5.962133916683182
      properties:
        enable:
          nullable: true
          type: boolean
        threshold:
          format: double
          nullable: true
          type: number
      type: object
    MissingValuesMonitorRequestConfig:
      example:
        thresholdUpperBound: 7.061401241503109
        enable: true
        threshold: 5.637376656633329
        thresholdLowerBound: 2.3021358869347655
      properties:
        enable:
          type: boolean
        threshold:
          format: double
          nullable: true
          type: number
        thresholdLowerBound:
          format: double
          nullable: true
          type: number
        thresholdUpperBound:
          format: double
          nullable: true
          type: number
      type: object
    UniqueValuesMonitorRequestConfig:
      example:
        enable: true
        minRecordCount: 9
        minThreshold: 3.616076749251911
        maxThreshold: 2.027123023002322
      properties:
        enable:
          nullable: true
          type: boolean
        minRecordCount:
          format: int32
          nullable: true
          type: integer
        minThreshold:
          format: double
          nullable: true
          type: number
        maxThreshold:
          format: double
          nullable: true
          type: number
      type: object
    DatatypeMonitorRequestConfig:
      example:
        enable: true
      properties:
        enable:
          nullable: true
          type: boolean
      type: object
    SeasonalARIMARequestConfig:
      example:
        enable: true
        metrics:
        - null
        - null
        seasonalityBatches: 4
      properties:
        enable:
          nullable: true
          type: boolean
        seasonalityBatches:
          format: int32
          nullable: true
          type: integer
        metrics:
          items:
            $ref: '#/components/schemas/WhyLogsMetric'
          nullable: true
          type: array
      type: object
    WhyLogsMetric:
      enum:
      - TotalCount
      - Median
      - Min
      - Max
      - StdDev
      - Mean
      type: string
    RequestMonitorConfig:
      description: A configuration for the whylabs monitor for a single model or segment.
      example:
        reference:
          profileId: profileId
          numBatches: 1
          type: null
          profileTimestamp: 6
        uniqueValues:
          enable: true
          minRecordCount: 9
          minThreshold: 3.616076749251911
          maxThreshold: 2.027123023002322
        schemaVersion: schemaVersion
        numStdDev: 0.8008281904610115
        missingRecentData:
          enable: true
        datatype:
          enable: true
        missingRecentProfiles:
          enable: true
        missingValues:
          thresholdUpperBound: 7.061401241503109
          enable: true
          threshold: 5.637376656633329
          thresholdLowerBound: 2.3021358869347655
        seasonalARIMA:
          enable: true
          metrics:
          - null
          - null
          seasonalityBatches: 4
        distribution:
          enable: true
          threshold: 5.962133916683182
      properties:
        schemaVersion:
          type: string
        numStdDev:
          format: double
          nullable: true
          type: number
        reference:
          $ref: '#/components/schemas/MonitorRequestReference'
        missingRecentData:
          $ref: '#/components/schemas/MissingRecentDataRequestConfig'
        missingRecentProfiles:
          $ref: '#/components/schemas/MissingRecentProfilesRequestConfig'
        distribution:
          $ref: '#/components/schemas/DistributionMonitorRequestConfig'
        missingValues:
          $ref: '#/components/schemas/MissingValuesMonitorRequestConfig'
        uniqueValues:
          $ref: '#/components/schemas/UniqueValuesMonitorRequestConfig'
        datatype:
          $ref: '#/components/schemas/DatatypeMonitorRequestConfig'
        seasonalARIMA:
          $ref: '#/components/schemas/SeasonalARIMARequestConfig'
      required:
      - schema_version
      type: object
    RequestFeatureMonitorConfig:
      description: A configuration for the whylabs monitor for a single feature
      example:
        uniqueValues:
          enable: true
          minRecordCount: 9
          minThreshold: 3.616076749251911
          maxThreshold: 2.027123023002322
        datatype:
          enable: true
        missingValues:
          thresholdUpperBound: 7.061401241503109
          enable: true
          threshold: 5.637376656633329
          thresholdLowerBound: 2.3021358869347655
        seasonalARIMA:
          enable: true
          metrics:
          - null
          - null
          seasonalityBatches: 4
        distribution:
          enable: true
          threshold: 5.962133916683182
      properties:
        distribution:
          $ref: '#/components/schemas/DistributionMonitorRequestConfig'
        missingValues:
          $ref: '#/components/schemas/MissingValuesMonitorRequestConfig'
        uniqueValues:
          $ref: '#/components/schemas/UniqueValuesMonitorRequestConfig'
        datatype:
          $ref: '#/components/schemas/DatatypeMonitorRequestConfig'
        seasonalARIMA:
          $ref: '#/components/schemas/SeasonalARIMARequestConfig'
      type: object
    DatasetRequestMonitorConfig:
      description: A configuration for the whylabs monitor.
      example:
        config:
          reference:
            profileId: profileId
            numBatches: 1
            type: null
            profileTimestamp: 6
          uniqueValues:
            enable: true
            minRecordCount: 9
            minThreshold: 3.616076749251911
            maxThreshold: 2.027123023002322
          schemaVersion: schemaVersion
          numStdDev: 0.8008281904610115
          missingRecentData:
            enable: true
          datatype:
            enable: true
          missingRecentProfiles:
            enable: true
          missingValues:
            thresholdUpperBound: 7.061401241503109
            enable: true
            threshold: 5.637376656633329
            thresholdLowerBound: 2.3021358869347655
          seasonalARIMA:
            enable: true
            metrics:
            - null
            - null
            seasonalityBatches: 4
          distribution:
            enable: true
            threshold: 5.962133916683182
        perFeatureConfig:
          key:
            uniqueValues:
              enable: true
              minRecordCount: 9
              minThreshold: 3.616076749251911
              maxThreshold: 2.027123023002322
            datatype:
              enable: true
            missingValues:
              thresholdUpperBound: 7.061401241503109
              enable: true
              threshold: 5.637376656633329
              thresholdLowerBound: 2.3021358869347655
            seasonalARIMA:
              enable: true
              metrics:
              - null
              - null
              seasonalityBatches: 4
            distribution:
              enable: true
              threshold: 5.962133916683182
      properties:
        config:
          $ref: '#/components/schemas/RequestMonitorConfig'
        perFeatureConfig:
          additionalProperties:
            $ref: '#/components/schemas/RequestFeatureMonitorConfig'
          nullable: true
          type: object
      type: object
    MonitorConfigVersion:
      example:
        path: path
        versionId: versionId
        lastModified: 0
      properties:
        path:
          type: string
        versionId:
          type: string
        lastModified:
          format: int64
          type: integer
      type: object
    ColumnSchema:
      description: Column schema for a given column
      example:
        discreteness: discrete
        dataType: fractional
        classifier: input
      properties:
        classifier:
          description: We can classify these columns into various grouping. Currently
            we only support 'input' and 'output'
          example: input
          type: string
        dataType:
          description: The data type of the columns. Setting this field affects the
            default grouping (i.e integral columns)
          example: fractional
          type: string
        discreteness:
          description: Whether a column should be discrete or continuous. Changing
            this column will change the default grouping (discrete columns vs. continuous
            columns
          example: discrete
          type: string
      required:
      - classifier
      - dataType
      - discreteness
      type: object
    SchemaMetadata:
      example:
        author: author
        version: 0
        updatedTimestamp: 6
      properties:
        version:
          format: int64
          type: integer
        updatedTimestamp:
          format: int64
          type: integer
        author:
          type: string
      type: object
    EntitySchema:
      description: Entity schema for a dataset
      example:
        metadata:
          author: author
          version: 0
          updatedTimestamp: 6
        columns:
          key:
            discreteness: discrete
            dataType: fractional
            classifier: input
      properties:
        columns:
          additionalProperties:
            $ref: '#/components/schemas/ColumnSchema'
          description: Column schema for a given column
          type: object
        metadata:
          $ref: '#/components/schemas/SchemaMetadata'
      required:
      - columns
      type: object
    ProvidedConfig:
      description: Information about WhyLabs Provide Config
      example:
        updatedTime: 6
        modelId: modelId
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        config: config
        version: 0
        orgId: orgId
      properties:
        orgId:
          type: string
        modelId:
          nullable: true
          type: string
        segment:
          $ref: '#/components/schemas/Segment'
        config:
          nullable: true
          type: string
        version:
          format: int64
          nullable: true
          type: integer
        updatedTime:
          format: int64
          nullable: true
          type: integer
      type: object
    AsyncLogResponse:
      description: Response payload for LogAsync.
      example:
        uploadUrl: uploadUrl
        modelId: modelId
        uploadTimestamp: 0
        id: id
        tags:
          tags:
          - value: value
            key: key
          - value: value
            key: key
      properties:
        id:
          type: string
        modelId:
          type: string
        uploadTimestamp:
          format: int64
          type: integer
        uploadUrl:
          type: string
        tags:
          $ref: '#/components/schemas/Segment'
      type: object
    LogAsyncRequest:
      description: Request payload for LogAsync.
      example:
        datasetTimestamp: 0
        segmentTags:
        - value: value
          key: key
        - value: value
          key: key
      properties:
        datasetTimestamp:
          format: int64
          type: integer
        segmentTags:
          items:
            $ref: '#/components/schemas/SegmentTag'
          type: array
      type: object
    LogReferenceResponse:
      description: Response payload for uploading reference profile.
      example:
        uploadUrl: uploadUrl
        modelId: modelId
        uploadTimestamp: 0
        alias: alias
        id: id
      properties:
        id:
          type: string
        modelId:
          type: string
        alias:
          type: string
        uploadTimestamp:
          format: int64
          type: integer
        uploadUrl:
          type: string
      type: object
    LogReferenceRequest:
      description: Request payload for LogReference.
      example:
        datasetTimestamp: 0
        alias: alias
      properties:
        alias:
          nullable: true
          type: string
        datasetTimestamp:
          format: int64
          nullable: true
          type: integer
      type: object
    LogResponse:
      description: Response payload for UploadDatasetProfile.
      example:
        modelId: modelId
        uploadTimestamp: 0
        id: id
      properties:
        id:
          type: string
        modelId:
          type: string
        uploadTimestamp:
          format: int64
          type: integer
      type: object
    AlertsPath:
      description: Metadata for an event
      example:
        datasetTimestamp: 6
        s3Path: s3Path
        modelId: modelId
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        creationTimestamp: 0
        etag: etag
        id: id
        version: version
        orgId: orgId
      properties:
        id:
          type: string
        orgId:
          type: string
        modelId:
          type: string
        segment:
          $ref: '#/components/schemas/Segment'
        creationTimestamp:
          format: int64
          type: integer
        datasetTimestamp:
          format: int64
          type: integer
        s3Path:
          type: string
        etag:
          type: string
        version:
          nullable: true
          type: string
      type: object
    GetAlertsPathsResponse:
      description: GetAlertsPaths API response with a list of alerts
      example:
        items:
        - datasetTimestamp: 6
          s3Path: s3Path
          modelId: modelId
          segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          creationTimestamp: 0
          etag: etag
          id: id
          version: version
          orgId: orgId
        - datasetTimestamp: 6
          s3Path: s3Path
          modelId: modelId
          segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          creationTimestamp: 0
          etag: etag
          id: id
          version: version
          orgId: orgId
      properties:
        items:
          description: A list of alerts
          items:
            $ref: '#/components/schemas/AlertsPath'
          type: array
      required:
      - items
      type: object
    EventsPath:
      description: Metadata for an event path (might contain multiple events)
      example:
        datasetTimestamp: 6
        s3Path: s3Path
        modelId: modelId
        segment:
          tags:
          - value: value
            key: key
          - value: value
            key: key
        creationTimestamp: 0
        etag: etag
        id: id
        version: version
        orgId: orgId
      properties:
        id:
          type: string
        orgId:
          type: string
        modelId:
          type: string
        segment:
          $ref: '#/components/schemas/Segment'
        creationTimestamp:
          format: int64
          type: integer
        datasetTimestamp:
          format: int64
          type: integer
        s3Path:
          type: string
        etag:
          type: string
        version:
          nullable: true
          type: string
      type: object
    GetEventsPathResponse:
      description: BatchGetEvents API response with a list of events
      example:
        items:
        - datasetTimestamp: 6
          s3Path: s3Path
          modelId: modelId
          segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          creationTimestamp: 0
          etag: etag
          id: id
          version: version
          orgId: orgId
        - datasetTimestamp: 6
          s3Path: s3Path
          modelId: modelId
          segment:
            tags:
            - value: value
              key: key
            - value: value
              key: key
          creationTimestamp: 0
          etag: etag
          id: id
          version: version
          orgId: orgId
      properties:
        items:
          description: A list of events
          items:
            $ref: '#/components/schemas/EventsPath'
          type: array
      required:
      - items
      type: object
    UserApiKey:
      description: Response when creating an API key successfully
      example:
        creationTime: creationTime
        expirationTime: expirationTime
        keyId: keyId
        alias: alias
        scopes:
        - scopes
        - scopes
        revoked: true
        userId: userId
        key: key
        orgId: orgId
      properties:
        key:
          description: The full value of the key. This is not persisted in the system
          nullable: true
          type: string
        keyId:
          description: The key id. Can be used to identify keys for a given user
          type: string
        orgId:
          description: The organization that the key belongs to
          type: string
        userId:
          description: The user that the key represents
          type: string
        creationTime:
          description: Creation time in human readable format
          type: string
        expirationTime:
          description: Expiration time in human readable format
          nullable: true
          type: string
        scopes:
          description: Scope of the key
          items:
            type: string
          nullable: true
          type: array
        alias:
          description: Human-readable alias for the key
          nullable: true
          type: string
        revoked:
          description: Whether the key has been revoked
          nullable: true
          type: boolean
      required:
      - creationTime
      - keyId
      - orgId
      - userId
      type: object
    UserApiKeyResponse:
      example:
        key:
          creationTime: creationTime
          expirationTime: expirationTime
          keyId: keyId
          alias: alias
          scopes:
          - scopes
          - scopes
          revoked: true
          userId: userId
          key: key
          orgId: orgId
      properties:
        key:
          $ref: '#/components/schemas/UserApiKey'
      type: object
    ListUserApiKeys:
      description: Response for listing API key metadata
      example:
        items:
        - creationTime: creationTime
          expirationTime: expirationTime
          keyId: keyId
          alias: alias
          scopes:
          - scopes
          - scopes
          revoked: true
          userId: userId
          key: key
          orgId: orgId
        - creationTime: creationTime
          expirationTime: expirationTime
          keyId: keyId
          alias: alias
          scopes:
          - scopes
          - scopes
          revoked: true
          userId: userId
          key: key
          orgId: orgId
      properties:
        items:
          description: A list of all known API key metadata
          items:
            $ref: '#/components/schemas/UserApiKey'
          type: array
          uniqueItems: true
      required:
      - items
      type: object
    GetMembershipsResponse:
      description: Response for the GetMemberships API
      example:
        memberships:
        - default: true
          role: null
          userId: userId
          orgId: orgId
          email: email
        - default: true
          role: null
          userId: userId
          orgId: orgId
          email: email
      properties:
        memberships:
          description: A list of all memberships that a user has.
          items:
            $ref: '#/components/schemas/Membership'
          type: array
          uniqueItems: true
      required:
      - memberships
      type: object
    GetDefaultMembershipResponse:
      example:
        membership:
          default: true
          role: null
          userId: userId
          orgId: orgId
          email: email
      properties:
        membership:
          $ref: '#/components/schemas/Membership'
      type: object
    AddMembershipRequest:
      example:
        default: true
        role: null
        createdBy: createdBy
        orgId: orgId
        email: email
      properties:
        orgId:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        createdBy:
          nullable: true
          type: string
        default:
          nullable: true
          type: boolean
      required:
      - email
      - orgId
      - role
      type: object
    UpdateMembershipRequest:
      example:
        role: null
        orgId: orgId
        email: email
      properties:
        orgId:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
      - email
      - orgId
      - role
      type: object
    RemoveMembershipRequest:
      example:
        orgId: orgId
        email: email
      properties:
        orgId:
          type: string
        email:
          type: string
      required:
      - email
      - orgId
      type: object
    SetDefaultMembershipRequest:
      example:
        userId: userId
        orgId: orgId
      properties:
        orgId:
          type: string
        userId:
          type: string
      required:
      - orgId
      - userId
      type: object
    OrganizationSummary:
      description: Summary about an organization
      example:
        observatoryUrl: observatoryUrl
        domain: domain
        name: name
        notificationEmailAddress: notificationEmailAddress
        emailDomains: emailDomains
        slackWebhook: slackWebhook
        id: id
        subscriptionTier: null
        pagerDutyKey: pagerDutyKey
        notificationSettings:
          slackSettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
          pagerDutySettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
          emailSettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
      properties:
        id:
          type: string
        name:
          type: string
        subscriptionTier:
          $ref: '#/components/schemas/SubscriptionTier'
        domain:
          nullable: true
          type: string
        emailDomains:
          nullable: true
          type: string
        observatoryUrl:
          nullable: true
          type: string
        notificationEmailAddress:
          nullable: true
          type: string
        slackWebhook:
          nullable: true
          type: string
        pagerDutyKey:
          nullable: true
          type: string
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettings'
      required:
      - id
      type: object
    ListOrganizationsResponse:
      description: Response for listing organization
      example:
        internal: true
        items:
        - observatoryUrl: observatoryUrl
          domain: domain
          name: name
          notificationEmailAddress: notificationEmailAddress
          emailDomains: emailDomains
          slackWebhook: slackWebhook
          id: id
          subscriptionTier: null
          pagerDutyKey: pagerDutyKey
          notificationSettings:
            slackSettings:
              dayOfWeek: null
              localMinuteOfHour: 6
              enabled: true
              cadence: null
              local24HourOfDay: 0
              localTimezone: localTimezone
            pagerDutySettings:
              dayOfWeek: null
              localMinuteOfHour: 6
              enabled: true
              cadence: null
              local24HourOfDay: 0
              localTimezone: localTimezone
            emailSettings:
              dayOfWeek: null
              localMinuteOfHour: 6
              enabled: true
              cadence: null
              local24HourOfDay: 0
              localTimezone: localTimezone
        - observatoryUrl: observatoryUrl
          domain: domain
          name: name
          notificationEmailAddress: notificationEmailAddress
          emailDomains: emailDomains
          slackWebhook: slackWebhook
          id: id
          subscriptionTier: null
          pagerDutyKey: pagerDutyKey
          notificationSettings:
            slackSettings:
              dayOfWeek: null
              localMinuteOfHour: 6
              enabled: true
              cadence: null
              local24HourOfDay: 0
              localTimezone: localTimezone
            pagerDutySettings:
              dayOfWeek: null
              localMinuteOfHour: 6
              enabled: true
              cadence: null
              local24HourOfDay: 0
              localTimezone: localTimezone
            emailSettings:
              dayOfWeek: null
              localMinuteOfHour: 6
              enabled: true
              cadence: null
              local24HourOfDay: 0
              localTimezone: localTimezone
      properties:
        items:
          description: A list of all known organization metadata
          items:
            $ref: '#/components/schemas/OrganizationSummary'
          type: array
          uniqueItems: true
        internal:
          type: boolean
      required:
      - items
      type: object
    OrganizationMetadata:
      description: Metadata about an organization
      example:
        creationTime: 0
        notificationEmailAddress: notificationEmailAddress
        emailDomains: emailDomains
        useCloudFront: true
        notificationSettings:
          slackSettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
          pagerDutySettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
          emailSettings:
            dayOfWeek: null
            localMinuteOfHour: 6
            enabled: true
            cadence: null
            local24HourOfDay: 0
            localTimezone: localTimezone
        observatoryUrl: observatoryUrl
        deleted: true
        domain: domain
        name: name
        slackWebhook: slackWebhook
        id: id
        subscriptionTier: null
        pagerDutyKey: pagerDutyKey
      properties:
        id:
          type: string
        name:
          type: string
        subscriptionTier:
          $ref: '#/components/schemas/SubscriptionTier'
        domain:
          nullable: true
          type: string
        emailDomains:
          nullable: true
          type: string
        observatoryUrl:
          nullable: true
          type: string
        notificationEmailAddress:
          nullable: true
          type: string
        slackWebhook:
          nullable: true
          type: string
        pagerDutyKey:
          nullable: true
          type: string
        creationTime:
          format: int64
          type: integer
        notificationSettings:
          $ref: '#/components/schemas/NotificationSettings'
        deleted:
          type: boolean
        useCloudFront:
          nullable: true
          type: boolean
      required:
      - id
      type: object
    MarketplaceDimensions:
      enum:
      - FREE
      - MODELS_2
      - MODELS_3
      - MODELS_4
      - MODELS_5
      - BY_QUANTITY
      - ENTERPRISE
      type: string
    AWSMarketplaceMetadata:
      example:
        awsMarketplaceCustomerId: awsMarketplaceCustomerId
        expirationUpdateTime: 2000-01-23T04:56:07.000+00:00
        createdBy: createdBy
        expirationTime: 2000-01-23T04:56:07.000+00:00
        awsMarketplaceProductCode: awsMarketplaceProductCode
        dimension: null
        orgId: orgId
      properties:
        orgId:
          type: string
        awsMarketplaceCustomerId:
          type: string
        awsMarketplaceProductCode:
          type: string
        createdBy:
          nullable: true
          type: string
        dimension:
          $ref: '#/components/schemas/MarketplaceDimensions'
        expirationTime:
          format: date-time
          type: string
        expirationUpdateTime:
          format: date-time
          type: string
      required:
      - awsMarketplaceCustomerId
      - awsMarketplaceProductCode
      - dimension
      - expirationTime
      - expirationUpdateTime
      - orgId
      type: object
    GetMarketplaceMetadataResponse:
      description: Response for listing organization
      example:
        metadata:
          awsMarketplaceCustomerId: awsMarketplaceCustomerId
          expirationUpdateTime: 2000-01-23T04:56:07.000+00:00
          createdBy: createdBy
          expirationTime: 2000-01-23T04:56:07.000+00:00
          awsMarketplaceProductCode: awsMarketplaceProductCode
          dimension: null
          orgId: orgId
      properties:
        metadata:
          $ref: '#/components/schemas/AWSMarketplaceMetadata'
      required:
      - metadata
      type: object
    CreateSessionResponse:
      description: Response for creating sessions
      example:
        token: token
      properties:
        token:
          description: "Token for the created session, to be passsed into other session\
            \ APIs."
          type: string
      required:
      - token
      type: object
    CreateSessionUploadResponse:
      description: Response for creating session uploads
      example:
        uploadUrl: uploadUrl
      properties:
        uploadUrl:
          description: "Token for the created session, to be passed into other session\
            \ APIs."
          type: string
      required:
      - uploadUrl
      type: object
    CloseSessionResponse:
      description: Response for closing a session
      example:
        whylabsUrl: whylabsUrl
      properties:
        whylabsUrl:
          description: URL where the session can be viewed.
          type: string
      required:
      - whylabsUrl
      type: object
    SessionMetadata:
      description: Response for getting sessions.
      example:
        modelId: modelId
        closed: true
        sessionId: sessionId
        userId: userId
        orgId: orgId
      properties:
        sessionId:
          description: The id of the session
          type: string
        orgId:
          description: The org id of the session
          type: string
        modelId:
          description: The model id of the session. There should only be a single
            model.
          type: string
        closed:
          description: Whether or not the session is open for uploading dataset profiles
            to.
          type: boolean
        userId:
          description: The generated user id for the session.
          type: string
      required:
      - session
      type: object
    GetSessionResponse:
      description: Response for getting sessions.
      example:
        session:
          modelId: modelId
          closed: true
          sessionId: sessionId
          userId: userId
          orgId: orgId
      properties:
        session:
          $ref: '#/components/schemas/SessionMetadata'
      required:
      - session
      type: object
    ReferenceProfileItemResponse:
      description: A single reference item response.
      example:
        path: path
        datasetTimestamp: 6
        modelId: modelId
        uploadTimestamp: 0
        alias: alias
        id: id
        orgId: orgId
      properties:
        orgId:
          type: string
        modelId:
          type: string
        alias:
          type: string
        id:
          type: string
        uploadTimestamp:
          format: int64
          type: integer
        datasetTimestamp:
          format: int64
          nullable: true
          type: integer
        path:
          type: string
      type: object
    DeleteDatasetProfilesResponse:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    DeleteAnalyzerResultsResponse:
      example:
        id: id
      properties:
        id:
          type: string
      type: object
    FeatureFlags:
      description: Feature flag state
      example:
        flagValues:
          key: true
      properties:
        flagValues:
          additionalProperties:
            type: boolean
          description: The state of feature flags
          type: object
      required:
      - flagValues
      type: object
    PutRequestMonitorRunConfig_request:
      properties:
        analyzer_ids:
          example: drift-analyzer
          items:
            type: string
          nullable: false
          type: array
        overwrite:
          nullable: false
          type: boolean
        start_timestamp:
          example: 1577836800000
          format: int64
          nullable: false
          type: integer
        end_timestamp:
          example: 1893456000000
          format: int64
          nullable: false
          type: integer
      type: object
    Log_request:
      properties:
        file:
          description: The Dataset Profile log entry
          format: binary
          nullable: false
          required:
          - "true"
          type: string
      type: object
    UpdateOrg_request:
      properties:
        org_id:
          description: "The unique ID of an organization. If an organization with\
            \ this ID does not exist, this method will throw an exception."
          nullable: false
          type: string
      type: object
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
