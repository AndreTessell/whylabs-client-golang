/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FeatureFlags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeatureFlags{}

// FeatureFlags Feature flag state
type FeatureFlags struct {
	// The state of feature flags
	FlagValues map[string]bool `json:"flagValues"`
}

// NewFeatureFlags instantiates a new FeatureFlags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureFlags(flagValues map[string]bool) *FeatureFlags {
	this := FeatureFlags{}
	this.FlagValues = flagValues
	return &this
}

// NewFeatureFlagsWithDefaults instantiates a new FeatureFlags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureFlagsWithDefaults() *FeatureFlags {
	this := FeatureFlags{}
	return &this
}

// GetFlagValues returns the FlagValues field value
func (o *FeatureFlags) GetFlagValues() map[string]bool {
	if o == nil {
		var ret map[string]bool
		return ret
	}

	return o.FlagValues
}

// GetFlagValuesOk returns a tuple with the FlagValues field value
// and a boolean to check if the value has been set.
func (o *FeatureFlags) GetFlagValuesOk() (*map[string]bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FlagValues, true
}

// SetFlagValues sets field value
func (o *FeatureFlags) SetFlagValues(v map[string]bool) {
	o.FlagValues = v
}

func (o FeatureFlags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeatureFlags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["flagValues"] = o.FlagValues
	return toSerialize, nil
}

type NullableFeatureFlags struct {
	value *FeatureFlags
	isSet bool
}

func (v NullableFeatureFlags) Get() *FeatureFlags {
	return v.value
}

func (v *NullableFeatureFlags) Set(val *FeatureFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureFlags(val *FeatureFlags) *NullableFeatureFlags {
	return &NullableFeatureFlags{value: val, isSet: true}
}

func (v NullableFeatureFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


