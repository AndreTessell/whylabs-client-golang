/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// OrganizationsApiService OrganizationsApi service
type OrganizationsApiService service

type ApiCreateOrganizationRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	name *string
	subscriptionTier *SubscriptionTier
	domain *string
	emailDomains *string
	overrideId *string
	observatoryUrl *string
	notificationEmailAddress *string
	slackWebhook *string
	pagerDutyKey *string
}

// The name of the organization
func (r ApiCreateOrganizationRequest) Name(name string) ApiCreateOrganizationRequest {
	r.name = &name
	return r
}

// Organization&#39;s subscription tier. Should be PAID for real customers
func (r ApiCreateOrganizationRequest) SubscriptionTier(subscriptionTier SubscriptionTier) ApiCreateOrganizationRequest {
	r.subscriptionTier = &subscriptionTier
	return r
}

// Domain associated with this organization
func (r ApiCreateOrganizationRequest) Domain(domain string) ApiCreateOrganizationRequest {
	r.domain = &domain
	return r
}

// Email domains associated with this organization, as a comma separated list
func (r ApiCreateOrganizationRequest) EmailDomains(emailDomains string) ApiCreateOrganizationRequest {
	r.emailDomains = &emailDomains
	return r
}

// Custom ID. If this ID is invalid this method will throw an exception
func (r ApiCreateOrganizationRequest) OverrideId(overrideId string) ApiCreateOrganizationRequest {
	r.overrideId = &overrideId
	return r
}

// Url that users of this organization will be redirected to in some cases (such as via Siren notifications). NOTE: should NOT be followed by a trailing slash!
func (r ApiCreateOrganizationRequest) ObservatoryUrl(observatoryUrl string) ApiCreateOrganizationRequest {
	r.observatoryUrl = &observatoryUrl
	return r
}

// Email address that should be used for notifications for this organization
func (r ApiCreateOrganizationRequest) NotificationEmailAddress(notificationEmailAddress string) ApiCreateOrganizationRequest {
	r.notificationEmailAddress = &notificationEmailAddress
	return r
}

// Slack Webhook that should be used for notifications for this organization
func (r ApiCreateOrganizationRequest) SlackWebhook(slackWebhook string) ApiCreateOrganizationRequest {
	r.slackWebhook = &slackWebhook
	return r
}

func (r ApiCreateOrganizationRequest) PagerDutyKey(pagerDutyKey string) ApiCreateOrganizationRequest {
	r.pagerDutyKey = &pagerDutyKey
	return r
}

func (r ApiCreateOrganizationRequest) Execute() (*OrganizationSummary, *http.Response, error) {
	return r.ApiService.CreateOrganizationExecute(r)
}

/*
CreateOrganization Create an organization

Create an organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateOrganizationRequest
*/
func (a *OrganizationsApiService) CreateOrganization(ctx context.Context) ApiCreateOrganizationRequest {
	return ApiCreateOrganizationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrganizationSummary
func (a *OrganizationsApiService) CreateOrganizationExecute(r ApiCreateOrganizationRequest) (*OrganizationSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.CreateOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	if r.subscriptionTier != nil {
		parameterAddToQuery(localVarQueryParams, "subscription_tier", r.subscriptionTier, "")
	}
	if r.domain != nil {
		parameterAddToQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.emailDomains != nil {
		parameterAddToQuery(localVarQueryParams, "email_domains", r.emailDomains, "")
	}
	if r.overrideId != nil {
		parameterAddToQuery(localVarQueryParams, "override_id", r.overrideId, "")
	}
	if r.observatoryUrl != nil {
		parameterAddToQuery(localVarQueryParams, "observatory_url", r.observatoryUrl, "")
	}
	if r.notificationEmailAddress != nil {
		parameterAddToQuery(localVarQueryParams, "notification_email_address", r.notificationEmailAddress, "")
	}
	if r.slackWebhook != nil {
		parameterAddToQuery(localVarQueryParams, "slack_webhook", r.slackWebhook, "")
	}
	if r.pagerDutyKey != nil {
		parameterAddToQuery(localVarQueryParams, "pager_duty_key", r.pagerDutyKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OrganizationSummary
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOrganizationRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	orgId string
}

func (r ApiDeleteOrganizationRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.DeleteOrganizationExecute(r)
}

/*
DeleteOrganization Delete an org

Delete an org

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiDeleteOrganizationRequest
*/
func (a *OrganizationsApiService) DeleteOrganization(ctx context.Context, orgId string) ApiDeleteOrganizationRequest {
	return ApiDeleteOrganizationRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *OrganizationsApiService) DeleteOrganizationExecute(r ApiDeleteOrganizationRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.DeleteOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v map[string]interface{}
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAWSMarketplaceMetadataRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	orgId string
}

func (r ApiGetAWSMarketplaceMetadataRequest) Execute() (*GetMarketplaceMetadataResponse, *http.Response, error) {
	return r.ApiService.GetAWSMarketplaceMetadataExecute(r)
}

/*
GetAWSMarketplaceMetadata Get marketplace metadata for an org if any exists.

Get marketplace metadata for an org if any exists.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId
 @return ApiGetAWSMarketplaceMetadataRequest
*/
func (a *OrganizationsApiService) GetAWSMarketplaceMetadata(ctx context.Context, orgId string) ApiGetAWSMarketplaceMetadataRequest {
	return ApiGetAWSMarketplaceMetadataRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return GetMarketplaceMetadataResponse
func (a *OrganizationsApiService) GetAWSMarketplaceMetadataExecute(r ApiGetAWSMarketplaceMetadataRequest) (*GetMarketplaceMetadataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GetMarketplaceMetadataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.GetAWSMarketplaceMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/marketplace-metadata/"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetMarketplaceMetadataResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrganizationRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	orgId string
}

func (r ApiGetOrganizationRequest) Execute() (*OrganizationMetadata, *http.Response, error) {
	return r.ApiService.GetOrganizationExecute(r)
}

/*
GetOrganization Get the metadata about an organization.

Returns various metadata about an organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The unique ID of an organization
 @return ApiGetOrganizationRequest
*/
func (a *OrganizationsApiService) GetOrganization(ctx context.Context, orgId string) ApiGetOrganizationRequest {
	return ApiGetOrganizationRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return OrganizationMetadata
func (a *OrganizationsApiService) GetOrganizationExecute(r ApiGetOrganizationRequest) (*OrganizationMetadata, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationMetadata
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.GetOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OrganizationMetadata
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOrganizationsRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
}

func (r ApiListOrganizationsRequest) Execute() (*ListOrganizationsResponse, *http.Response, error) {
	return r.ApiService.ListOrganizationsExecute(r)
}

/*
ListOrganizations Get a list of all of the organization ids.

Get a list of all of the organization ids.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListOrganizationsRequest
*/
func (a *OrganizationsApiService) ListOrganizations(ctx context.Context) ApiListOrganizationsRequest {
	return ApiListOrganizationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListOrganizationsResponse
func (a *OrganizationsApiService) ListOrganizationsExecute(r ApiListOrganizationsRequest) (*ListOrganizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListOrganizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.ListOrganizations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ListOrganizationsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPartiallyUpdateOrgRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	updateOrgRequest *UpdateOrgRequest
	name *string
	subscriptionTier *SubscriptionTier
	domain *string
	observatoryUrl *string
	notificationEmailAddress *string
	slackWebhook *string
}

func (r ApiPartiallyUpdateOrgRequest) UpdateOrgRequest(updateOrgRequest UpdateOrgRequest) ApiPartiallyUpdateOrgRequest {
	r.updateOrgRequest = &updateOrgRequest
	return r
}

// The name of the organization
func (r ApiPartiallyUpdateOrgRequest) Name(name string) ApiPartiallyUpdateOrgRequest {
	r.name = &name
	return r
}

// Organization&#39;s subscription tier. Should be PAID for real customers
func (r ApiPartiallyUpdateOrgRequest) SubscriptionTier(subscriptionTier SubscriptionTier) ApiPartiallyUpdateOrgRequest {
	r.subscriptionTier = &subscriptionTier
	return r
}

// Domain associated with this organization
func (r ApiPartiallyUpdateOrgRequest) Domain(domain string) ApiPartiallyUpdateOrgRequest {
	r.domain = &domain
	return r
}

// Url that users of this organization will be redirected to in some cases (such as via Siren notifications). NOTE: should NOT be followed by a trailing slash!
func (r ApiPartiallyUpdateOrgRequest) ObservatoryUrl(observatoryUrl string) ApiPartiallyUpdateOrgRequest {
	r.observatoryUrl = &observatoryUrl
	return r
}

// Email address that should be used for notifications for this organization
func (r ApiPartiallyUpdateOrgRequest) NotificationEmailAddress(notificationEmailAddress string) ApiPartiallyUpdateOrgRequest {
	r.notificationEmailAddress = &notificationEmailAddress
	return r
}

// Slack Webhook that should be used for notifications for this organization
func (r ApiPartiallyUpdateOrgRequest) SlackWebhook(slackWebhook string) ApiPartiallyUpdateOrgRequest {
	r.slackWebhook = &slackWebhook
	return r
}

func (r ApiPartiallyUpdateOrgRequest) Execute() (*OrganizationSummary, *http.Response, error) {
	return r.ApiService.PartiallyUpdateOrgExecute(r)
}

/*
PartiallyUpdateOrg Update some fields of an organization to non-null values

Update some fields of an organization to non-null values, leaving all other existing values the same

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPartiallyUpdateOrgRequest

Deprecated
*/
func (a *OrganizationsApiService) PartiallyUpdateOrg(ctx context.Context) ApiPartiallyUpdateOrgRequest {
	return ApiPartiallyUpdateOrgRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrganizationSummary
// Deprecated
func (a *OrganizationsApiService) PartiallyUpdateOrgExecute(r ApiPartiallyUpdateOrgRequest) (*OrganizationSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.PartiallyUpdateOrg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/partial/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateOrgRequest == nil {
		return localVarReturnValue, nil, reportError("updateOrgRequest is required and must be specified")
	}

	if r.name != nil {
		parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.subscriptionTier != nil {
		parameterAddToQuery(localVarQueryParams, "subscription_tier", r.subscriptionTier, "")
	}
	if r.domain != nil {
		parameterAddToQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.observatoryUrl != nil {
		parameterAddToQuery(localVarQueryParams, "observatory_url", r.observatoryUrl, "")
	}
	if r.notificationEmailAddress != nil {
		parameterAddToQuery(localVarQueryParams, "notification_email_address", r.notificationEmailAddress, "")
	}
	if r.slackWebhook != nil {
		parameterAddToQuery(localVarQueryParams, "slack_webhook", r.slackWebhook, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrgRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OrganizationSummary
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPartiallyUpdateOrganizationRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	orgId string
	name *string
	subscriptionTier *SubscriptionTier
	domain *string
	emailDomains *string
	observatoryUrl *string
	notificationEmailAddress *string
	slackWebhook *string
	pagerDutyKey *string
}

// The name of the organization
func (r ApiPartiallyUpdateOrganizationRequest) Name(name string) ApiPartiallyUpdateOrganizationRequest {
	r.name = &name
	return r
}

// Organization&#39;s subscription tier. Should be PAID for real customers
func (r ApiPartiallyUpdateOrganizationRequest) SubscriptionTier(subscriptionTier SubscriptionTier) ApiPartiallyUpdateOrganizationRequest {
	r.subscriptionTier = &subscriptionTier
	return r
}

// Domain associated with this organization
func (r ApiPartiallyUpdateOrganizationRequest) Domain(domain string) ApiPartiallyUpdateOrganizationRequest {
	r.domain = &domain
	return r
}

// Email domains associated with this organization, as a comma separated list
func (r ApiPartiallyUpdateOrganizationRequest) EmailDomains(emailDomains string) ApiPartiallyUpdateOrganizationRequest {
	r.emailDomains = &emailDomains
	return r
}

// Url that users of this organization will be redirected to in some cases (such as via Siren notifications). NOTE: should NOT be followed by a trailing slash!
func (r ApiPartiallyUpdateOrganizationRequest) ObservatoryUrl(observatoryUrl string) ApiPartiallyUpdateOrganizationRequest {
	r.observatoryUrl = &observatoryUrl
	return r
}

// Email address that should be used for notifications for this organization
func (r ApiPartiallyUpdateOrganizationRequest) NotificationEmailAddress(notificationEmailAddress string) ApiPartiallyUpdateOrganizationRequest {
	r.notificationEmailAddress = &notificationEmailAddress
	return r
}

// Slack Webhook that should be used for notifications for this organization
func (r ApiPartiallyUpdateOrganizationRequest) SlackWebhook(slackWebhook string) ApiPartiallyUpdateOrganizationRequest {
	r.slackWebhook = &slackWebhook
	return r
}

func (r ApiPartiallyUpdateOrganizationRequest) PagerDutyKey(pagerDutyKey string) ApiPartiallyUpdateOrganizationRequest {
	r.pagerDutyKey = &pagerDutyKey
	return r
}

func (r ApiPartiallyUpdateOrganizationRequest) Execute() (*OrganizationSummary, *http.Response, error) {
	return r.ApiService.PartiallyUpdateOrganizationExecute(r)
}

/*
PartiallyUpdateOrganization Update some fields of an organization to non-null values

Update some fields of an organization to non-null values, leaving all other existing values the same

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The unique ID of an organization. If an organization with this ID does not exist, this method will throw an exception.
 @return ApiPartiallyUpdateOrganizationRequest
*/
func (a *OrganizationsApiService) PartiallyUpdateOrganization(ctx context.Context, orgId string) ApiPartiallyUpdateOrganizationRequest {
	return ApiPartiallyUpdateOrganizationRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return OrganizationSummary
func (a *OrganizationsApiService) PartiallyUpdateOrganizationExecute(r ApiPartiallyUpdateOrganizationRequest) (*OrganizationSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.PartiallyUpdateOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/partial/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.subscriptionTier != nil {
		parameterAddToQuery(localVarQueryParams, "subscription_tier", r.subscriptionTier, "")
	}
	if r.domain != nil {
		parameterAddToQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.emailDomains != nil {
		parameterAddToQuery(localVarQueryParams, "email_domains", r.emailDomains, "")
	}
	if r.observatoryUrl != nil {
		parameterAddToQuery(localVarQueryParams, "observatory_url", r.observatoryUrl, "")
	}
	if r.notificationEmailAddress != nil {
		parameterAddToQuery(localVarQueryParams, "notification_email_address", r.notificationEmailAddress, "")
	}
	if r.slackWebhook != nil {
		parameterAddToQuery(localVarQueryParams, "slack_webhook", r.slackWebhook, "")
	}
	if r.pagerDutyKey != nil {
		parameterAddToQuery(localVarQueryParams, "pager_duty_key", r.pagerDutyKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OrganizationSummary
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOrgRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	name *string
	updateOrgRequest *UpdateOrgRequest
	subscriptionTier *SubscriptionTier
	domain *string
	emailDomains *string
	observatoryUrl *string
	notificationEmailAddress *string
	slackWebhook *string
	pagerDutyKey *string
}

// The name of the organization
func (r ApiUpdateOrgRequest) Name(name string) ApiUpdateOrgRequest {
	r.name = &name
	return r
}

func (r ApiUpdateOrgRequest) UpdateOrgRequest(updateOrgRequest UpdateOrgRequest) ApiUpdateOrgRequest {
	r.updateOrgRequest = &updateOrgRequest
	return r
}

// Organization&#39;s subscription tier. Should be PAID for real customers
func (r ApiUpdateOrgRequest) SubscriptionTier(subscriptionTier SubscriptionTier) ApiUpdateOrgRequest {
	r.subscriptionTier = &subscriptionTier
	return r
}

// Domain associated with this organization
func (r ApiUpdateOrgRequest) Domain(domain string) ApiUpdateOrgRequest {
	r.domain = &domain
	return r
}

// Email domains associated with this organization, as a comma separated list
func (r ApiUpdateOrgRequest) EmailDomains(emailDomains string) ApiUpdateOrgRequest {
	r.emailDomains = &emailDomains
	return r
}

// Url that users of this organization will be redirected to in some cases (such as via Siren notifications). NOTE: should NOT be followed by a trailing slash!
func (r ApiUpdateOrgRequest) ObservatoryUrl(observatoryUrl string) ApiUpdateOrgRequest {
	r.observatoryUrl = &observatoryUrl
	return r
}

// Email address that should be used for notifications for this organization
func (r ApiUpdateOrgRequest) NotificationEmailAddress(notificationEmailAddress string) ApiUpdateOrgRequest {
	r.notificationEmailAddress = &notificationEmailAddress
	return r
}

// Slack Webhook that should be used for notifications for this organization
func (r ApiUpdateOrgRequest) SlackWebhook(slackWebhook string) ApiUpdateOrgRequest {
	r.slackWebhook = &slackWebhook
	return r
}

func (r ApiUpdateOrgRequest) PagerDutyKey(pagerDutyKey string) ApiUpdateOrgRequest {
	r.pagerDutyKey = &pagerDutyKey
	return r
}

func (r ApiUpdateOrgRequest) Execute() (*OrganizationSummary, *http.Response, error) {
	return r.ApiService.UpdateOrgExecute(r)
}

/*
UpdateOrg Update an existing organization

Update all fields of an existing organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateOrgRequest

Deprecated
*/
func (a *OrganizationsApiService) UpdateOrg(ctx context.Context) ApiUpdateOrgRequest {
	return ApiUpdateOrgRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OrganizationSummary
// Deprecated
func (a *OrganizationsApiService) UpdateOrgExecute(r ApiUpdateOrgRequest) (*OrganizationSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.UpdateOrg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.updateOrgRequest == nil {
		return localVarReturnValue, nil, reportError("updateOrgRequest is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	if r.subscriptionTier != nil {
		parameterAddToQuery(localVarQueryParams, "subscription_tier", r.subscriptionTier, "")
	}
	if r.domain != nil {
		parameterAddToQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.emailDomains != nil {
		parameterAddToQuery(localVarQueryParams, "email_domains", r.emailDomains, "")
	}
	if r.observatoryUrl != nil {
		parameterAddToQuery(localVarQueryParams, "observatory_url", r.observatoryUrl, "")
	}
	if r.notificationEmailAddress != nil {
		parameterAddToQuery(localVarQueryParams, "notification_email_address", r.notificationEmailAddress, "")
	}
	if r.slackWebhook != nil {
		parameterAddToQuery(localVarQueryParams, "slack_webhook", r.slackWebhook, "")
	}
	if r.pagerDutyKey != nil {
		parameterAddToQuery(localVarQueryParams, "pager_duty_key", r.pagerDutyKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateOrgRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OrganizationSummary
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOrganizationRequest struct {
	ctx context.Context
	ApiService *OrganizationsApiService
	orgId string
	name *string
	subscriptionTier *SubscriptionTier
	domain *string
	emailDomains *string
	observatoryUrl *string
	notificationEmailAddress *string
	slackWebhook *string
	pagerDutyKey *string
}

// The name of the organization
func (r ApiUpdateOrganizationRequest) Name(name string) ApiUpdateOrganizationRequest {
	r.name = &name
	return r
}

// Organization&#39;s subscription tier. Should be PAID for real customers
func (r ApiUpdateOrganizationRequest) SubscriptionTier(subscriptionTier SubscriptionTier) ApiUpdateOrganizationRequest {
	r.subscriptionTier = &subscriptionTier
	return r
}

// Domain associated with this organization
func (r ApiUpdateOrganizationRequest) Domain(domain string) ApiUpdateOrganizationRequest {
	r.domain = &domain
	return r
}

// Email domains associated with this organization, as a comma separated list
func (r ApiUpdateOrganizationRequest) EmailDomains(emailDomains string) ApiUpdateOrganizationRequest {
	r.emailDomains = &emailDomains
	return r
}

// Url that users of this organization will be redirected to in some cases (such as via Siren notifications). NOTE: should NOT be followed by a trailing slash!
func (r ApiUpdateOrganizationRequest) ObservatoryUrl(observatoryUrl string) ApiUpdateOrganizationRequest {
	r.observatoryUrl = &observatoryUrl
	return r
}

// Email address that should be used for notifications for this organization
func (r ApiUpdateOrganizationRequest) NotificationEmailAddress(notificationEmailAddress string) ApiUpdateOrganizationRequest {
	r.notificationEmailAddress = &notificationEmailAddress
	return r
}

// Slack Webhook that should be used for notifications for this organization
func (r ApiUpdateOrganizationRequest) SlackWebhook(slackWebhook string) ApiUpdateOrganizationRequest {
	r.slackWebhook = &slackWebhook
	return r
}

func (r ApiUpdateOrganizationRequest) PagerDutyKey(pagerDutyKey string) ApiUpdateOrganizationRequest {
	r.pagerDutyKey = &pagerDutyKey
	return r
}

func (r ApiUpdateOrganizationRequest) Execute() (*OrganizationSummary, *http.Response, error) {
	return r.ApiService.UpdateOrganizationExecute(r)
}

/*
UpdateOrganization Update an existing organization

Update all fields of an existing organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId The unique ID of an organization. If an organization with this ID does not exist, this method will throw an exception.
 @return ApiUpdateOrganizationRequest
*/
func (a *OrganizationsApiService) UpdateOrganization(ctx context.Context, orgId string) ApiUpdateOrganizationRequest {
	return ApiUpdateOrganizationRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
	}
}

// Execute executes the request
//  @return OrganizationSummary
func (a *OrganizationsApiService) UpdateOrganizationExecute(r ApiUpdateOrganizationRequest) (*OrganizationSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrganizationSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrganizationsApiService.UpdateOrganization")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	parameterAddToQuery(localVarQueryParams, "name", r.name, "")
	if r.subscriptionTier != nil {
		parameterAddToQuery(localVarQueryParams, "subscription_tier", r.subscriptionTier, "")
	}
	if r.domain != nil {
		parameterAddToQuery(localVarQueryParams, "domain", r.domain, "")
	}
	if r.emailDomains != nil {
		parameterAddToQuery(localVarQueryParams, "email_domains", r.emailDomains, "")
	}
	if r.observatoryUrl != nil {
		parameterAddToQuery(localVarQueryParams, "observatory_url", r.observatoryUrl, "")
	}
	if r.notificationEmailAddress != nil {
		parameterAddToQuery(localVarQueryParams, "notification_email_address", r.notificationEmailAddress, "")
	}
	if r.slackWebhook != nil {
		parameterAddToQuery(localVarQueryParams, "slack_webhook", r.slackWebhook, "")
	}
	if r.pagerDutyKey != nil {
		parameterAddToQuery(localVarQueryParams, "pager_duty_key", r.pagerDutyKey, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OrganizationSummary
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
