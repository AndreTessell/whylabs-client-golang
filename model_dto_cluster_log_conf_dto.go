/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DTOClusterLogConfDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DTOClusterLogConfDTO{}

// DTOClusterLogConfDTO struct for DTOClusterLogConfDTO
type DTOClusterLogConfDTO struct {
	Dbfs *DTODbfsStorageInfoDTO `json:"dbfs,omitempty"`
	S3 *DTOS3StorageInfoDTO `json:"s3,omitempty"`
}

// NewDTOClusterLogConfDTO instantiates a new DTOClusterLogConfDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDTOClusterLogConfDTO() *DTOClusterLogConfDTO {
	this := DTOClusterLogConfDTO{}
	return &this
}

// NewDTOClusterLogConfDTOWithDefaults instantiates a new DTOClusterLogConfDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDTOClusterLogConfDTOWithDefaults() *DTOClusterLogConfDTO {
	this := DTOClusterLogConfDTO{}
	return &this
}

// GetDbfs returns the Dbfs field value if set, zero value otherwise.
func (o *DTOClusterLogConfDTO) GetDbfs() DTODbfsStorageInfoDTO {
	if o == nil || isNil(o.Dbfs) {
		var ret DTODbfsStorageInfoDTO
		return ret
	}
	return *o.Dbfs
}

// GetDbfsOk returns a tuple with the Dbfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOClusterLogConfDTO) GetDbfsOk() (*DTODbfsStorageInfoDTO, bool) {
	if o == nil || isNil(o.Dbfs) {
		return nil, false
	}
	return o.Dbfs, true
}

// HasDbfs returns a boolean if a field has been set.
func (o *DTOClusterLogConfDTO) HasDbfs() bool {
	if o != nil && !isNil(o.Dbfs) {
		return true
	}

	return false
}

// SetDbfs gets a reference to the given DTODbfsStorageInfoDTO and assigns it to the Dbfs field.
func (o *DTOClusterLogConfDTO) SetDbfs(v DTODbfsStorageInfoDTO) {
	o.Dbfs = &v
}

// GetS3 returns the S3 field value if set, zero value otherwise.
func (o *DTOClusterLogConfDTO) GetS3() DTOS3StorageInfoDTO {
	if o == nil || isNil(o.S3) {
		var ret DTOS3StorageInfoDTO
		return ret
	}
	return *o.S3
}

// GetS3Ok returns a tuple with the S3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOClusterLogConfDTO) GetS3Ok() (*DTOS3StorageInfoDTO, bool) {
	if o == nil || isNil(o.S3) {
		return nil, false
	}
	return o.S3, true
}

// HasS3 returns a boolean if a field has been set.
func (o *DTOClusterLogConfDTO) HasS3() bool {
	if o != nil && !isNil(o.S3) {
		return true
	}

	return false
}

// SetS3 gets a reference to the given DTOS3StorageInfoDTO and assigns it to the S3 field.
func (o *DTOClusterLogConfDTO) SetS3(v DTOS3StorageInfoDTO) {
	o.S3 = &v
}

func (o DTOClusterLogConfDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DTOClusterLogConfDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Dbfs) {
		toSerialize["dbfs"] = o.Dbfs
	}
	if !isNil(o.S3) {
		toSerialize["s3"] = o.S3
	}
	return toSerialize, nil
}

type NullableDTOClusterLogConfDTO struct {
	value *DTOClusterLogConfDTO
	isSet bool
}

func (v NullableDTOClusterLogConfDTO) Get() *DTOClusterLogConfDTO {
	return v.value
}

func (v *NullableDTOClusterLogConfDTO) Set(val *DTOClusterLogConfDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDTOClusterLogConfDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDTOClusterLogConfDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDTOClusterLogConfDTO(val *DTOClusterLogConfDTO) *NullableDTOClusterLogConfDTO {
	return &NullableDTOClusterLogConfDTO{value: val, isSet: true}
}

func (v NullableDTOClusterLogConfDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDTOClusterLogConfDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


