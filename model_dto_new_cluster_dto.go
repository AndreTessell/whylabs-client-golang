/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DTONewClusterDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DTONewClusterDTO{}

// DTONewClusterDTO struct for DTONewClusterDTO
type DTONewClusterDTO struct {
	SparkVersion *string `json:"sparkVersion,omitempty"`
	AwsAttributes *DTOAwsAttributesDTO `json:"awsAttributes,omitempty"`
	NodeTypeId *string `json:"nodeTypeId,omitempty"`
	NumWorkers *int32 `json:"numWorkers,omitempty"`
	AutoScale *DTOAutoScaleDTO `json:"autoScale,omitempty"`
	ClusterName *string `json:"clusterName,omitempty"`
	SparkConf *map[string]string `json:"sparkConf,omitempty"`
	DriverNodeTypeId *string `json:"driverNodeTypeId,omitempty"`
	SshPublicKeys []map[string]interface{} `json:"sshPublicKeys,omitempty"`
	CustomTags *map[string]string `json:"customTags,omitempty"`
	ClusterLogConf *DTOClusterLogConfDTO `json:"clusterLogConf,omitempty"`
	SparkEnvVars *map[string]string `json:"sparkEnvVars,omitempty"`
	AutoTerminationMinutes *int32 `json:"autoTerminationMinutes,omitempty"`
	EnableElasticDisk *bool `json:"enableElasticDisk,omitempty"`
}

// NewDTONewClusterDTO instantiates a new DTONewClusterDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDTONewClusterDTO() *DTONewClusterDTO {
	this := DTONewClusterDTO{}
	return &this
}

// NewDTONewClusterDTOWithDefaults instantiates a new DTONewClusterDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDTONewClusterDTOWithDefaults() *DTONewClusterDTO {
	this := DTONewClusterDTO{}
	return &this
}

// GetSparkVersion returns the SparkVersion field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetSparkVersion() string {
	if o == nil || isNil(o.SparkVersion) {
		var ret string
		return ret
	}
	return *o.SparkVersion
}

// GetSparkVersionOk returns a tuple with the SparkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetSparkVersionOk() (*string, bool) {
	if o == nil || isNil(o.SparkVersion) {
		return nil, false
	}
	return o.SparkVersion, true
}

// HasSparkVersion returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasSparkVersion() bool {
	if o != nil && !isNil(o.SparkVersion) {
		return true
	}

	return false
}

// SetSparkVersion gets a reference to the given string and assigns it to the SparkVersion field.
func (o *DTONewClusterDTO) SetSparkVersion(v string) {
	o.SparkVersion = &v
}

// GetAwsAttributes returns the AwsAttributes field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetAwsAttributes() DTOAwsAttributesDTO {
	if o == nil || isNil(o.AwsAttributes) {
		var ret DTOAwsAttributesDTO
		return ret
	}
	return *o.AwsAttributes
}

// GetAwsAttributesOk returns a tuple with the AwsAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetAwsAttributesOk() (*DTOAwsAttributesDTO, bool) {
	if o == nil || isNil(o.AwsAttributes) {
		return nil, false
	}
	return o.AwsAttributes, true
}

// HasAwsAttributes returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasAwsAttributes() bool {
	if o != nil && !isNil(o.AwsAttributes) {
		return true
	}

	return false
}

// SetAwsAttributes gets a reference to the given DTOAwsAttributesDTO and assigns it to the AwsAttributes field.
func (o *DTONewClusterDTO) SetAwsAttributes(v DTOAwsAttributesDTO) {
	o.AwsAttributes = &v
}

// GetNodeTypeId returns the NodeTypeId field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetNodeTypeId() string {
	if o == nil || isNil(o.NodeTypeId) {
		var ret string
		return ret
	}
	return *o.NodeTypeId
}

// GetNodeTypeIdOk returns a tuple with the NodeTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetNodeTypeIdOk() (*string, bool) {
	if o == nil || isNil(o.NodeTypeId) {
		return nil, false
	}
	return o.NodeTypeId, true
}

// HasNodeTypeId returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasNodeTypeId() bool {
	if o != nil && !isNil(o.NodeTypeId) {
		return true
	}

	return false
}

// SetNodeTypeId gets a reference to the given string and assigns it to the NodeTypeId field.
func (o *DTONewClusterDTO) SetNodeTypeId(v string) {
	o.NodeTypeId = &v
}

// GetNumWorkers returns the NumWorkers field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetNumWorkers() int32 {
	if o == nil || isNil(o.NumWorkers) {
		var ret int32
		return ret
	}
	return *o.NumWorkers
}

// GetNumWorkersOk returns a tuple with the NumWorkers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetNumWorkersOk() (*int32, bool) {
	if o == nil || isNil(o.NumWorkers) {
		return nil, false
	}
	return o.NumWorkers, true
}

// HasNumWorkers returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasNumWorkers() bool {
	if o != nil && !isNil(o.NumWorkers) {
		return true
	}

	return false
}

// SetNumWorkers gets a reference to the given int32 and assigns it to the NumWorkers field.
func (o *DTONewClusterDTO) SetNumWorkers(v int32) {
	o.NumWorkers = &v
}

// GetAutoScale returns the AutoScale field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetAutoScale() DTOAutoScaleDTO {
	if o == nil || isNil(o.AutoScale) {
		var ret DTOAutoScaleDTO
		return ret
	}
	return *o.AutoScale
}

// GetAutoScaleOk returns a tuple with the AutoScale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetAutoScaleOk() (*DTOAutoScaleDTO, bool) {
	if o == nil || isNil(o.AutoScale) {
		return nil, false
	}
	return o.AutoScale, true
}

// HasAutoScale returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasAutoScale() bool {
	if o != nil && !isNil(o.AutoScale) {
		return true
	}

	return false
}

// SetAutoScale gets a reference to the given DTOAutoScaleDTO and assigns it to the AutoScale field.
func (o *DTONewClusterDTO) SetAutoScale(v DTOAutoScaleDTO) {
	o.AutoScale = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetClusterName() string {
	if o == nil || isNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetClusterNameOk() (*string, bool) {
	if o == nil || isNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasClusterName() bool {
	if o != nil && !isNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *DTONewClusterDTO) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetSparkConf returns the SparkConf field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetSparkConf() map[string]string {
	if o == nil || isNil(o.SparkConf) {
		var ret map[string]string
		return ret
	}
	return *o.SparkConf
}

// GetSparkConfOk returns a tuple with the SparkConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetSparkConfOk() (*map[string]string, bool) {
	if o == nil || isNil(o.SparkConf) {
		return nil, false
	}
	return o.SparkConf, true
}

// HasSparkConf returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasSparkConf() bool {
	if o != nil && !isNil(o.SparkConf) {
		return true
	}

	return false
}

// SetSparkConf gets a reference to the given map[string]string and assigns it to the SparkConf field.
func (o *DTONewClusterDTO) SetSparkConf(v map[string]string) {
	o.SparkConf = &v
}

// GetDriverNodeTypeId returns the DriverNodeTypeId field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetDriverNodeTypeId() string {
	if o == nil || isNil(o.DriverNodeTypeId) {
		var ret string
		return ret
	}
	return *o.DriverNodeTypeId
}

// GetDriverNodeTypeIdOk returns a tuple with the DriverNodeTypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetDriverNodeTypeIdOk() (*string, bool) {
	if o == nil || isNil(o.DriverNodeTypeId) {
		return nil, false
	}
	return o.DriverNodeTypeId, true
}

// HasDriverNodeTypeId returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasDriverNodeTypeId() bool {
	if o != nil && !isNil(o.DriverNodeTypeId) {
		return true
	}

	return false
}

// SetDriverNodeTypeId gets a reference to the given string and assigns it to the DriverNodeTypeId field.
func (o *DTONewClusterDTO) SetDriverNodeTypeId(v string) {
	o.DriverNodeTypeId = &v
}

// GetSshPublicKeys returns the SshPublicKeys field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetSshPublicKeys() []map[string]interface{} {
	if o == nil || isNil(o.SshPublicKeys) {
		var ret []map[string]interface{}
		return ret
	}
	return o.SshPublicKeys
}

// GetSshPublicKeysOk returns a tuple with the SshPublicKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetSshPublicKeysOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.SshPublicKeys) {
		return nil, false
	}
	return o.SshPublicKeys, true
}

// HasSshPublicKeys returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasSshPublicKeys() bool {
	if o != nil && !isNil(o.SshPublicKeys) {
		return true
	}

	return false
}

// SetSshPublicKeys gets a reference to the given []map[string]interface{} and assigns it to the SshPublicKeys field.
func (o *DTONewClusterDTO) SetSshPublicKeys(v []map[string]interface{}) {
	o.SshPublicKeys = v
}

// GetCustomTags returns the CustomTags field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetCustomTags() map[string]string {
	if o == nil || isNil(o.CustomTags) {
		var ret map[string]string
		return ret
	}
	return *o.CustomTags
}

// GetCustomTagsOk returns a tuple with the CustomTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetCustomTagsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.CustomTags) {
		return nil, false
	}
	return o.CustomTags, true
}

// HasCustomTags returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasCustomTags() bool {
	if o != nil && !isNil(o.CustomTags) {
		return true
	}

	return false
}

// SetCustomTags gets a reference to the given map[string]string and assigns it to the CustomTags field.
func (o *DTONewClusterDTO) SetCustomTags(v map[string]string) {
	o.CustomTags = &v
}

// GetClusterLogConf returns the ClusterLogConf field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetClusterLogConf() DTOClusterLogConfDTO {
	if o == nil || isNil(o.ClusterLogConf) {
		var ret DTOClusterLogConfDTO
		return ret
	}
	return *o.ClusterLogConf
}

// GetClusterLogConfOk returns a tuple with the ClusterLogConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetClusterLogConfOk() (*DTOClusterLogConfDTO, bool) {
	if o == nil || isNil(o.ClusterLogConf) {
		return nil, false
	}
	return o.ClusterLogConf, true
}

// HasClusterLogConf returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasClusterLogConf() bool {
	if o != nil && !isNil(o.ClusterLogConf) {
		return true
	}

	return false
}

// SetClusterLogConf gets a reference to the given DTOClusterLogConfDTO and assigns it to the ClusterLogConf field.
func (o *DTONewClusterDTO) SetClusterLogConf(v DTOClusterLogConfDTO) {
	o.ClusterLogConf = &v
}

// GetSparkEnvVars returns the SparkEnvVars field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetSparkEnvVars() map[string]string {
	if o == nil || isNil(o.SparkEnvVars) {
		var ret map[string]string
		return ret
	}
	return *o.SparkEnvVars
}

// GetSparkEnvVarsOk returns a tuple with the SparkEnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetSparkEnvVarsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.SparkEnvVars) {
		return nil, false
	}
	return o.SparkEnvVars, true
}

// HasSparkEnvVars returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasSparkEnvVars() bool {
	if o != nil && !isNil(o.SparkEnvVars) {
		return true
	}

	return false
}

// SetSparkEnvVars gets a reference to the given map[string]string and assigns it to the SparkEnvVars field.
func (o *DTONewClusterDTO) SetSparkEnvVars(v map[string]string) {
	o.SparkEnvVars = &v
}

// GetAutoTerminationMinutes returns the AutoTerminationMinutes field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetAutoTerminationMinutes() int32 {
	if o == nil || isNil(o.AutoTerminationMinutes) {
		var ret int32
		return ret
	}
	return *o.AutoTerminationMinutes
}

// GetAutoTerminationMinutesOk returns a tuple with the AutoTerminationMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetAutoTerminationMinutesOk() (*int32, bool) {
	if o == nil || isNil(o.AutoTerminationMinutes) {
		return nil, false
	}
	return o.AutoTerminationMinutes, true
}

// HasAutoTerminationMinutes returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasAutoTerminationMinutes() bool {
	if o != nil && !isNil(o.AutoTerminationMinutes) {
		return true
	}

	return false
}

// SetAutoTerminationMinutes gets a reference to the given int32 and assigns it to the AutoTerminationMinutes field.
func (o *DTONewClusterDTO) SetAutoTerminationMinutes(v int32) {
	o.AutoTerminationMinutes = &v
}

// GetEnableElasticDisk returns the EnableElasticDisk field value if set, zero value otherwise.
func (o *DTONewClusterDTO) GetEnableElasticDisk() bool {
	if o == nil || isNil(o.EnableElasticDisk) {
		var ret bool
		return ret
	}
	return *o.EnableElasticDisk
}

// GetEnableElasticDiskOk returns a tuple with the EnableElasticDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTONewClusterDTO) GetEnableElasticDiskOk() (*bool, bool) {
	if o == nil || isNil(o.EnableElasticDisk) {
		return nil, false
	}
	return o.EnableElasticDisk, true
}

// HasEnableElasticDisk returns a boolean if a field has been set.
func (o *DTONewClusterDTO) HasEnableElasticDisk() bool {
	if o != nil && !isNil(o.EnableElasticDisk) {
		return true
	}

	return false
}

// SetEnableElasticDisk gets a reference to the given bool and assigns it to the EnableElasticDisk field.
func (o *DTONewClusterDTO) SetEnableElasticDisk(v bool) {
	o.EnableElasticDisk = &v
}

func (o DTONewClusterDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DTONewClusterDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SparkVersion) {
		toSerialize["sparkVersion"] = o.SparkVersion
	}
	if !isNil(o.AwsAttributes) {
		toSerialize["awsAttributes"] = o.AwsAttributes
	}
	if !isNil(o.NodeTypeId) {
		toSerialize["nodeTypeId"] = o.NodeTypeId
	}
	if !isNil(o.NumWorkers) {
		toSerialize["numWorkers"] = o.NumWorkers
	}
	if !isNil(o.AutoScale) {
		toSerialize["autoScale"] = o.AutoScale
	}
	if !isNil(o.ClusterName) {
		toSerialize["clusterName"] = o.ClusterName
	}
	if !isNil(o.SparkConf) {
		toSerialize["sparkConf"] = o.SparkConf
	}
	if !isNil(o.DriverNodeTypeId) {
		toSerialize["driverNodeTypeId"] = o.DriverNodeTypeId
	}
	if !isNil(o.SshPublicKeys) {
		toSerialize["sshPublicKeys"] = o.SshPublicKeys
	}
	if !isNil(o.CustomTags) {
		toSerialize["customTags"] = o.CustomTags
	}
	if !isNil(o.ClusterLogConf) {
		toSerialize["clusterLogConf"] = o.ClusterLogConf
	}
	if !isNil(o.SparkEnvVars) {
		toSerialize["sparkEnvVars"] = o.SparkEnvVars
	}
	if !isNil(o.AutoTerminationMinutes) {
		toSerialize["autoTerminationMinutes"] = o.AutoTerminationMinutes
	}
	if !isNil(o.EnableElasticDisk) {
		toSerialize["enableElasticDisk"] = o.EnableElasticDisk
	}
	return toSerialize, nil
}

type NullableDTONewClusterDTO struct {
	value *DTONewClusterDTO
	isSet bool
}

func (v NullableDTONewClusterDTO) Get() *DTONewClusterDTO {
	return v.value
}

func (v *NullableDTONewClusterDTO) Set(val *DTONewClusterDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDTONewClusterDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDTONewClusterDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDTONewClusterDTO(val *DTONewClusterDTO) *NullableDTONewClusterDTO {
	return &NullableDTONewClusterDTO{value: val, isSet: true}
}

func (v NullableDTONewClusterDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDTONewClusterDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


