/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WhyLogsMetric the model 'WhyLogsMetric'
type WhyLogsMetric string

// List of WhyLogsMetric
const (
	TOTAL_COUNT WhyLogsMetric = "TotalCount"
	MEDIAN WhyLogsMetric = "Median"
	MIN WhyLogsMetric = "Min"
	MAX WhyLogsMetric = "Max"
	STD_DEV WhyLogsMetric = "StdDev"
	MEAN WhyLogsMetric = "Mean"
)

// All allowed values of WhyLogsMetric enum
var AllowedWhyLogsMetricEnumValues = []WhyLogsMetric{
	"TotalCount",
	"Median",
	"Min",
	"Max",
	"StdDev",
	"Mean",
}

func (v *WhyLogsMetric) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WhyLogsMetric(value)
	for _, existing := range AllowedWhyLogsMetricEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WhyLogsMetric", value)
}

// NewWhyLogsMetricFromValue returns a pointer to a valid WhyLogsMetric
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWhyLogsMetricFromValue(v string) (*WhyLogsMetric, error) {
	ev := WhyLogsMetric(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WhyLogsMetric: valid values are %v", v, AllowedWhyLogsMetricEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WhyLogsMetric) IsValid() bool {
	for _, existing := range AllowedWhyLogsMetricEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WhyLogsMetric value
func (v WhyLogsMetric) Ptr() *WhyLogsMetric {
	return &v
}

type NullableWhyLogsMetric struct {
	value *WhyLogsMetric
	isSet bool
}

func (v NullableWhyLogsMetric) Get() *WhyLogsMetric {
	return v.value
}

func (v *NullableWhyLogsMetric) Set(val *WhyLogsMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableWhyLogsMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableWhyLogsMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhyLogsMetric(val *WhyLogsMetric) *NullableWhyLogsMetric {
	return &NullableWhyLogsMetric{value: val, isSet: true}
}

func (v NullableWhyLogsMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhyLogsMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

