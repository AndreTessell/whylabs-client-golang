/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ColumnSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ColumnSchema{}

// ColumnSchema Column schema for a given column
type ColumnSchema struct {
	// We can classify these columns into various grouping. Currently we only support 'input' and 'output'
	Classifier string `json:"classifier"`
	// The data type of the columns. Setting this field affects the default grouping (i.e integral columns)
	DataType string `json:"dataType"`
	// Whether a column should be discrete or continuous. Changing this column will change the default grouping (discrete columns vs. continuous columns
	Discreteness string `json:"discreteness"`
}

// NewColumnSchema instantiates a new ColumnSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewColumnSchema(classifier string, dataType string, discreteness string) *ColumnSchema {
	this := ColumnSchema{}
	this.Classifier = classifier
	this.DataType = dataType
	this.Discreteness = discreteness
	return &this
}

// NewColumnSchemaWithDefaults instantiates a new ColumnSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewColumnSchemaWithDefaults() *ColumnSchema {
	this := ColumnSchema{}
	return &this
}

// GetClassifier returns the Classifier field value
func (o *ColumnSchema) GetClassifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Classifier
}

// GetClassifierOk returns a tuple with the Classifier field value
// and a boolean to check if the value has been set.
func (o *ColumnSchema) GetClassifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Classifier, true
}

// SetClassifier sets field value
func (o *ColumnSchema) SetClassifier(v string) {
	o.Classifier = v
}

// GetDataType returns the DataType field value
func (o *ColumnSchema) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *ColumnSchema) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *ColumnSchema) SetDataType(v string) {
	o.DataType = v
}

// GetDiscreteness returns the Discreteness field value
func (o *ColumnSchema) GetDiscreteness() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Discreteness
}

// GetDiscretenessOk returns a tuple with the Discreteness field value
// and a boolean to check if the value has been set.
func (o *ColumnSchema) GetDiscretenessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discreteness, true
}

// SetDiscreteness sets field value
func (o *ColumnSchema) SetDiscreteness(v string) {
	o.Discreteness = v
}

func (o ColumnSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ColumnSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["classifier"] = o.Classifier
	toSerialize["dataType"] = o.DataType
	toSerialize["discreteness"] = o.Discreteness
	return toSerialize, nil
}

type NullableColumnSchema struct {
	value *ColumnSchema
	isSet bool
}

func (v NullableColumnSchema) Get() *ColumnSchema {
	return v.value
}

func (v *NullableColumnSchema) Set(val *ColumnSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableColumnSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableColumnSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableColumnSchema(val *ColumnSchema) *NullableColumnSchema {
	return &NullableColumnSchema{value: val, isSet: true}
}

func (v NullableColumnSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableColumnSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


