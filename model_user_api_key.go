/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserApiKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserApiKey{}

// UserApiKey Response when creating an API key successfully
type UserApiKey struct {
	// The full value of the key. This is not persisted in the system
	Key NullableString `json:"key,omitempty"`
	// The key id. Can be used to identify keys for a given user
	KeyId string `json:"keyId"`
	// The organization that the key belongs to
	OrgId string `json:"orgId"`
	// The user that the key represents
	UserId string `json:"userId"`
	// Creation time in human readable format
	CreationTime string `json:"creationTime"`
	// Expiration time in human readable format
	ExpirationTime NullableString `json:"expirationTime,omitempty"`
	// Scope of the key
	Scopes []string `json:"scopes,omitempty"`
	// Human-readable alias for the key
	Alias NullableString `json:"alias,omitempty"`
	// Whether the key has been revoked
	Revoked NullableBool `json:"revoked,omitempty"`
}

// NewUserApiKey instantiates a new UserApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserApiKey(keyId string, orgId string, userId string, creationTime string) *UserApiKey {
	this := UserApiKey{}
	this.KeyId = keyId
	this.OrgId = orgId
	this.UserId = userId
	this.CreationTime = creationTime
	return &this
}

// NewUserApiKeyWithDefaults instantiates a new UserApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserApiKeyWithDefaults() *UserApiKey {
	this := UserApiKey{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserApiKey) GetKey() string {
	if o == nil || isNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserApiKey) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *UserApiKey) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *UserApiKey) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *UserApiKey) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *UserApiKey) UnsetKey() {
	o.Key.Unset()
}

// GetKeyId returns the KeyId field value
func (o *UserApiKey) GetKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyId
}

// GetKeyIdOk returns a tuple with the KeyId field value
// and a boolean to check if the value has been set.
func (o *UserApiKey) GetKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyId, true
}

// SetKeyId sets field value
func (o *UserApiKey) SetKeyId(v string) {
	o.KeyId = v
}

// GetOrgId returns the OrgId field value
func (o *UserApiKey) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *UserApiKey) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *UserApiKey) SetOrgId(v string) {
	o.OrgId = v
}

// GetUserId returns the UserId field value
func (o *UserApiKey) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *UserApiKey) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *UserApiKey) SetUserId(v string) {
	o.UserId = v
}

// GetCreationTime returns the CreationTime field value
func (o *UserApiKey) GetCreationTime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *UserApiKey) GetCreationTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *UserApiKey) SetCreationTime(v string) {
	o.CreationTime = v
}

// GetExpirationTime returns the ExpirationTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserApiKey) GetExpirationTime() string {
	if o == nil || isNil(o.ExpirationTime.Get()) {
		var ret string
		return ret
	}
	return *o.ExpirationTime.Get()
}

// GetExpirationTimeOk returns a tuple with the ExpirationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserApiKey) GetExpirationTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpirationTime.Get(), o.ExpirationTime.IsSet()
}

// HasExpirationTime returns a boolean if a field has been set.
func (o *UserApiKey) HasExpirationTime() bool {
	if o != nil && o.ExpirationTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationTime gets a reference to the given NullableString and assigns it to the ExpirationTime field.
func (o *UserApiKey) SetExpirationTime(v string) {
	o.ExpirationTime.Set(&v)
}
// SetExpirationTimeNil sets the value for ExpirationTime to be an explicit nil
func (o *UserApiKey) SetExpirationTimeNil() {
	o.ExpirationTime.Set(nil)
}

// UnsetExpirationTime ensures that no value is present for ExpirationTime, not even an explicit nil
func (o *UserApiKey) UnsetExpirationTime() {
	o.ExpirationTime.Unset()
}

// GetScopes returns the Scopes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserApiKey) GetScopes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserApiKey) GetScopesOk() ([]string, bool) {
	if o == nil || isNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *UserApiKey) HasScopes() bool {
	if o != nil && isNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *UserApiKey) SetScopes(v []string) {
	o.Scopes = v
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserApiKey) GetAlias() string {
	if o == nil || isNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserApiKey) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *UserApiKey) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *UserApiKey) SetAlias(v string) {
	o.Alias.Set(&v)
}
// SetAliasNil sets the value for Alias to be an explicit nil
func (o *UserApiKey) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *UserApiKey) UnsetAlias() {
	o.Alias.Unset()
}

// GetRevoked returns the Revoked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserApiKey) GetRevoked() bool {
	if o == nil || isNil(o.Revoked.Get()) {
		var ret bool
		return ret
	}
	return *o.Revoked.Get()
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserApiKey) GetRevokedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Revoked.Get(), o.Revoked.IsSet()
}

// HasRevoked returns a boolean if a field has been set.
func (o *UserApiKey) HasRevoked() bool {
	if o != nil && o.Revoked.IsSet() {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given NullableBool and assigns it to the Revoked field.
func (o *UserApiKey) SetRevoked(v bool) {
	o.Revoked.Set(&v)
}
// SetRevokedNil sets the value for Revoked to be an explicit nil
func (o *UserApiKey) SetRevokedNil() {
	o.Revoked.Set(nil)
}

// UnsetRevoked ensures that no value is present for Revoked, not even an explicit nil
func (o *UserApiKey) UnsetRevoked() {
	o.Revoked.Unset()
}

func (o UserApiKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserApiKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	toSerialize["keyId"] = o.KeyId
	toSerialize["orgId"] = o.OrgId
	toSerialize["userId"] = o.UserId
	toSerialize["creationTime"] = o.CreationTime
	if o.ExpirationTime.IsSet() {
		toSerialize["expirationTime"] = o.ExpirationTime.Get()
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if o.Revoked.IsSet() {
		toSerialize["revoked"] = o.Revoked.Get()
	}
	return toSerialize, nil
}

type NullableUserApiKey struct {
	value *UserApiKey
	isSet bool
}

func (v NullableUserApiKey) Get() *UserApiKey {
	return v.value
}

func (v *NullableUserApiKey) Set(val *UserApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableUserApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableUserApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserApiKey(val *UserApiKey) *NullableUserApiKey {
	return &NullableUserApiKey{value: val, isSet: true}
}

func (v NullableUserApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


