/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DatasetProfileApiService DatasetProfileApi service
type DatasetProfileApiService service

type ApiDeleteAnalyzerResultsRequest struct {
	ctx context.Context
	ApiService *DatasetProfileApiService
	orgId string
	datasetId string
	startTimestamp *int64
	endTimestamp *int64
}

// Optional, scope deleting analyzer results more recent than the timestamp
func (r ApiDeleteAnalyzerResultsRequest) StartTimestamp(startTimestamp int64) ApiDeleteAnalyzerResultsRequest {
	r.startTimestamp = &startTimestamp
	return r
}

// Optional, scope deleting analyzer results older than the timestamp
func (r ApiDeleteAnalyzerResultsRequest) EndTimestamp(endTimestamp int64) ApiDeleteAnalyzerResultsRequest {
	r.endTimestamp = &endTimestamp
	return r
}

func (r ApiDeleteAnalyzerResultsRequest) Execute() (*DeleteAnalyzerResultsResponse, *http.Response, error) {
	return r.ApiService.DeleteAnalyzerResultsExecute(r)
}

/*
DeleteAnalyzerResults Deletes a set of analyzer results

Deletes a set of analyzer results. Returns false if scheduling deletion encountered some error.

        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param datasetId The unique dataset ID in your company.
 @return ApiDeleteAnalyzerResultsRequest
*/
func (a *DatasetProfileApiService) DeleteAnalyzerResults(ctx context.Context, orgId string, datasetId string) ApiDeleteAnalyzerResultsRequest {
	return ApiDeleteAnalyzerResultsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		datasetId: datasetId,
	}
}

// Execute executes the request
//  @return DeleteAnalyzerResultsResponse
func (a *DatasetProfileApiService) DeleteAnalyzerResultsExecute(r ApiDeleteAnalyzerResultsRequest) (*DeleteAnalyzerResultsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteAnalyzerResultsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatasetProfileApiService.DeleteAnalyzerResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/analyzer-results"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dataset_id"+"}", url.PathEscape(parameterValueToString(r.datasetId, "datasetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.startTimestamp != nil {
		parameterAddToQuery(localVarQueryParams, "start_timestamp", r.startTimestamp, "")
	}
	if r.endTimestamp != nil {
		parameterAddToQuery(localVarQueryParams, "end_timestamp", r.endTimestamp, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeleteAnalyzerResultsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDatasetProfilesRequest struct {
	ctx context.Context
	ApiService *DatasetProfileApiService
	orgId string
	datasetId string
	profileStartTimestamp *int64
	profileEndTimestamp *int64
	beforeUploadTimestamp *int64
}

// Optional, scope deleting profiles more recently than the timestamp
func (r ApiDeleteDatasetProfilesRequest) ProfileStartTimestamp(profileStartTimestamp int64) ApiDeleteDatasetProfilesRequest {
	r.profileStartTimestamp = &profileStartTimestamp
	return r
}

// Optional, scope deleting profiles older than the timestamp
func (r ApiDeleteDatasetProfilesRequest) ProfileEndTimestamp(profileEndTimestamp int64) ApiDeleteDatasetProfilesRequest {
	r.profileEndTimestamp = &profileEndTimestamp
	return r
}

// Optional, scope deleting profiles uploaded prior to the timestamp
func (r ApiDeleteDatasetProfilesRequest) BeforeUploadTimestamp(beforeUploadTimestamp int64) ApiDeleteDatasetProfilesRequest {
	r.beforeUploadTimestamp = &beforeUploadTimestamp
	return r
}

func (r ApiDeleteDatasetProfilesRequest) Execute() (*DeleteDatasetProfilesResponse, *http.Response, error) {
	return r.ApiService.DeleteDatasetProfilesExecute(r)
}

/*
DeleteDatasetProfiles Deletes a set of dataset profiles

Deletes a set of dataset profiles. Returns false if scheduling deletion encountered some error.

        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param datasetId The unique dataset ID in your company.
 @return ApiDeleteDatasetProfilesRequest
*/
func (a *DatasetProfileApiService) DeleteDatasetProfiles(ctx context.Context, orgId string, datasetId string) ApiDeleteDatasetProfilesRequest {
	return ApiDeleteDatasetProfilesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		datasetId: datasetId,
	}
}

// Execute executes the request
//  @return DeleteDatasetProfilesResponse
func (a *DatasetProfileApiService) DeleteDatasetProfilesExecute(r ApiDeleteDatasetProfilesRequest) (*DeleteDatasetProfilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteDatasetProfilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatasetProfileApiService.DeleteDatasetProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dataset_id"+"}", url.PathEscape(parameterValueToString(r.datasetId, "datasetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.profileStartTimestamp != nil {
		parameterAddToQuery(localVarQueryParams, "profile_start_timestamp", r.profileStartTimestamp, "")
	}
	if r.profileEndTimestamp != nil {
		parameterAddToQuery(localVarQueryParams, "profile_end_timestamp", r.profileEndTimestamp, "")
	}
	if r.beforeUploadTimestamp != nil {
		parameterAddToQuery(localVarQueryParams, "before_upload_timestamp", r.beforeUploadTimestamp, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DeleteDatasetProfilesResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteReferenceProfileRequest struct {
	ctx context.Context
	ApiService *DatasetProfileApiService
	orgId string
	modelId string
	referenceId string
}

func (r ApiDeleteReferenceProfileRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteReferenceProfileExecute(r)
}

/*
DeleteReferenceProfile Delete a single reference profile

Internal API. Delete a a Reference Profile. Returns false if the deletion encountered some error.

        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param modelId The unique model ID in your company.
 @param referenceId Unique reference Id.
 @return ApiDeleteReferenceProfileRequest
*/
func (a *DatasetProfileApiService) DeleteReferenceProfile(ctx context.Context, orgId string, modelId string, referenceId string) ApiDeleteReferenceProfileRequest {
	return ApiDeleteReferenceProfileRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		modelId: modelId,
		referenceId: referenceId,
	}
}

// Execute executes the request
//  @return bool
func (a *DatasetProfileApiService) DeleteReferenceProfileExecute(r ApiDeleteReferenceProfileRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatasetProfileApiService.DeleteReferenceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reference_id"+"}", url.PathEscape(parameterValueToString(r.referenceId, "referenceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v bool
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetReferenceProfileRequest struct {
	ctx context.Context
	ApiService *DatasetProfileApiService
	orgId string
	modelId string
	referenceId string
}

func (r ApiGetReferenceProfileRequest) Execute() (*ReferenceProfileItemResponse, *http.Response, error) {
	return r.ApiService.GetReferenceProfileExecute(r)
}

/*
GetReferenceProfile Returns a single reference profile

Internal API. Returns a Reference Profile.

        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param modelId The unique model ID in your company.
 @param referenceId Unique reference Id.
 @return ApiGetReferenceProfileRequest
*/
func (a *DatasetProfileApiService) GetReferenceProfile(ctx context.Context, orgId string, modelId string, referenceId string) ApiGetReferenceProfileRequest {
	return ApiGetReferenceProfileRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		modelId: modelId,
		referenceId: referenceId,
	}
}

// Execute executes the request
//  @return ReferenceProfileItemResponse
func (a *DatasetProfileApiService) GetReferenceProfileExecute(r ApiGetReferenceProfileRequest) (*ReferenceProfileItemResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReferenceProfileItemResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatasetProfileApiService.GetReferenceProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reference_id"+"}", url.PathEscape(parameterValueToString(r.referenceId, "referenceId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ReferenceProfileItemResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListReferenceProfilesRequest struct {
	ctx context.Context
	ApiService *DatasetProfileApiService
	orgId string
	modelId string
	fromEpoch *int64
	toEpoch *int64
}

// Milli epoch time that represents the end of the time range to query.
func (r ApiListReferenceProfilesRequest) FromEpoch(fromEpoch int64) ApiListReferenceProfilesRequest {
	r.fromEpoch = &fromEpoch
	return r
}

// Milli epoch time that represents the end of the time range to query.
func (r ApiListReferenceProfilesRequest) ToEpoch(toEpoch int64) ApiListReferenceProfilesRequest {
	r.toEpoch = &toEpoch
	return r
}

func (r ApiListReferenceProfilesRequest) Execute() ([]ReferenceProfileItemResponse, *http.Response, error) {
	return r.ApiService.ListReferenceProfilesExecute(r)
}

/*
ListReferenceProfiles Returns a list for reference profiles

Internal API. Returns a list of Reference Profiles.

        

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgId Your company's unique organization ID
 @param modelId The unique model ID in your company.
 @return ApiListReferenceProfilesRequest
*/
func (a *DatasetProfileApiService) ListReferenceProfiles(ctx context.Context, orgId string, modelId string) ApiListReferenceProfilesRequest {
	return ApiListReferenceProfilesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return []ReferenceProfileItemResponse
func (a *DatasetProfileApiService) ListReferenceProfilesExecute(r ApiListReferenceProfilesRequest) ([]ReferenceProfileItemResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ReferenceProfileItemResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DatasetProfileApiService.ListReferenceProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"org_id"+"}", url.PathEscape(parameterValueToString(r.orgId, "orgId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromEpoch != nil {
		parameterAddToQuery(localVarQueryParams, "from_epoch", r.fromEpoch, "")
	}
	if r.toEpoch != nil {
		parameterAddToQuery(localVarQueryParams, "to_epoch", r.toEpoch, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v []ReferenceProfileItemResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
