/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DTOJobEmailNotificationsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DTOJobEmailNotificationsDTO{}

// DTOJobEmailNotificationsDTO struct for DTOJobEmailNotificationsDTO
type DTOJobEmailNotificationsDTO struct {
	OnFailure []map[string]interface{} `json:"onFailure,omitempty"`
	OnStart []map[string]interface{} `json:"onStart,omitempty"`
	OnSuccess []map[string]interface{} `json:"onSuccess,omitempty"`
	NoAlertForSkippedRuns *bool `json:"noAlertForSkippedRuns,omitempty"`
}

// NewDTOJobEmailNotificationsDTO instantiates a new DTOJobEmailNotificationsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDTOJobEmailNotificationsDTO() *DTOJobEmailNotificationsDTO {
	this := DTOJobEmailNotificationsDTO{}
	return &this
}

// NewDTOJobEmailNotificationsDTOWithDefaults instantiates a new DTOJobEmailNotificationsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDTOJobEmailNotificationsDTOWithDefaults() *DTOJobEmailNotificationsDTO {
	this := DTOJobEmailNotificationsDTO{}
	return &this
}

// GetOnFailure returns the OnFailure field value if set, zero value otherwise.
func (o *DTOJobEmailNotificationsDTO) GetOnFailure() []map[string]interface{} {
	if o == nil || isNil(o.OnFailure) {
		var ret []map[string]interface{}
		return ret
	}
	return o.OnFailure
}

// GetOnFailureOk returns a tuple with the OnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobEmailNotificationsDTO) GetOnFailureOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.OnFailure) {
		return nil, false
	}
	return o.OnFailure, true
}

// HasOnFailure returns a boolean if a field has been set.
func (o *DTOJobEmailNotificationsDTO) HasOnFailure() bool {
	if o != nil && !isNil(o.OnFailure) {
		return true
	}

	return false
}

// SetOnFailure gets a reference to the given []map[string]interface{} and assigns it to the OnFailure field.
func (o *DTOJobEmailNotificationsDTO) SetOnFailure(v []map[string]interface{}) {
	o.OnFailure = v
}

// GetOnStart returns the OnStart field value if set, zero value otherwise.
func (o *DTOJobEmailNotificationsDTO) GetOnStart() []map[string]interface{} {
	if o == nil || isNil(o.OnStart) {
		var ret []map[string]interface{}
		return ret
	}
	return o.OnStart
}

// GetOnStartOk returns a tuple with the OnStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobEmailNotificationsDTO) GetOnStartOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.OnStart) {
		return nil, false
	}
	return o.OnStart, true
}

// HasOnStart returns a boolean if a field has been set.
func (o *DTOJobEmailNotificationsDTO) HasOnStart() bool {
	if o != nil && !isNil(o.OnStart) {
		return true
	}

	return false
}

// SetOnStart gets a reference to the given []map[string]interface{} and assigns it to the OnStart field.
func (o *DTOJobEmailNotificationsDTO) SetOnStart(v []map[string]interface{}) {
	o.OnStart = v
}

// GetOnSuccess returns the OnSuccess field value if set, zero value otherwise.
func (o *DTOJobEmailNotificationsDTO) GetOnSuccess() []map[string]interface{} {
	if o == nil || isNil(o.OnSuccess) {
		var ret []map[string]interface{}
		return ret
	}
	return o.OnSuccess
}

// GetOnSuccessOk returns a tuple with the OnSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobEmailNotificationsDTO) GetOnSuccessOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.OnSuccess) {
		return nil, false
	}
	return o.OnSuccess, true
}

// HasOnSuccess returns a boolean if a field has been set.
func (o *DTOJobEmailNotificationsDTO) HasOnSuccess() bool {
	if o != nil && !isNil(o.OnSuccess) {
		return true
	}

	return false
}

// SetOnSuccess gets a reference to the given []map[string]interface{} and assigns it to the OnSuccess field.
func (o *DTOJobEmailNotificationsDTO) SetOnSuccess(v []map[string]interface{}) {
	o.OnSuccess = v
}

// GetNoAlertForSkippedRuns returns the NoAlertForSkippedRuns field value if set, zero value otherwise.
func (o *DTOJobEmailNotificationsDTO) GetNoAlertForSkippedRuns() bool {
	if o == nil || isNil(o.NoAlertForSkippedRuns) {
		var ret bool
		return ret
	}
	return *o.NoAlertForSkippedRuns
}

// GetNoAlertForSkippedRunsOk returns a tuple with the NoAlertForSkippedRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DTOJobEmailNotificationsDTO) GetNoAlertForSkippedRunsOk() (*bool, bool) {
	if o == nil || isNil(o.NoAlertForSkippedRuns) {
		return nil, false
	}
	return o.NoAlertForSkippedRuns, true
}

// HasNoAlertForSkippedRuns returns a boolean if a field has been set.
func (o *DTOJobEmailNotificationsDTO) HasNoAlertForSkippedRuns() bool {
	if o != nil && !isNil(o.NoAlertForSkippedRuns) {
		return true
	}

	return false
}

// SetNoAlertForSkippedRuns gets a reference to the given bool and assigns it to the NoAlertForSkippedRuns field.
func (o *DTOJobEmailNotificationsDTO) SetNoAlertForSkippedRuns(v bool) {
	o.NoAlertForSkippedRuns = &v
}

func (o DTOJobEmailNotificationsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DTOJobEmailNotificationsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OnFailure) {
		toSerialize["onFailure"] = o.OnFailure
	}
	if !isNil(o.OnStart) {
		toSerialize["onStart"] = o.OnStart
	}
	if !isNil(o.OnSuccess) {
		toSerialize["onSuccess"] = o.OnSuccess
	}
	if !isNil(o.NoAlertForSkippedRuns) {
		toSerialize["noAlertForSkippedRuns"] = o.NoAlertForSkippedRuns
	}
	return toSerialize, nil
}

type NullableDTOJobEmailNotificationsDTO struct {
	value *DTOJobEmailNotificationsDTO
	isSet bool
}

func (v NullableDTOJobEmailNotificationsDTO) Get() *DTOJobEmailNotificationsDTO {
	return v.value
}

func (v *NullableDTOJobEmailNotificationsDTO) Set(val *DTOJobEmailNotificationsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableDTOJobEmailNotificationsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableDTOJobEmailNotificationsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDTOJobEmailNotificationsDTO(val *DTOJobEmailNotificationsDTO) *NullableDTOJobEmailNotificationsDTO {
	return &NullableDTOJobEmailNotificationsDTO{value: val, isSet: true}
}

func (v NullableDTOJobEmailNotificationsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDTOJobEmailNotificationsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


