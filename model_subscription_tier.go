/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SubscriptionTier the model 'SubscriptionTier'
type SubscriptionTier string

// List of SubscriptionTier
const (
	FREE SubscriptionTier = "FREE"
	PAID SubscriptionTier = "PAID"
	AWS_MARKETPLACE SubscriptionTier = "AWS_MARKETPLACE"
)

// All allowed values of SubscriptionTier enum
var AllowedSubscriptionTierEnumValues = []SubscriptionTier{
	"FREE",
	"PAID",
	"AWS_MARKETPLACE",
}

func (v *SubscriptionTier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionTier(value)
	for _, existing := range AllowedSubscriptionTierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionTier", value)
}

// NewSubscriptionTierFromValue returns a pointer to a valid SubscriptionTier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionTierFromValue(v string) (*SubscriptionTier, error) {
	ev := SubscriptionTier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionTier: valid values are %v", v, AllowedSubscriptionTierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionTier) IsValid() bool {
	for _, existing := range AllowedSubscriptionTierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionTier value
func (v SubscriptionTier) Ptr() *SubscriptionTier {
	return &v
}

type NullableSubscriptionTier struct {
	value *SubscriptionTier
	isSet bool
}

func (v NullableSubscriptionTier) Get() *SubscriptionTier {
	return v.value
}

func (v *NullableSubscriptionTier) Set(val *SubscriptionTier) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionTier) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionTier(val *SubscriptionTier) *NullableSubscriptionTier {
	return &NullableSubscriptionTier{value: val, isSet: true}
}

func (v NullableSubscriptionTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

