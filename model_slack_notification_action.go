/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SlackNotificationAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlackNotificationAction{}

// SlackNotificationAction Slack payload for Notification Actions
type SlackNotificationAction struct {
	SlackWebhook string `json:"slackWebhook"`
}

// NewSlackNotificationAction instantiates a new SlackNotificationAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlackNotificationAction(slackWebhook string) *SlackNotificationAction {
	this := SlackNotificationAction{}
	this.SlackWebhook = slackWebhook
	return &this
}

// NewSlackNotificationActionWithDefaults instantiates a new SlackNotificationAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlackNotificationActionWithDefaults() *SlackNotificationAction {
	this := SlackNotificationAction{}
	return &this
}

// GetSlackWebhook returns the SlackWebhook field value
func (o *SlackNotificationAction) GetSlackWebhook() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SlackWebhook
}

// GetSlackWebhookOk returns a tuple with the SlackWebhook field value
// and a boolean to check if the value has been set.
func (o *SlackNotificationAction) GetSlackWebhookOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlackWebhook, true
}

// SetSlackWebhook sets field value
func (o *SlackNotificationAction) SetSlackWebhook(v string) {
	o.SlackWebhook = v
}

func (o SlackNotificationAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlackNotificationAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["slackWebhook"] = o.SlackWebhook
	return toSerialize, nil
}

type NullableSlackNotificationAction struct {
	value *SlackNotificationAction
	isSet bool
}

func (v NullableSlackNotificationAction) Get() *SlackNotificationAction {
	return v.value
}

func (v *NullableSlackNotificationAction) Set(val *SlackNotificationAction) {
	v.value = val
	v.isSet = true
}

func (v NullableSlackNotificationAction) IsSet() bool {
	return v.isSet
}

func (v *NullableSlackNotificationAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlackNotificationAction(val *SlackNotificationAction) *NullableSlackNotificationAction {
	return &NullableSlackNotificationAction{value: val, isSet: true}
}

func (v NullableSlackNotificationAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlackNotificationAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


