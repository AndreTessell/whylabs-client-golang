/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SegmentWeight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SegmentWeight{}

// SegmentWeight struct for SegmentWeight
type SegmentWeight struct {
	Segment *Segment `json:"segment,omitempty"`
	// Entity weight value for each entity
	Weights *map[string]float64 `json:"weights,omitempty"`
}

// NewSegmentWeight instantiates a new SegmentWeight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSegmentWeight() *SegmentWeight {
	this := SegmentWeight{}
	return &this
}

// NewSegmentWeightWithDefaults instantiates a new SegmentWeight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSegmentWeightWithDefaults() *SegmentWeight {
	this := SegmentWeight{}
	return &this
}

// GetSegment returns the Segment field value if set, zero value otherwise.
func (o *SegmentWeight) GetSegment() Segment {
	if o == nil || isNil(o.Segment) {
		var ret Segment
		return ret
	}
	return *o.Segment
}

// GetSegmentOk returns a tuple with the Segment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentWeight) GetSegmentOk() (*Segment, bool) {
	if o == nil || isNil(o.Segment) {
		return nil, false
	}
	return o.Segment, true
}

// HasSegment returns a boolean if a field has been set.
func (o *SegmentWeight) HasSegment() bool {
	if o != nil && !isNil(o.Segment) {
		return true
	}

	return false
}

// SetSegment gets a reference to the given Segment and assigns it to the Segment field.
func (o *SegmentWeight) SetSegment(v Segment) {
	o.Segment = &v
}

// GetWeights returns the Weights field value if set, zero value otherwise.
func (o *SegmentWeight) GetWeights() map[string]float64 {
	if o == nil || isNil(o.Weights) {
		var ret map[string]float64
		return ret
	}
	return *o.Weights
}

// GetWeightsOk returns a tuple with the Weights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SegmentWeight) GetWeightsOk() (*map[string]float64, bool) {
	if o == nil || isNil(o.Weights) {
		return nil, false
	}
	return o.Weights, true
}

// HasWeights returns a boolean if a field has been set.
func (o *SegmentWeight) HasWeights() bool {
	if o != nil && !isNil(o.Weights) {
		return true
	}

	return false
}

// SetWeights gets a reference to the given map[string]float64 and assigns it to the Weights field.
func (o *SegmentWeight) SetWeights(v map[string]float64) {
	o.Weights = &v
}

func (o SegmentWeight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SegmentWeight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Segment) {
		toSerialize["segment"] = o.Segment
	}
	if !isNil(o.Weights) {
		toSerialize["weights"] = o.Weights
	}
	return toSerialize, nil
}

type NullableSegmentWeight struct {
	value *SegmentWeight
	isSet bool
}

func (v NullableSegmentWeight) Get() *SegmentWeight {
	return v.value
}

func (v *NullableSegmentWeight) Set(val *SegmentWeight) {
	v.value = val
	v.isSet = true
}

func (v NullableSegmentWeight) IsSet() bool {
	return v.isSet
}

func (v *NullableSegmentWeight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSegmentWeight(val *SegmentWeight) *NullableSegmentWeight {
	return &NullableSegmentWeight{value: val, isSet: true}
}

func (v NullableSegmentWeight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSegmentWeight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


