/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the EntityWeightRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityWeightRecord{}

// EntityWeightRecord struct for EntityWeightRecord
type EntityWeightRecord struct {
	// A list of entity weights for a segment
	SegmentWeights []SegmentWeight `json:"segmentWeights,omitempty"`
	Metadata *EntityWeightRecordMetadata `json:"metadata,omitempty"`
}

// NewEntityWeightRecord instantiates a new EntityWeightRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityWeightRecord() *EntityWeightRecord {
	this := EntityWeightRecord{}
	return &this
}

// NewEntityWeightRecordWithDefaults instantiates a new EntityWeightRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityWeightRecordWithDefaults() *EntityWeightRecord {
	this := EntityWeightRecord{}
	return &this
}

// GetSegmentWeights returns the SegmentWeights field value if set, zero value otherwise.
func (o *EntityWeightRecord) GetSegmentWeights() []SegmentWeight {
	if o == nil || isNil(o.SegmentWeights) {
		var ret []SegmentWeight
		return ret
	}
	return o.SegmentWeights
}

// GetSegmentWeightsOk returns a tuple with the SegmentWeights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityWeightRecord) GetSegmentWeightsOk() ([]SegmentWeight, bool) {
	if o == nil || isNil(o.SegmentWeights) {
		return nil, false
	}
	return o.SegmentWeights, true
}

// HasSegmentWeights returns a boolean if a field has been set.
func (o *EntityWeightRecord) HasSegmentWeights() bool {
	if o != nil && !isNil(o.SegmentWeights) {
		return true
	}

	return false
}

// SetSegmentWeights gets a reference to the given []SegmentWeight and assigns it to the SegmentWeights field.
func (o *EntityWeightRecord) SetSegmentWeights(v []SegmentWeight) {
	o.SegmentWeights = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EntityWeightRecord) GetMetadata() EntityWeightRecordMetadata {
	if o == nil || isNil(o.Metadata) {
		var ret EntityWeightRecordMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityWeightRecord) GetMetadataOk() (*EntityWeightRecordMetadata, bool) {
	if o == nil || isNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EntityWeightRecord) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given EntityWeightRecordMetadata and assigns it to the Metadata field.
func (o *EntityWeightRecord) SetMetadata(v EntityWeightRecordMetadata) {
	o.Metadata = &v
}

func (o EntityWeightRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityWeightRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SegmentWeights) {
		toSerialize["segmentWeights"] = o.SegmentWeights
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableEntityWeightRecord struct {
	value *EntityWeightRecord
	isSet bool
}

func (v NullableEntityWeightRecord) Get() *EntityWeightRecord {
	return v.value
}

func (v *NullableEntityWeightRecord) Set(val *EntityWeightRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityWeightRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityWeightRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityWeightRecord(val *EntityWeightRecord) *NullableEntityWeightRecord {
	return &NullableEntityWeightRecord{value: val, isSet: true}
}

func (v NullableEntityWeightRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityWeightRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


