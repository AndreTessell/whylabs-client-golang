/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NotificationSettingsDay the model 'NotificationSettingsDay'
type NotificationSettingsDay string

// List of NotificationSettingsDay
const (
	SUNDAY NotificationSettingsDay = "SUNDAY"
	MONDAY NotificationSettingsDay = "MONDAY"
	TUESDAY NotificationSettingsDay = "TUESDAY"
	WEDNESDAY NotificationSettingsDay = "WEDNESDAY"
	THURSDAY NotificationSettingsDay = "THURSDAY"
	FRIDAY NotificationSettingsDay = "FRIDAY"
	SATURDAY NotificationSettingsDay = "SATURDAY"
)

// All allowed values of NotificationSettingsDay enum
var AllowedNotificationSettingsDayEnumValues = []NotificationSettingsDay{
	"SUNDAY",
	"MONDAY",
	"TUESDAY",
	"WEDNESDAY",
	"THURSDAY",
	"FRIDAY",
	"SATURDAY",
}

func (v *NotificationSettingsDay) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NotificationSettingsDay(value)
	for _, existing := range AllowedNotificationSettingsDayEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NotificationSettingsDay", value)
}

// NewNotificationSettingsDayFromValue returns a pointer to a valid NotificationSettingsDay
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNotificationSettingsDayFromValue(v string) (*NotificationSettingsDay, error) {
	ev := NotificationSettingsDay(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NotificationSettingsDay: valid values are %v", v, AllowedNotificationSettingsDayEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NotificationSettingsDay) IsValid() bool {
	for _, existing := range AllowedNotificationSettingsDayEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NotificationSettingsDay value
func (v NotificationSettingsDay) Ptr() *NotificationSettingsDay {
	return &v
}

type NullableNotificationSettingsDay struct {
	value *NotificationSettingsDay
	isSet bool
}

func (v NullableNotificationSettingsDay) Get() *NotificationSettingsDay {
	return v.value
}

func (v *NullableNotificationSettingsDay) Set(val *NotificationSettingsDay) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettingsDay) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettingsDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettingsDay(val *NotificationSettingsDay) *NullableNotificationSettingsDay {
	return &NullableNotificationSettingsDay{value: val, isSet: true}
}

func (v NullableNotificationSettingsDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettingsDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

