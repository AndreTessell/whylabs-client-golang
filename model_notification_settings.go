/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotificationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationSettings{}

// NotificationSettings Settings that control how and when notifications are delivered.
type NotificationSettings struct {
	EmailSettings *UberNotificationSchedule `json:"emailSettings,omitempty"`
	SlackSettings *UberNotificationSchedule `json:"slackSettings,omitempty"`
	PagerDutySettings *UberNotificationSchedule `json:"pagerDutySettings,omitempty"`
}

// NewNotificationSettings instantiates a new NotificationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationSettings() *NotificationSettings {
	this := NotificationSettings{}
	return &this
}

// NewNotificationSettingsWithDefaults instantiates a new NotificationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationSettingsWithDefaults() *NotificationSettings {
	this := NotificationSettings{}
	return &this
}

// GetEmailSettings returns the EmailSettings field value if set, zero value otherwise.
func (o *NotificationSettings) GetEmailSettings() UberNotificationSchedule {
	if o == nil || isNil(o.EmailSettings) {
		var ret UberNotificationSchedule
		return ret
	}
	return *o.EmailSettings
}

// GetEmailSettingsOk returns a tuple with the EmailSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetEmailSettingsOk() (*UberNotificationSchedule, bool) {
	if o == nil || isNil(o.EmailSettings) {
		return nil, false
	}
	return o.EmailSettings, true
}

// HasEmailSettings returns a boolean if a field has been set.
func (o *NotificationSettings) HasEmailSettings() bool {
	if o != nil && !isNil(o.EmailSettings) {
		return true
	}

	return false
}

// SetEmailSettings gets a reference to the given UberNotificationSchedule and assigns it to the EmailSettings field.
func (o *NotificationSettings) SetEmailSettings(v UberNotificationSchedule) {
	o.EmailSettings = &v
}

// GetSlackSettings returns the SlackSettings field value if set, zero value otherwise.
func (o *NotificationSettings) GetSlackSettings() UberNotificationSchedule {
	if o == nil || isNil(o.SlackSettings) {
		var ret UberNotificationSchedule
		return ret
	}
	return *o.SlackSettings
}

// GetSlackSettingsOk returns a tuple with the SlackSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetSlackSettingsOk() (*UberNotificationSchedule, bool) {
	if o == nil || isNil(o.SlackSettings) {
		return nil, false
	}
	return o.SlackSettings, true
}

// HasSlackSettings returns a boolean if a field has been set.
func (o *NotificationSettings) HasSlackSettings() bool {
	if o != nil && !isNil(o.SlackSettings) {
		return true
	}

	return false
}

// SetSlackSettings gets a reference to the given UberNotificationSchedule and assigns it to the SlackSettings field.
func (o *NotificationSettings) SetSlackSettings(v UberNotificationSchedule) {
	o.SlackSettings = &v
}

// GetPagerDutySettings returns the PagerDutySettings field value if set, zero value otherwise.
func (o *NotificationSettings) GetPagerDutySettings() UberNotificationSchedule {
	if o == nil || isNil(o.PagerDutySettings) {
		var ret UberNotificationSchedule
		return ret
	}
	return *o.PagerDutySettings
}

// GetPagerDutySettingsOk returns a tuple with the PagerDutySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationSettings) GetPagerDutySettingsOk() (*UberNotificationSchedule, bool) {
	if o == nil || isNil(o.PagerDutySettings) {
		return nil, false
	}
	return o.PagerDutySettings, true
}

// HasPagerDutySettings returns a boolean if a field has been set.
func (o *NotificationSettings) HasPagerDutySettings() bool {
	if o != nil && !isNil(o.PagerDutySettings) {
		return true
	}

	return false
}

// SetPagerDutySettings gets a reference to the given UberNotificationSchedule and assigns it to the PagerDutySettings field.
func (o *NotificationSettings) SetPagerDutySettings(v UberNotificationSchedule) {
	o.PagerDutySettings = &v
}

func (o NotificationSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EmailSettings) {
		toSerialize["emailSettings"] = o.EmailSettings
	}
	if !isNil(o.SlackSettings) {
		toSerialize["slackSettings"] = o.SlackSettings
	}
	if !isNil(o.PagerDutySettings) {
		toSerialize["pagerDutySettings"] = o.PagerDutySettings
	}
	return toSerialize, nil
}

type NullableNotificationSettings struct {
	value *NotificationSettings
	isSet bool
}

func (v NullableNotificationSettings) Get() *NotificationSettings {
	return v.value
}

func (v *NullableNotificationSettings) Set(val *NotificationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationSettings(val *NotificationSettings) *NullableNotificationSettings {
	return &NullableNotificationSettings{value: val, isSet: true}
}

func (v NullableNotificationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


