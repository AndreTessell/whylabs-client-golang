/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MonitorRequestReferenceType the model 'MonitorRequestReferenceType'
type MonitorRequestReferenceType string

// List of MonitorRequestReferenceType
const (
	PROFILE MonitorRequestReferenceType = "reference_profile"
	WINDOW MonitorRequestReferenceType = "reference_window"
)

// All allowed values of MonitorRequestReferenceType enum
var AllowedMonitorRequestReferenceTypeEnumValues = []MonitorRequestReferenceType{
	"reference_profile",
	"reference_window",
}

func (v *MonitorRequestReferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitorRequestReferenceType(value)
	for _, existing := range AllowedMonitorRequestReferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitorRequestReferenceType", value)
}

// NewMonitorRequestReferenceTypeFromValue returns a pointer to a valid MonitorRequestReferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitorRequestReferenceTypeFromValue(v string) (*MonitorRequestReferenceType, error) {
	ev := MonitorRequestReferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitorRequestReferenceType: valid values are %v", v, AllowedMonitorRequestReferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitorRequestReferenceType) IsValid() bool {
	for _, existing := range AllowedMonitorRequestReferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitorRequestReferenceType value
func (v MonitorRequestReferenceType) Ptr() *MonitorRequestReferenceType {
	return &v
}

type NullableMonitorRequestReferenceType struct {
	value *MonitorRequestReferenceType
	isSet bool
}

func (v NullableMonitorRequestReferenceType) Get() *MonitorRequestReferenceType {
	return v.value
}

func (v *NullableMonitorRequestReferenceType) Set(val *MonitorRequestReferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorRequestReferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorRequestReferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorRequestReferenceType(val *MonitorRequestReferenceType) *NullableMonitorRequestReferenceType {
	return &NullableMonitorRequestReferenceType{value: val, isSet: true}
}

func (v NullableMonitorRequestReferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorRequestReferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

