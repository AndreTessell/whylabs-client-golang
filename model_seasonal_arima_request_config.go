/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SeasonalARIMARequestConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeasonalARIMARequestConfig{}

// SeasonalARIMARequestConfig struct for SeasonalARIMARequestConfig
type SeasonalARIMARequestConfig struct {
	Enable NullableBool `json:"enable,omitempty"`
	SeasonalityBatches NullableInt32 `json:"seasonalityBatches,omitempty"`
	Metrics []WhyLogsMetric `json:"metrics,omitempty"`
}

// NewSeasonalARIMARequestConfig instantiates a new SeasonalARIMARequestConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeasonalARIMARequestConfig() *SeasonalARIMARequestConfig {
	this := SeasonalARIMARequestConfig{}
	return &this
}

// NewSeasonalARIMARequestConfigWithDefaults instantiates a new SeasonalARIMARequestConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeasonalARIMARequestConfigWithDefaults() *SeasonalARIMARequestConfig {
	this := SeasonalARIMARequestConfig{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SeasonalARIMARequestConfig) GetEnable() bool {
	if o == nil || isNil(o.Enable.Get()) {
		var ret bool
		return ret
	}
	return *o.Enable.Get()
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SeasonalARIMARequestConfig) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enable.Get(), o.Enable.IsSet()
}

// HasEnable returns a boolean if a field has been set.
func (o *SeasonalARIMARequestConfig) HasEnable() bool {
	if o != nil && o.Enable.IsSet() {
		return true
	}

	return false
}

// SetEnable gets a reference to the given NullableBool and assigns it to the Enable field.
func (o *SeasonalARIMARequestConfig) SetEnable(v bool) {
	o.Enable.Set(&v)
}
// SetEnableNil sets the value for Enable to be an explicit nil
func (o *SeasonalARIMARequestConfig) SetEnableNil() {
	o.Enable.Set(nil)
}

// UnsetEnable ensures that no value is present for Enable, not even an explicit nil
func (o *SeasonalARIMARequestConfig) UnsetEnable() {
	o.Enable.Unset()
}

// GetSeasonalityBatches returns the SeasonalityBatches field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SeasonalARIMARequestConfig) GetSeasonalityBatches() int32 {
	if o == nil || isNil(o.SeasonalityBatches.Get()) {
		var ret int32
		return ret
	}
	return *o.SeasonalityBatches.Get()
}

// GetSeasonalityBatchesOk returns a tuple with the SeasonalityBatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SeasonalARIMARequestConfig) GetSeasonalityBatchesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeasonalityBatches.Get(), o.SeasonalityBatches.IsSet()
}

// HasSeasonalityBatches returns a boolean if a field has been set.
func (o *SeasonalARIMARequestConfig) HasSeasonalityBatches() bool {
	if o != nil && o.SeasonalityBatches.IsSet() {
		return true
	}

	return false
}

// SetSeasonalityBatches gets a reference to the given NullableInt32 and assigns it to the SeasonalityBatches field.
func (o *SeasonalARIMARequestConfig) SetSeasonalityBatches(v int32) {
	o.SeasonalityBatches.Set(&v)
}
// SetSeasonalityBatchesNil sets the value for SeasonalityBatches to be an explicit nil
func (o *SeasonalARIMARequestConfig) SetSeasonalityBatchesNil() {
	o.SeasonalityBatches.Set(nil)
}

// UnsetSeasonalityBatches ensures that no value is present for SeasonalityBatches, not even an explicit nil
func (o *SeasonalARIMARequestConfig) UnsetSeasonalityBatches() {
	o.SeasonalityBatches.Unset()
}

// GetMetrics returns the Metrics field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SeasonalARIMARequestConfig) GetMetrics() []WhyLogsMetric {
	if o == nil {
		var ret []WhyLogsMetric
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SeasonalARIMARequestConfig) GetMetricsOk() ([]WhyLogsMetric, bool) {
	if o == nil || isNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *SeasonalARIMARequestConfig) HasMetrics() bool {
	if o != nil && isNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []WhyLogsMetric and assigns it to the Metrics field.
func (o *SeasonalARIMARequestConfig) SetMetrics(v []WhyLogsMetric) {
	o.Metrics = v
}

func (o SeasonalARIMARequestConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeasonalARIMARequestConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enable.IsSet() {
		toSerialize["enable"] = o.Enable.Get()
	}
	if o.SeasonalityBatches.IsSet() {
		toSerialize["seasonalityBatches"] = o.SeasonalityBatches.Get()
	}
	if o.Metrics != nil {
		toSerialize["metrics"] = o.Metrics
	}
	return toSerialize, nil
}

type NullableSeasonalARIMARequestConfig struct {
	value *SeasonalARIMARequestConfig
	isSet bool
}

func (v NullableSeasonalARIMARequestConfig) Get() *SeasonalARIMARequestConfig {
	return v.value
}

func (v *NullableSeasonalARIMARequestConfig) Set(val *SeasonalARIMARequestConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSeasonalARIMARequestConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSeasonalARIMARequestConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeasonalARIMARequestConfig(val *SeasonalARIMARequestConfig) *NullableSeasonalARIMARequestConfig {
	return &NullableSeasonalARIMARequestConfig{value: val, isSet: true}
}

func (v NullableSeasonalARIMARequestConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeasonalARIMARequestConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


