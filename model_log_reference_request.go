/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LogReferenceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogReferenceRequest{}

// LogReferenceRequest Request payload for LogReference.
type LogReferenceRequest struct {
	Alias NullableString `json:"alias,omitempty"`
	DatasetTimestamp NullableInt64 `json:"datasetTimestamp,omitempty"`
}

// NewLogReferenceRequest instantiates a new LogReferenceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogReferenceRequest() *LogReferenceRequest {
	this := LogReferenceRequest{}
	return &this
}

// NewLogReferenceRequestWithDefaults instantiates a new LogReferenceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogReferenceRequestWithDefaults() *LogReferenceRequest {
	this := LogReferenceRequest{}
	return &this
}

// GetAlias returns the Alias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogReferenceRequest) GetAlias() string {
	if o == nil || isNil(o.Alias.Get()) {
		var ret string
		return ret
	}
	return *o.Alias.Get()
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogReferenceRequest) GetAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Alias.Get(), o.Alias.IsSet()
}

// HasAlias returns a boolean if a field has been set.
func (o *LogReferenceRequest) HasAlias() bool {
	if o != nil && o.Alias.IsSet() {
		return true
	}

	return false
}

// SetAlias gets a reference to the given NullableString and assigns it to the Alias field.
func (o *LogReferenceRequest) SetAlias(v string) {
	o.Alias.Set(&v)
}
// SetAliasNil sets the value for Alias to be an explicit nil
func (o *LogReferenceRequest) SetAliasNil() {
	o.Alias.Set(nil)
}

// UnsetAlias ensures that no value is present for Alias, not even an explicit nil
func (o *LogReferenceRequest) UnsetAlias() {
	o.Alias.Unset()
}

// GetDatasetTimestamp returns the DatasetTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LogReferenceRequest) GetDatasetTimestamp() int64 {
	if o == nil || isNil(o.DatasetTimestamp.Get()) {
		var ret int64
		return ret
	}
	return *o.DatasetTimestamp.Get()
}

// GetDatasetTimestampOk returns a tuple with the DatasetTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogReferenceRequest) GetDatasetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatasetTimestamp.Get(), o.DatasetTimestamp.IsSet()
}

// HasDatasetTimestamp returns a boolean if a field has been set.
func (o *LogReferenceRequest) HasDatasetTimestamp() bool {
	if o != nil && o.DatasetTimestamp.IsSet() {
		return true
	}

	return false
}

// SetDatasetTimestamp gets a reference to the given NullableInt64 and assigns it to the DatasetTimestamp field.
func (o *LogReferenceRequest) SetDatasetTimestamp(v int64) {
	o.DatasetTimestamp.Set(&v)
}
// SetDatasetTimestampNil sets the value for DatasetTimestamp to be an explicit nil
func (o *LogReferenceRequest) SetDatasetTimestampNil() {
	o.DatasetTimestamp.Set(nil)
}

// UnsetDatasetTimestamp ensures that no value is present for DatasetTimestamp, not even an explicit nil
func (o *LogReferenceRequest) UnsetDatasetTimestamp() {
	o.DatasetTimestamp.Unset()
}

func (o LogReferenceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogReferenceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Alias.IsSet() {
		toSerialize["alias"] = o.Alias.Get()
	}
	if o.DatasetTimestamp.IsSet() {
		toSerialize["datasetTimestamp"] = o.DatasetTimestamp.Get()
	}
	return toSerialize, nil
}

type NullableLogReferenceRequest struct {
	value *LogReferenceRequest
	isSet bool
}

func (v NullableLogReferenceRequest) Get() *LogReferenceRequest {
	return v.value
}

func (v *NullableLogReferenceRequest) Set(val *LogReferenceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLogReferenceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLogReferenceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogReferenceRequest(val *LogReferenceRequest) *NullableLogReferenceRequest {
	return &NullableLogReferenceRequest{value: val, isSet: true}
}

func (v NullableLogReferenceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogReferenceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


