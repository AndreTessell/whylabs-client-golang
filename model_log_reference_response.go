/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LogReferenceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogReferenceResponse{}

// LogReferenceResponse Response payload for uploading reference profile.
type LogReferenceResponse struct {
	Id *string `json:"id,omitempty"`
	ModelId *string `json:"modelId,omitempty"`
	Alias *string `json:"alias,omitempty"`
	UploadTimestamp *int64 `json:"uploadTimestamp,omitempty"`
	UploadUrl *string `json:"uploadUrl,omitempty"`
}

// NewLogReferenceResponse instantiates a new LogReferenceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogReferenceResponse() *LogReferenceResponse {
	this := LogReferenceResponse{}
	return &this
}

// NewLogReferenceResponseWithDefaults instantiates a new LogReferenceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogReferenceResponseWithDefaults() *LogReferenceResponse {
	this := LogReferenceResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LogReferenceResponse) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogReferenceResponse) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LogReferenceResponse) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LogReferenceResponse) SetId(v string) {
	o.Id = &v
}

// GetModelId returns the ModelId field value if set, zero value otherwise.
func (o *LogReferenceResponse) GetModelId() string {
	if o == nil || isNil(o.ModelId) {
		var ret string
		return ret
	}
	return *o.ModelId
}

// GetModelIdOk returns a tuple with the ModelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogReferenceResponse) GetModelIdOk() (*string, bool) {
	if o == nil || isNil(o.ModelId) {
		return nil, false
	}
	return o.ModelId, true
}

// HasModelId returns a boolean if a field has been set.
func (o *LogReferenceResponse) HasModelId() bool {
	if o != nil && !isNil(o.ModelId) {
		return true
	}

	return false
}

// SetModelId gets a reference to the given string and assigns it to the ModelId field.
func (o *LogReferenceResponse) SetModelId(v string) {
	o.ModelId = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *LogReferenceResponse) GetAlias() string {
	if o == nil || isNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogReferenceResponse) GetAliasOk() (*string, bool) {
	if o == nil || isNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *LogReferenceResponse) HasAlias() bool {
	if o != nil && !isNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *LogReferenceResponse) SetAlias(v string) {
	o.Alias = &v
}

// GetUploadTimestamp returns the UploadTimestamp field value if set, zero value otherwise.
func (o *LogReferenceResponse) GetUploadTimestamp() int64 {
	if o == nil || isNil(o.UploadTimestamp) {
		var ret int64
		return ret
	}
	return *o.UploadTimestamp
}

// GetUploadTimestampOk returns a tuple with the UploadTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogReferenceResponse) GetUploadTimestampOk() (*int64, bool) {
	if o == nil || isNil(o.UploadTimestamp) {
		return nil, false
	}
	return o.UploadTimestamp, true
}

// HasUploadTimestamp returns a boolean if a field has been set.
func (o *LogReferenceResponse) HasUploadTimestamp() bool {
	if o != nil && !isNil(o.UploadTimestamp) {
		return true
	}

	return false
}

// SetUploadTimestamp gets a reference to the given int64 and assigns it to the UploadTimestamp field.
func (o *LogReferenceResponse) SetUploadTimestamp(v int64) {
	o.UploadTimestamp = &v
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise.
func (o *LogReferenceResponse) GetUploadUrl() string {
	if o == nil || isNil(o.UploadUrl) {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogReferenceResponse) GetUploadUrlOk() (*string, bool) {
	if o == nil || isNil(o.UploadUrl) {
		return nil, false
	}
	return o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *LogReferenceResponse) HasUploadUrl() bool {
	if o != nil && !isNil(o.UploadUrl) {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *LogReferenceResponse) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

func (o LogReferenceResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogReferenceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ModelId) {
		toSerialize["modelId"] = o.ModelId
	}
	if !isNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !isNil(o.UploadTimestamp) {
		toSerialize["uploadTimestamp"] = o.UploadTimestamp
	}
	if !isNil(o.UploadUrl) {
		toSerialize["uploadUrl"] = o.UploadUrl
	}
	return toSerialize, nil
}

type NullableLogReferenceResponse struct {
	value *LogReferenceResponse
	isSet bool
}

func (v NullableLogReferenceResponse) Get() *LogReferenceResponse {
	return v.value
}

func (v *NullableLogReferenceResponse) Set(val *LogReferenceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLogReferenceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLogReferenceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogReferenceResponse(val *LogReferenceResponse) *NullableLogReferenceResponse {
	return &NullableLogReferenceResponse{value: val, isSet: true}
}

func (v NullableLogReferenceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogReferenceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


