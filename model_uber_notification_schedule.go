/*
WhyLabs Songbird

WhyLabs API that enables end-to-end AI observability

API version: 0.1
Contact: support@whylabs.ai
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UberNotificationSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UberNotificationSchedule{}

// UberNotificationSchedule  Combination of all possible schedule types, a hacky workaround for bugs in generated clients that use polymorphic types. There are three types of schedules. Weekly, Daily, and Individual. You need to set the right fields for each one.  Weekly:     enabled, cadence=WEEKLY, dayOfWeek, local24HourOfDay, localMinuteOfHour, localTimezone      Daily:     enabled, cadence=DAILY, local24HourOfDay, localMinuteOfHour, localTimezone      Individual:     enabled, cadence=INDIVIDUAL 
type UberNotificationSchedule struct {
	Enabled bool `json:"enabled"`
	Cadence NotificationSqsMessageCadence `json:"cadence"`
	DayOfWeek *NotificationSettingsDay `json:"dayOfWeek,omitempty"`
	Local24HourOfDay NullableInt32 `json:"local24HourOfDay,omitempty"`
	LocalMinuteOfHour NullableInt32 `json:"localMinuteOfHour,omitempty"`
	LocalTimezone NullableString `json:"localTimezone,omitempty"`
}

// NewUberNotificationSchedule instantiates a new UberNotificationSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUberNotificationSchedule(enabled bool, cadence NotificationSqsMessageCadence) *UberNotificationSchedule {
	this := UberNotificationSchedule{}
	this.Enabled = enabled
	this.Cadence = cadence
	return &this
}

// NewUberNotificationScheduleWithDefaults instantiates a new UberNotificationSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUberNotificationScheduleWithDefaults() *UberNotificationSchedule {
	this := UberNotificationSchedule{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *UberNotificationSchedule) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *UberNotificationSchedule) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *UberNotificationSchedule) SetEnabled(v bool) {
	o.Enabled = v
}

// GetCadence returns the Cadence field value
func (o *UberNotificationSchedule) GetCadence() NotificationSqsMessageCadence {
	if o == nil {
		var ret NotificationSqsMessageCadence
		return ret
	}

	return o.Cadence
}

// GetCadenceOk returns a tuple with the Cadence field value
// and a boolean to check if the value has been set.
func (o *UberNotificationSchedule) GetCadenceOk() (*NotificationSqsMessageCadence, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cadence, true
}

// SetCadence sets field value
func (o *UberNotificationSchedule) SetCadence(v NotificationSqsMessageCadence) {
	o.Cadence = v
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise.
func (o *UberNotificationSchedule) GetDayOfWeek() NotificationSettingsDay {
	if o == nil || isNil(o.DayOfWeek) {
		var ret NotificationSettingsDay
		return ret
	}
	return *o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UberNotificationSchedule) GetDayOfWeekOk() (*NotificationSettingsDay, bool) {
	if o == nil || isNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *UberNotificationSchedule) HasDayOfWeek() bool {
	if o != nil && !isNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given NotificationSettingsDay and assigns it to the DayOfWeek field.
func (o *UberNotificationSchedule) SetDayOfWeek(v NotificationSettingsDay) {
	o.DayOfWeek = &v
}

// GetLocal24HourOfDay returns the Local24HourOfDay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UberNotificationSchedule) GetLocal24HourOfDay() int32 {
	if o == nil || isNil(o.Local24HourOfDay.Get()) {
		var ret int32
		return ret
	}
	return *o.Local24HourOfDay.Get()
}

// GetLocal24HourOfDayOk returns a tuple with the Local24HourOfDay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UberNotificationSchedule) GetLocal24HourOfDayOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Local24HourOfDay.Get(), o.Local24HourOfDay.IsSet()
}

// HasLocal24HourOfDay returns a boolean if a field has been set.
func (o *UberNotificationSchedule) HasLocal24HourOfDay() bool {
	if o != nil && o.Local24HourOfDay.IsSet() {
		return true
	}

	return false
}

// SetLocal24HourOfDay gets a reference to the given NullableInt32 and assigns it to the Local24HourOfDay field.
func (o *UberNotificationSchedule) SetLocal24HourOfDay(v int32) {
	o.Local24HourOfDay.Set(&v)
}
// SetLocal24HourOfDayNil sets the value for Local24HourOfDay to be an explicit nil
func (o *UberNotificationSchedule) SetLocal24HourOfDayNil() {
	o.Local24HourOfDay.Set(nil)
}

// UnsetLocal24HourOfDay ensures that no value is present for Local24HourOfDay, not even an explicit nil
func (o *UberNotificationSchedule) UnsetLocal24HourOfDay() {
	o.Local24HourOfDay.Unset()
}

// GetLocalMinuteOfHour returns the LocalMinuteOfHour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UberNotificationSchedule) GetLocalMinuteOfHour() int32 {
	if o == nil || isNil(o.LocalMinuteOfHour.Get()) {
		var ret int32
		return ret
	}
	return *o.LocalMinuteOfHour.Get()
}

// GetLocalMinuteOfHourOk returns a tuple with the LocalMinuteOfHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UberNotificationSchedule) GetLocalMinuteOfHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalMinuteOfHour.Get(), o.LocalMinuteOfHour.IsSet()
}

// HasLocalMinuteOfHour returns a boolean if a field has been set.
func (o *UberNotificationSchedule) HasLocalMinuteOfHour() bool {
	if o != nil && o.LocalMinuteOfHour.IsSet() {
		return true
	}

	return false
}

// SetLocalMinuteOfHour gets a reference to the given NullableInt32 and assigns it to the LocalMinuteOfHour field.
func (o *UberNotificationSchedule) SetLocalMinuteOfHour(v int32) {
	o.LocalMinuteOfHour.Set(&v)
}
// SetLocalMinuteOfHourNil sets the value for LocalMinuteOfHour to be an explicit nil
func (o *UberNotificationSchedule) SetLocalMinuteOfHourNil() {
	o.LocalMinuteOfHour.Set(nil)
}

// UnsetLocalMinuteOfHour ensures that no value is present for LocalMinuteOfHour, not even an explicit nil
func (o *UberNotificationSchedule) UnsetLocalMinuteOfHour() {
	o.LocalMinuteOfHour.Unset()
}

// GetLocalTimezone returns the LocalTimezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UberNotificationSchedule) GetLocalTimezone() string {
	if o == nil || isNil(o.LocalTimezone.Get()) {
		var ret string
		return ret
	}
	return *o.LocalTimezone.Get()
}

// GetLocalTimezoneOk returns a tuple with the LocalTimezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UberNotificationSchedule) GetLocalTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalTimezone.Get(), o.LocalTimezone.IsSet()
}

// HasLocalTimezone returns a boolean if a field has been set.
func (o *UberNotificationSchedule) HasLocalTimezone() bool {
	if o != nil && o.LocalTimezone.IsSet() {
		return true
	}

	return false
}

// SetLocalTimezone gets a reference to the given NullableString and assigns it to the LocalTimezone field.
func (o *UberNotificationSchedule) SetLocalTimezone(v string) {
	o.LocalTimezone.Set(&v)
}
// SetLocalTimezoneNil sets the value for LocalTimezone to be an explicit nil
func (o *UberNotificationSchedule) SetLocalTimezoneNil() {
	o.LocalTimezone.Set(nil)
}

// UnsetLocalTimezone ensures that no value is present for LocalTimezone, not even an explicit nil
func (o *UberNotificationSchedule) UnsetLocalTimezone() {
	o.LocalTimezone.Unset()
}

func (o UberNotificationSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UberNotificationSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["cadence"] = o.Cadence
	if !isNil(o.DayOfWeek) {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if o.Local24HourOfDay.IsSet() {
		toSerialize["local24HourOfDay"] = o.Local24HourOfDay.Get()
	}
	if o.LocalMinuteOfHour.IsSet() {
		toSerialize["localMinuteOfHour"] = o.LocalMinuteOfHour.Get()
	}
	if o.LocalTimezone.IsSet() {
		toSerialize["localTimezone"] = o.LocalTimezone.Get()
	}
	return toSerialize, nil
}

type NullableUberNotificationSchedule struct {
	value *UberNotificationSchedule
	isSet bool
}

func (v NullableUberNotificationSchedule) Get() *UberNotificationSchedule {
	return v.value
}

func (v *NullableUberNotificationSchedule) Set(val *UberNotificationSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableUberNotificationSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableUberNotificationSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUberNotificationSchedule(val *UberNotificationSchedule) *NullableUberNotificationSchedule {
	return &NullableUberNotificationSchedule{value: val, isSet: true}
}

func (v NullableUberNotificationSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUberNotificationSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


