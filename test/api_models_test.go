/*
WhyLabs Songbird

Testing ModelsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ModelsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ModelsApiService CreateModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ModelsApi.CreateModel(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService DeactivateModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.DeactivateModel(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService DeleteAnalyzer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var analyzerId string

		resp, httpRes, err := apiClient.ModelsApi.DeleteAnalyzer(context.Background(), orgId, datasetId, analyzerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService DeleteEntitySchemaColumn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var columnId string

		resp, httpRes, err := apiClient.ModelsApi.DeleteEntitySchemaColumn(context.Background(), orgId, datasetId, columnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService DeleteMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var monitorId string

		resp, httpRes, err := apiClient.ModelsApi.DeleteMonitor(context.Background(), orgId, datasetId, monitorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService DeleteMonitorConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.DeleteMonitorConfig(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetAnalyzer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var analyzerId string

		resp, httpRes, err := apiClient.ModelsApi.GetAnalyzer(context.Background(), orgId, datasetId, analyzerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetEntitySchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.GetEntitySchema(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetEntitySchemaColumn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var columnId string

		resp, httpRes, err := apiClient.ModelsApi.GetEntitySchemaColumn(context.Background(), orgId, datasetId, columnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.GetModel(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var monitorId string

		resp, httpRes, err := apiClient.ModelsApi.GetMonitor(context.Background(), orgId, datasetId, monitorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetMonitorConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.GetMonitorConfig(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetMonitorConfigV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.GetMonitorConfigV2(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetMonitorConfigV3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.GetMonitorConfigV3(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetMonitorConfigV3Version", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var versionId string

		resp, httpRes, err := apiClient.ModelsApi.GetMonitorConfigV3Version(context.Background(), orgId, datasetId, versionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService GetProvidedConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ModelsApi.GetProvidedConfig(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService ListModels", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ModelsApi.ListModels(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService ListMonitorConfigV3Versions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.ListMonitorConfigV3Versions(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService ListSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.ListSegments(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutAnalyzer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var analyzerId string

		resp, httpRes, err := apiClient.ModelsApi.PutAnalyzer(context.Background(), orgId, datasetId, analyzerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutEntitySchema", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.PutEntitySchema(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutEntitySchemaColumn", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var columnId string

		resp, httpRes, err := apiClient.ModelsApi.PutEntitySchemaColumn(context.Background(), orgId, datasetId, columnId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutMonitor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string
		var monitorId string

		resp, httpRes, err := apiClient.ModelsApi.PutMonitor(context.Background(), orgId, datasetId, monitorId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutMonitorConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.PutMonitorConfig(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutMonitorConfigV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.PutMonitorConfigV2(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutMonitorConfigV3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.PutMonitorConfigV3(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutProvidedConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.ModelsApi.PutProvidedConfig(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutRequestMonitorRunConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.PutRequestMonitorRunConfig(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService PutSegments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.PutSegments(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService UpdateModel", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var modelId string

		resp, httpRes, err := apiClient.ModelsApi.UpdateModel(context.Background(), orgId, modelId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ModelsApiService ValidateMonitorConfigV3", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var datasetId string

		resp, httpRes, err := apiClient.ModelsApi.ValidateMonitorConfigV3(context.Background(), orgId, datasetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
