/*
WhyLabs Songbird

Testing NotificationSettingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_NotificationSettingsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NotificationSettingsApiService DeleteNotificationAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var actionId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.DeleteNotificationAction(context.Background(), orgId, actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService GetEmailNotificationActionPayload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationSettingsApi.GetEmailNotificationActionPayload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService GetNotificationAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var actionId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.GetNotificationAction(context.Background(), orgId, actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService GetNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.GetNotificationSettings(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService GetPagerDutyNotificationActionPayload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationSettingsApi.GetPagerDutyNotificationActionPayload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService GetSlackNotificationActionPayload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.NotificationSettingsApi.GetSlackNotificationActionPayload(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService ListNotificationActions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.ListNotificationActions(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService PutNotificationAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var type_ ActionType
		var actionId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.PutNotificationAction(context.Background(), orgId, type_, actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService UpdateNotificationAction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var type_ ActionType
		var actionId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.UpdateNotificationAction(context.Background(), orgId, type_, actionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NotificationSettingsApiService UpdateNotificationSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string

		resp, httpRes, err := apiClient.NotificationSettingsApi.UpdateNotificationSettings(context.Background(), orgId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
